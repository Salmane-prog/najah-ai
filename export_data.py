#!/usr/bin/env python3
"""
Script d'export COMPLET de toutes les tables et donn√©es depuis SQLite vers JSON
pour pouvoir les r√©importer en production
"""
import sqlite3
import json
from datetime import datetime
import os
import sys

def export_sqlite_data():
    """Exporte TOUTES les donn√©es depuis SQLite"""
    
    # Fichiers de base de donn√©es SQLite
    db_files = ['app.db', 'najah_ai.db', 'data/app.db', 'backend/app.db', 'backend/najah_ai.db']
    
    exported_files = []
    
    for db_file in db_files:
        if os.path.exists(db_file):
            print(f"üìÇ Analyse de {db_file}...")
            # Compter les tables avant l'export
            try:
                conn = sqlite3.connect(db_file)
                tables = get_all_tables(conn)
                conn.close()
                print(f"   üìã {len(tables)} tables d√©tect√©es")
                print(f"üìÇ Export depuis {db_file}")
                success = export_from_db(db_file)
                if success:
                    exported_files.append(db_file)
            except Exception as e:
                print(f"   ‚ùå Erreur analyse {db_file}: {e}")
    
    if not exported_files:
        print("‚ùå Aucun fichier de base de donn√©es trouv√©")
        print("üîç Recherche dans tous les sous-dossiers...")
        find_all_db_files()
    else:
        print(f"‚úÖ Export termin√© depuis {len(exported_files)} base(s) de donn√©es")

def find_all_db_files():
    """Trouve tous les fichiers .db dans le projet"""
    db_files = []
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith('.db') or file.endswith('.sqlite') or file.endswith('.sqlite3'):
                db_path = os.path.join(root, file)
                db_files.append(db_path)
                print(f"üîç Trouv√©: {db_path}")
    
    if db_files:
        print(f"\nüìä {len(db_files)} fichier(s) de base trouv√©(s)")
        for db_file in db_files:
            print(f"üìÇ Analyse de {db_file}...")
            # Compter les tables avant l'export
            try:
                conn = sqlite3.connect(db_file)
                tables = get_all_tables(conn)
                conn.close()
                print(f"   üìã {len(tables)} tables d√©tect√©es")
                print(f"üìÇ Export depuis {db_file}")
                export_from_db(db_file)
            except Exception as e:
                print(f"   ‚ùå Erreur analyse {db_file}: {e}")
    else:
        print("‚ùå Aucun fichier de base de donn√©es trouv√© dans le projet")

def get_all_tables(conn):
    """R√©cup√®re toutes les tables de la base de donn√©es"""
    cursor = conn.execute("""
        SELECT name FROM sqlite_master 
        WHERE type='table' AND name NOT LIKE 'sqlite_%'
        ORDER BY name
    """)
    return [row[0] for row in cursor.fetchall()]

def export_from_db(db_path):
    """Exporte TOUTES les donn√©es depuis une base SQLite sp√©cifique"""
    
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row  # Pour avoir les noms de colonnes
        
        # R√©cup√©rer toutes les tables
        tables = get_all_tables(conn)
        
        if not tables:
            print(f"‚ö†Ô∏è Aucune table trouv√©e dans {db_path}")
            conn.close()
            return False
        
        print(f"üìã {len(tables)} tables trouv√©es: {', '.join(tables)}")
        
        export_data = {
            "export_date": datetime.now().isoformat(),
            "source_db": db_path,
            "total_tables": len(tables),
            "table_names": tables,
            "tables": {}
        }
        
        total_rows = 0
        
        # Exporter chaque table
        for table_name in tables:
            try:
                print(f"üìä Export de la table '{table_name}'...")
                
                # R√©cup√©rer toutes les donn√©es de la table
                cursor = conn.execute(f"SELECT * FROM {table_name}")
                rows = cursor.fetchall()
                
                # Convertir en dictionnaires
                table_data = []
                for row in rows:
                    table_data.append(dict(row))
                
                export_data["tables"][table_name] = {
                    "row_count": len(table_data),
                    "data": table_data
                }
                
                total_rows += len(table_data)
                print(f"‚úÖ {len(table_data)} lignes export√©es depuis '{table_name}'")
                
            except Exception as e:
                print(f"‚ùå Erreur export table '{table_name}': {e}")
                export_data["tables"][table_name] = {
                    "error": str(e),
                    "row_count": 0,
                    "data": []
                }
        
        # Nom du fichier d'export bas√© sur le nom de la base
        db_name = os.path.basename(db_path).replace('.', '_')
        export_filename = f'data_export_{db_name}.json'
        
        # Sauvegarder en JSON
        with open(export_filename, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"üìÑ {total_rows} lignes export√©es dans {export_filename}")
        print(f"üìä R√©sum√©: {len(tables)} tables, {total_rows} lignes au total")
        
        # Cr√©er aussi un r√©sum√©
        create_summary(export_data, f'summary_{db_name}.txt')
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'export de {db_path}: {e}")
        return False

def create_summary(export_data, filename):
    """Cr√©e un r√©sum√© de l'export"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"üìä R√âSUM√â DE L'EXPORT - {export_data['export_date']}\n")
            f.write(f"{'='*50}\n\n")
            f.write(f"Source: {export_data['source_db']}\n")
            f.write(f"Nombre total de tables: {export_data['total_tables']}\n\n")
            
            total_rows = 0
            for table_name, table_info in export_data["tables"].items():
                row_count = table_info["row_count"]
                total_rows += row_count
                status = "‚úÖ" if "error" not in table_info else "‚ùå"
                f.write(f"{status} {table_name}: {row_count} lignes\n")
            
            f.write(f"\nüìà TOTAL: {total_rows} lignes export√©es\n")
        
        print(f"üìã R√©sum√© cr√©√©: {filename}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur cr√©ation r√©sum√©: {e}")

if __name__ == "__main__":
    print("üöÄ EXPORT COMPLET DES BASES DE DONN√âES NAJAH AI")
    print("="*50)
    export_sqlite_data()
