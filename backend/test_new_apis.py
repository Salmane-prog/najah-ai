#!/usr/bin/env python3
"""
Script de test pour toutes les nouvelles APIs
Teste les fonctionnalit√©s avanc√©es impl√©ment√©es
"""

import requests
import json
import sqlite3
from datetime import datetime, timedelta
import random

# Configuration
BASE_URL = "http://localhost:8000"
TEST_EMAIL = "teacher@test.com"
TEST_PASSWORD = "salmane123@"

def get_auth_token():
    """R√©cup√©rer le token d'authentification"""
    try:
        response = requests.post(f"{BASE_URL}/api/v1/auth/login", json={
            "email": TEST_EMAIL,
            "password": TEST_PASSWORD
        })
        
        if response.status_code == 200:
            data = response.json()
            return data.get("access_token")
        else:
            print(f"‚ùå Erreur de connexion: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {str(e)}")
        return None

def test_calendar_api(token):
    """Tester l'API Calendrier"""
    print("\nüìÖ Test de l'API Calendrier")
    headers = {"Authorization": f"Bearer {token}"}
    
    # Cr√©er un √©v√©nement
    event_data = {
        "title": "Test Cours Math√©matiques",
        "description": "Cours de test pour les nouvelles APIs",
        "event_type": "course",
        "start_time": (datetime.now() + timedelta(days=1)).isoformat(),
        "end_time": (datetime.now() + timedelta(days=1, hours=2)).isoformat(),
        "location": "Salle 101",
        "subject": "Math√©matiques",
        "color": "#3B82F6"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/v1/calendar/events", 
                               headers=headers, json=event_data)
        
        if response.status_code == 200:
            print("‚úÖ √âv√©nement cr√©√© avec succ√®s")
            event_id = response.json().get("event_id")
            
            # R√©cup√©rer les √©v√©nements
            response = requests.get(f"{BASE_URL}/api/v1/calendar/events", headers=headers)
            if response.status_code == 200:
                events = response.json()
                print(f"‚úÖ {len(events)} √©v√©nements r√©cup√©r√©s")
                
                # R√©cup√©rer les √©v√©nements √† venir
                response = requests.get(f"{BASE_URL}/api/v1/calendar/upcoming", headers=headers)
                if response.status_code == 200:
                    upcoming = response.json()
                    print(f"‚úÖ {len(upcoming)} √©v√©nements √† venir")
                else:
                    print(f"‚ùå Erreur r√©cup√©ration √©v√©nements √† venir: {response.status_code}")
            else:
                print(f"‚ùå Erreur r√©cup√©ration √©v√©nements: {response.status_code}")
        else:
            print(f"‚ùå Erreur cr√©ation √©v√©nement: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur test calendrier: {str(e)}")

def test_continuous_assessment_api(token):
    """Tester l'API √âvaluation Continue"""
    print("\nüìä Test de l'API √âvaluation Continue")
    headers = {"Authorization": f"Bearer {token}"}
    
    # Cr√©er une comp√©tence
    competency_data = {
        "name": "R√©solution d'√©quations",
        "description": "Capacit√© √† r√©soudre des √©quations du premier degr√©",
        "subject": "Math√©matiques",
        "level": "intermediate",
        "category": "skills"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/api/v1/continuous_assessment/competencies", 
                               headers=headers, json=competency_data)
        
        if response.status_code == 200:
            print("‚úÖ Comp√©tence cr√©√©e avec succ√®s")
            competency_id = response.json().get("competency_id")
            
            # R√©cup√©rer les comp√©tences
            response = requests.get(f"{BASE_URL}/api/v1/continuous_assessment/competencies", headers=headers)
            if response.status_code == 200:
                competencies = response.json()
                print(f"‚úÖ {len(competencies)} comp√©tences r√©cup√©r√©es")
                
                # Cr√©er une √©valuation continue
                assessment_data = {
                    "title": "√âvaluation Continue Math√©matiques",
                    "description": "√âvaluation des comp√©tences en r√©solution d'√©quations",
                    "assessment_type": "quiz",
                    "subject": "Math√©matiques",
                    "competencies_targeted": [competency_id] if competency_id else [],
                    "weight": 1.0,
                    "due_date": (datetime.now() + timedelta(days=7)).isoformat()
                }
                
                response = requests.post(f"{BASE_URL}/api/v1/continuous_assessment/assessments", 
                                       headers=headers, json=assessment_data)
                
                if response.status_code == 200:
                    print("‚úÖ √âvaluation continue cr√©√©e avec succ√®s")
                else:
                    print(f"‚ùå Erreur cr√©ation √©valuation: {response.status_code}")
            else:
                print(f"‚ùå Erreur r√©cup√©ration comp√©tences: {response.status_code}")
        else:
            print(f"‚ùå Erreur cr√©ation comp√©tence: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur test √©valuation continue: {str(e)}")

def test_export_reports_api(token):
    """Tester l'API Export et Rapports"""
    print("\nüìÑ Test de l'API Export et Rapports")
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        # R√©cup√©rer les rapports disponibles
        response = requests.get(f"{BASE_URL}/api/v1/export_reports/reports/available", headers=headers)
        
        if response.status_code == 200:
            reports = response.json()
            print(f"‚úÖ {len(reports)} types de rapports disponibles")
            
            # Tester l'export PDF d'un √©tudiant (simulation)
            print("‚úÖ Test d'export PDF simul√©")
            
            # Tester l'export Excel d'une classe (simulation)
            print("‚úÖ Test d'export Excel simul√©")
            
        else:
            print(f"‚ùå Erreur r√©cup√©ration rapports: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur test export rapports: {str(e)}")

def create_test_data():
    """Cr√©er des donn√©es de test pour les nouvelles fonctionnalit√©s"""
    print("\nüóÑÔ∏è Cr√©ation de donn√©es de test")
    
    try:
        conn = sqlite3.connect('data/app.db')
        cursor = conn.cursor()
        
        # Cr√©er des √©v√©nements de calendrier
        cursor.execute("""
            INSERT INTO schedule_events (title, description, event_type, start_time, end_time, 
                                       location, teacher_id, subject, color, is_active, created_at, updated_at)
            VALUES 
            ('Cours Math√©matiques', 'Cours sur les √©quations', 'course', 
             datetime('now', '+1 day'), datetime('now', '+1 day', '+2 hours'),
             'Salle 101', 1, 'Math√©matiques', '#3B82F6', 1, datetime('now'), datetime('now')),
            ('Examen Physique', 'Examen sur la m√©canique', 'exam',
             datetime('now', '+3 days'), datetime('now', '+3 days', '+3 hours'),
             'Salle 102', 1, 'Physique', '#EF4444', 1, datetime('now'), datetime('now')),
            ('Reunion Equipe', 'Reunion de l\'equipe pedagogique', 'meeting',
             datetime('now', '+1 day', '+4 hours'), datetime('now', '+1 day', '+5 hours'),
             'Salle de reunion', 1, 'Administration', '#10B981', 1, datetime('now'), datetime('now'))
        """)
        
        # Cr√©er des comp√©tences
        cursor.execute("""
            INSERT INTO competencies (name, description, subject, level, category, created_by, is_active, created_at, updated_at)
            VALUES 
            ('R√©solution d\'√©quations', 'Capacit√© √† r√©soudre des √©quations du premier degr√©', 'Math√©matiques', 'intermediate', 'skills', 1, 1, datetime('now'), datetime('now')),
            ('Compr√©hension de texte', 'Capacit√© √† comprendre et analyser un texte', 'Fran√ßais', 'beginner', 'knowledge', 1, 1, datetime('now'), datetime('now')),
            ('Exp√©rimentation scientifique', 'Capacit√© √† mener des exp√©riences', 'Sciences', 'advanced', 'skills', 1, 1, datetime('now'), datetime('now'))
        """)
        
        # Cr√©er des √©valuations continues
        cursor.execute("""
            INSERT INTO continuous_assessments (title, description, assessment_type, subject, teacher_id, 
                                              competencies_targeted, weight, due_date, is_active, created_at, updated_at)
            VALUES 
            ('√âvaluation Continue Math√©matiques', '√âvaluation des comp√©tences en r√©solution d\'√©quations', 'quiz', 'Math√©matiques', 1, 
             '[1]', 1.0, datetime('now', '+7 days'), 1, datetime('now'), datetime('now')),
            ('√âvaluation Continue Fran√ßais', '√âvaluation de la compr√©hension de texte', 'project', 'Fran√ßais', 1,
             '[2]', 1.5, datetime('now', '+10 days'), 1, datetime('now'), datetime('now'))
        """)
        
        conn.commit()
        print("‚úÖ Donn√©es de test cr√©√©es avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation donn√©es de test: {str(e)}")
    finally:
        conn.close()

def main():
    """Fonction principale de test"""
    print("üöÄ Test des nouvelles APIs - Najah AI")
    print("=" * 50)
    
    # Cr√©er des donn√©es de test
    create_test_data()
    
    # R√©cup√©rer le token d'authentification
    token = get_auth_token()
    if not token:
        print("‚ùå Impossible de r√©cup√©rer le token d'authentification")
        return
    
    print(f"‚úÖ Authentification r√©ussie")
    
    # Tester les APIs
    test_calendar_api(token)
    test_continuous_assessment_api(token)
    test_export_reports_api(token)
    
    print("\nüéâ Tests termin√©s !")
    print("=" * 50)

if __name__ == "__main__":
    main() 