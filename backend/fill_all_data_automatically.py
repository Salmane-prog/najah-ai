#!/usr/bin/env python3
"""
Script complet pour remplir AUTOMATIQUEMENT toutes les donn√©es n√©cessaires
pour l'√©valuation initiale et les parcours d'apprentissage.
"""

import sys
import os
import sqlite3
import json
from datetime import datetime, timedelta
import random

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def get_db_connection():
    """Cr√©er une connexion √† la base de donn√©es"""
    db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'app.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        print("   Cr√©ez d'abord la base avec: python init_complete_db.py")
        return None
    
    return sqlite3.connect(db_path)

def create_assessment_questions():
    """Cr√©er des questions d'√©valuation initiale compl√®tes"""
    print("üìù Cr√©ation des questions d'√©valuation initiale...")
    
    conn = get_db_connection()
    if not conn:
        return False
    
    cursor = conn.cursor()
    
    try:
        # Questions par mati√®re et niveau
        questions_data = [
            # FRAN√áAIS - Niveau D√©butant
            {
                "question_text": "Quel est le genre du mot 'livre' dans 'un livre int√©ressant' ?",
                "question_type": "multiple_choice",
                "subject": "Fran√ßais",
                "difficulty": "beginner",
                "options": json.dumps(["Masculin", "F√©minin", "Neutre", "Variable"]),
                "correct_answer": "Masculin",
                "points": 1.0,
                "order": 1
            },
            {
                "question_text": "Conjuguez le verbe '√™tre' √† la 1√®re personne du singulier au pr√©sent :",
                "question_type": "multiple_choice",
                "subject": "Fran√ßais",
                "difficulty": "beginner",
                "options": json.dumps(["Je suis", "Je es", "Je √™tre", "Je suis √™tre"]),
                "correct_answer": "Je suis",
                "points": 1.0,
                "order": 2
            },
            {
                "question_text": "Quel est le pluriel de 'cheval' ?",
                "question_type": "multiple_choice",
                "subject": "Fran√ßais",
                "difficulty": "beginner",
                "options": json.dumps(["Chevals", "Chevaux", "Chevales", "Cheval"]),
                "correct_answer": "Chevaux",
                "points": 1.0,
                "order": 3
            },
            
            # FRAN√áAIS - Niveau Interm√©diaire
            {
                "question_text": "Identifiez la figure de style dans 'Le soleil souriait ce matin' :",
                "question_type": "multiple_choice",
                "subject": "Fran√ßais",
                "difficulty": "intermediate",
                "options": json.dumps(["M√©taphore", "Personnification", "Comparaison", "Hyperbole"]),
                "correct_answer": "Personnification",
                "points": 1.5,
                "order": 4
            },
            {
                "question_text": "Quel est le temps du verbe dans 'Il aurait aim√© partir' ?",
                "question_type": "multiple_choice",
                "subject": "Fran√ßais",
                "difficulty": "intermediate",
                "options": json.dumps(["Conditionnel pr√©sent", "Conditionnel pass√©", "Plus-que-parfait", "Futur ant√©rieur"]),
                "correct_answer": "Conditionnel pass√©",
                "points": 1.5,
                "order": 5
            },
            
            # MATH√âMATIQUES - Niveau D√©butant
            {
                "question_text": "Quel est le r√©sultat de 15 + 27 ?",
                "question_type": "multiple_choice",
                "subject": "Math√©matiques",
                "difficulty": "beginner",
                "options": json.dumps(["40", "42", "41", "43"]),
                "correct_answer": "42",
                "points": 1.0,
                "order": 6
            },
            {
                "question_text": "Combien font 8 √ó 7 ?",
                "question_type": "multiple_choice",
                "subject": "Math√©matiques",
                "difficulty": "beginner",
                "options": json.dumps(["54", "56", "58", "60"]),
                "correct_answer": "56",
                "points": 1.0,
                "order": 7
            },
            {
                "question_text": "Quel est le double de 13 ?",
                "question_type": "multiple_choice",
                "subject": "Math√©matiques",
                "difficulty": "beginner",
                "options": json.dumps(["25", "26", "27", "28"]),
                "correct_answer": "26",
                "points": 1.0,
                "order": 8
            },
            
            # MATH√âMATIQUES - Niveau Interm√©diaire
            {
                "question_text": "R√©solvez l'√©quation : 2x + 5 = 13",
                "question_type": "multiple_choice",
                "subject": "Math√©matiques",
                "difficulty": "intermediate",
                "options": json.dumps(["x = 3", "x = 4", "x = 5", "x = 6"]),
                "correct_answer": "x = 4",
                "points": 1.5,
                "order": 9
            },
            {
                "question_text": "Quel est l'aire d'un carr√© de c√¥t√© 6 cm ?",
                "question_type": "multiple_choice",
                "subject": "Math√©matiques",
                "difficulty": "intermediate",
                "options": json.dumps(["24 cm¬≤", "30 cm¬≤", "36 cm¬≤", "42 cm¬≤"]),
                "correct_answer": "36 cm¬≤",
                "points": 1.5,
                "order": 10
            },
            
            # SCIENCES - Niveau D√©butant
            {
                "question_text": "Quel est l'√©tat de l'eau √† 100¬∞C ?",
                "question_type": "multiple_choice",
                "subject": "Sciences",
                "difficulty": "beginner",
                "options": json.dumps(["Solide", "Liquide", "Gaz", "Plasma"]),
                "correct_answer": "Gaz",
                "points": 1.0,
                "order": 11
            },
            {
                "question_text": "Quel organe pompe le sang dans le corps ?",
                "question_type": "multiple_choice",
                "subject": "Sciences",
                "difficulty": "beginner",
                "options": json.dumps(["Le cerveau", "Le c≈ìur", "Les poumons", "Le foie"]),
                "correct_answer": "Le c≈ìur",
                "points": 1.0,
                "order": 12
            },
            
            # SCIENCES - Niveau Interm√©diaire
            {
                "question_text": "Quel est le symbole chimique de l'or ?",
                "question_type": "multiple_choice",
                "subject": "Sciences",
                "difficulty": "intermediate",
                "options": json.dumps(["Ag", "Au", "Fe", "Cu"]),
                "correct_answer": "Au",
                "points": 1.5,
                "order": 13
            },
            {
                "question_text": "Quelle est la formule de l'√©nergie cin√©tique ?",
                "question_type": "multiple_choice",
                "subject": "Sciences",
                "difficulty": "intermediate",
                "options": json.dumps(["E = mgh", "E = ¬Ωmv¬≤", "E = mc¬≤", "E = Fd"]),
                "correct_answer": "E = ¬Ωmv¬≤",
                "points": 1.5,
                "order": 14
            },
            
            # HISTOIRE - Niveau D√©butant
            {
                "question_text": "En quelle ann√©e a eu lieu la R√©volution fran√ßaise ?",
                "question_type": "multiple_choice",
                "subject": "Histoire",
                "difficulty": "beginner",
                "options": json.dumps(["1789", "1799", "1769", "1779"]),
                "correct_answer": "1789",
                "points": 1.0,
                "order": 15
            },
            {
                "question_text": "Qui √©tait Napol√©on Bonaparte ?",
                "question_type": "multiple_choice",
                "subject": "Histoire",
                "difficulty": "beginner",
                "options": json.dumps(["Un peintre", "Un √©crivain", "Un empereur", "Un scientifique"]),
                "correct_answer": "Un empereur",
                "points": 1.0,
                "order": 16
            },
            
            # G√âOGRAPHIE - Niveau D√©butant
            {
                "question_text": "Quelle est la capitale de la France ?",
                "question_type": "multiple_choice",
                "subject": "G√©ographie",
                "difficulty": "beginner",
                "options": json.dumps(["Lyon", "Marseille", "Paris", "Toulouse"]),
                "correct_answer": "Paris",
                "points": 1.0,
                "order": 17
            },
            {
                "question_text": "Quel fleuve traverse Paris ?",
                "question_type": "multiple_choice",
                "subject": "G√©ographie",
                "difficulty": "beginner",
                "options": json.dumps(["La Loire", "La Seine", "Le Rh√¥ne", "La Garonne"]),
                "correct_answer": "La Seine",
                "points": 1.0,
                "order": 18
            }
        ]
        
        # Ins√©rer les questions
        for question in questions_data:
            cursor.execute("""
                INSERT OR IGNORE INTO assessment_questions 
                (question_text, question_type, subject, difficulty, options, correct_answer, points, "order")
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                question["question_text"],
                question["question_type"],
                question["subject"],
                question["difficulty"],
                question["options"],
                question["correct_answer"],
                question["points"],
                question["order"]
            ))
        
        conn.commit()
        print(f"‚úÖ {len(questions_data)} questions d'√©valuation cr√©√©es")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation questions: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def create_learning_paths():
    """Cr√©er des parcours d'apprentissage complets"""
    print("üõ§Ô∏è Cr√©ation des parcours d'apprentissage...")
    
    conn = get_db_connection()
    if not conn:
        return False
    
    cursor = conn.cursor()
    
    try:
        # Parcours d'apprentissage par mati√®re - ADAPT√â √Ä LA STRUCTURE R√âELLE
        learning_paths_data = [
            {
                "title": "Parcours Fran√ßais D√©butant",
                "description": "Apprentissage progressif du fran√ßais pour d√©butants",
                "objectives": "Ma√Ætriser les bases de la langue fran√ßaise",
                "subject": "Fran√ßais",
                "level": "beginner",
                "difficulty": "easy",
                "estimated_duration": 30,
                "is_adaptive": True,
                "created_by": 1
            },
            {
                "title": "Parcours Fran√ßais Interm√©diaire",
                "description": "Perfectionnement en fran√ßais pour niveau interm√©diaire",
                "objectives": "Am√©liorer l'expression et la compr√©hension",
                "subject": "Fran√ßais",
                "level": "intermediate",
                "difficulty": "medium",
                "estimated_duration": 45,
                "is_adaptive": True,
                "created_by": 1
            },
            {
                "title": "Parcours Math√©matiques D√©butant",
                "description": "Fondamentaux des math√©matiques",
                "objectives": "Acqu√©rir les bases du calcul et de la g√©om√©trie",
                "subject": "Math√©matiques",
                "level": "beginner",
                "difficulty": "easy",
                "estimated_duration": 40,
                "is_adaptive": True,
                "created_by": 1
            },
            {
                "title": "Parcours Math√©matiques Interm√©diaire",
                "description": "Alg√®bre et g√©om√©trie avanc√©es",
                "objectives": "Ma√Ætriser l'alg√®bre et la g√©om√©trie avanc√©e",
                "subject": "Math√©matiques",
                "level": "intermediate",
                "difficulty": "medium",
                "estimated_duration": 50,
                "is_adaptive": True,
                "created_by": 1
            },
            {
                "title": "Parcours Sciences D√©butant",
                "description": "D√©couverte des sciences naturelles",
                "objectives": "Comprendre les ph√©nom√®nes naturels de base",
                "subject": "Sciences",
                "level": "beginner",
                "difficulty": "easy",
                "estimated_duration": 35,
                "is_adaptive": True,
                "created_by": 1
            },
            {
                "title": "Parcours Histoire-G√©ographie",
                "description": "Histoire de France et g√©ographie mondiale",
                "objectives": "D√©couvrir l'histoire et la g√©ographie",
                "subject": "Histoire-G√©ographie",
                "level": "beginner",
                "difficulty": "easy",
                "estimated_duration": 25,
                "is_adaptive": True,
                "created_by": 1
            }
        ]
        
        # Ins√©rer les parcours - ADAPT√â √Ä LA STRUCTURE R√âELLE
        for path in learning_paths_data:
            cursor.execute("""
                INSERT OR IGNORE INTO learning_paths 
                (title, description, objectives, subject, level, difficulty, estimated_duration, is_adaptive, created_by)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                path["title"],
                path["description"],
                path["objectives"],
                path["subject"],
                path["level"],
                path["difficulty"],
                path["estimated_duration"],
                path["is_adaptive"],
                path["created_by"]
            ))
        
        conn.commit()
        print(f"‚úÖ {len(learning_paths_data)} parcours d'apprentissage cr√©√©s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation parcours: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def create_learning_path_steps():
    """Cr√©er les √©tapes des parcours d'apprentissage"""
    print("üìö Cr√©ation des √©tapes des parcours...")
    
    conn = get_db_connection()
    if not conn:
        return False
    
    cursor = conn.cursor()
    
    try:
        # R√©cup√©rer les IDs des parcours cr√©√©s
        cursor.execute("SELECT id, subject, level FROM learning_paths")
        paths = cursor.fetchall()
        
        steps_data = []
        
        for path_id, subject, level in paths:
            if subject == "Fran√ßais" and level == "beginner":
                steps_data.extend([
                    (path_id, 1, "Alphabet et sons", "Apprendre l'alphabet fran√ßais et les sons de base", "lesson", None, 15, True, True),
                    (path_id, 2, "Vocabulaire de base", "Mots essentiels du quotidien", "quiz", None, 20, True, True),
                    (path_id, 3, "Grammaire simple", "Articles et pronoms personnels", "lesson", None, 25, True, True),
                    (path_id, 4, "Conjugaison pr√©sent", "Verbes √™tre et avoir au pr√©sent", "quiz", None, 20, True, True),
                    (path_id, 5, "√âvaluation finale", "Test de validation du niveau d√©butant", "assessment", None, 30, True, True)
                ])
            elif subject == "Math√©matiques" and level == "beginner":
                steps_data.extend([
                    (path_id, 1, "Nombres de 1 √† 100", "Compter et √©crire les nombres", "lesson", None, 20, True, True),
                    (path_id, 2, "Addition et soustraction", "Op√©rations de base", "quiz", None, 25, True, True),
                    (path_id, 3, "Tables de multiplication", "Multiplications jusqu'√† 10", "lesson", None, 30, True, True),
                    (path_id, 4, "G√©om√©trie de base", "Formes et figures simples", "quiz", None, 25, True, True),
                    (path_id, 5, "√âvaluation finale", "Test de validation du niveau d√©butant", "assessment", None, 35, True, True)
                ])
            elif subject == "Sciences" and level == "beginner":
                steps_data.extend([
                    (path_id, 1, "Les 5 sens", "D√©couverte des sens humains", "lesson", None, 20, True, True),
                    (path_id, 2, "Le cycle de l'eau", "√âvaporation, condensation, pr√©cipitation", "quiz", None, 25, True, True),
                    (path_id, 3, "Les animaux", "Classification simple des animaux", "lesson", None, 30, True, True),
                    (path_id, 4, "Les plantes", "Parties d'une plante et photosynth√®se", "quiz", None, 25, True, True),
                    (path_id, 5, "√âvaluation finale", "Test de validation du niveau d√©butant", "assessment", None, 30, True, True)
                ])
        
        # Ins√©rer les √©tapes - ADAPT√â √Ä LA STRUCTURE R√âELLE
        for step in steps_data:
            cursor.execute("""
                INSERT OR IGNORE INTO learning_path_steps 
                (learning_path_id, step_number, title, description, content_type, content_id, estimated_duration, is_required, is_active)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, step)
        
        conn.commit()
        print(f"‚úÖ {len(steps_data)} √©tapes de parcours cr√©√©es")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation √©tapes: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def create_sample_assessments():
    """Cr√©er des √©valuations d'exemple pour les √©tudiants existants"""
    print("üìã Cr√©ation d'√©valuations d'exemple...")
    
    conn = get_db_connection()
    if not conn:
        return False
    
    cursor = conn.cursor()
    
    try:
        # R√©cup√©rer les √©tudiants existants
        cursor.execute("SELECT id FROM users WHERE role = 'student' LIMIT 5")
        students = cursor.fetchall()
        
        if not students:
            print("‚ö†Ô∏è Aucun √©tudiant trouv√© pour cr√©er des √©valuations")
            return False
        
        # Cr√©er des √©valuations pour chaque √©tudiant
        for student_id, in students:
            # √âvaluation initiale
            cursor.execute("""
                INSERT OR IGNORE INTO assessments 
                (student_id, assessment_type, title, description, status, started_at)
                VALUES (?, 'initial', '√âvaluation Initiale Compl√®te', 'Test de positionnement dans toutes les mati√®res', 'not_started', datetime('now'))
            """, (student_id,))
            
            # √âvaluation continue
            cursor.execute("""
                INSERT OR IGNORE INTO assessments 
                (student_id, assessment_type, title, description, status, started_at)
                VALUES (?, 'continuous', '√âvaluation Continue - Math√©matiques', 'Test des comp√©tences en math√©matiques', 'not_started', datetime('now'))
            """, (student_id,))
        
        conn.commit()
        print(f"‚úÖ √âvaluations cr√©√©es pour {len(students)} √©tudiants")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation √©valuations: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def verify_data_creation():
    """V√©rifier que toutes les donn√©es ont √©t√© cr√©√©es"""
    print("\nüîç V√©rification de la cr√©ation des donn√©es...")
    
    conn = get_db_connection()
    if not conn:
        return False
    
    cursor = conn.cursor()
    
    try:
        # Compter les √©l√©ments cr√©√©s
        counts = {}
        
        cursor.execute("SELECT COUNT(*) FROM assessment_questions")
        counts["questions"] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM learning_paths")
        counts["paths"] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM learning_path_steps")
        counts["steps"] = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM assessments")
        counts["assessments"] = cursor.fetchone()[0]
        
        print("üìä R√©sum√© des donn√©es cr√©√©es:")
        print(f"   üìù Questions d'√©valuation: {counts['questions']}")
        print(f"   üõ§Ô∏è Parcours d'apprentissage: {counts['paths']}")
        print(f"   üìö √âtapes de parcours: {counts['steps']}")
        print(f"   üìã √âvaluations: {counts['assessments']}")
        
        # V√©rifier que les tables ne sont plus vides
        success = all(count > 0 for count in counts.values())
        
        if success:
            print("‚úÖ Toutes les donn√©es ont √©t√© cr√©√©es avec succ√®s!")
        else:
            print("‚ö†Ô∏è Certaines donn√©es n'ont pas √©t√© cr√©√©es")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification: {e}")
        return False
    finally:
        conn.close()

def main():
    """Fonction principale"""
    print("üöÄ REMPLISSAGE AUTOMATIQUE COMPLET DE LA BASE DE DONN√âES")
    print("=" * 70)
    print("Ce script va cr√©er AUTOMATIQUEMENT toutes les donn√©es n√©cessaires")
    print("pour que l'√©valuation initiale et les parcours d'apprentissage")
    print("soient enti√®rement fonctionnels.")
    print("=" * 70)
    
    # √âtape 1: Questions d'√©valuation
    if not create_assessment_questions():
        print("‚ùå √âchec de la cr√©ation des questions")
        return False
    
    # √âtape 2: Parcours d'apprentissage
    if not create_learning_paths():
        print("‚ùå √âchec de la cr√©ation des parcours")
        return False
    
    # √âtape 3: √âtapes des parcours
    if not create_learning_path_steps():
        print("‚ùå √âchec de la cr√©ation des √©tapes")
        return False
    
    # √âtape 4: √âvaluations d'exemple
    if not create_sample_assessments():
        print("‚ùå √âchec de la cr√©ation des √©valuations")
        return False
    
    # √âtape 5: V√©rification
    if not verify_data_creation():
        print("‚ùå V√©rification √©chou√©e")
        return False
    
    print("\n" + "=" * 70)
    print("üéâ REMPLISSAGE AUTOMATIQUE TERMIN√â AVEC SUCC√àS!")
    print("=" * 70)
    print("\nüìã VOTRE PLATEFORME EST MAINTENANT PR√äTE!")
    print("\nüöÄ Prochaines √©tapes:")
    print("1. D√©marrez le backend: python app.py")
    print("2. D√©marrez le frontend: cd frontend && npm run dev")
    print("3. Testez l'√©valuation initiale")
    print("4. Testez les parcours d'apprentissage")
    print("\nüí° Toutes les donn√©es sont maintenant r√©elles et fonctionnelles!")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\n‚úÖ Script termin√© avec succ√®s!")
            sys.exit(0)
        else:
            print("\n‚ùå Script √©chou√©")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Script interrompu par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Erreur critique: {e}")
        sys.exit(1)
