#!/usr/bin/env python3
"""
Script pour tester tous les nouveaux endpoints des fonctionnalit√©s avanc√©es
- Gestion des Devoirs
- Calendrier Avanc√©
- Collaboration
- IA Avanc√©e
- Rapports D√©taill√©s
"""

import requests
import json
from datetime import datetime, timedelta

# Configuration
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api/v1"

def test_health_endpoint():
    """Tester l'endpoint de sant√©"""
    print("üè• Test de l'endpoint de sant√©...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ Endpoint de sant√© fonctionne")
            return True
        else:
            print(f"‚ùå Endpoint de sant√© √©chou√©: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_calendar_endpoints():
    """Tester les endpoints du calendrier"""
    print("\nüìÖ Test des endpoints du calendrier...")
    
    # Test sans authentification (doit retourner 401)
    try:
        response = requests.get(f"{API_BASE}/calendar/events")
        if response.status_code == 401:
            print("‚úÖ Endpoint calendrier prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint calendrier: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur calendrier: {e}")
    
    # Test des sessions d'√©tude
    try:
        response = requests.get(f"{API_BASE}/calendar/study-sessions")
        if response.status_code == 401:
            print("‚úÖ Endpoint sessions d'√©tude prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint sessions d'√©tude: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur sessions d'√©tude: {e}")
    
    return True

def test_collaboration_endpoints():
    """Tester les endpoints de collaboration"""
    print("\nüë• Test des endpoints de collaboration...")
    
    # Test des groupes d'√©tude
    try:
        response = requests.get(f"{API_BASE}/collaboration/study-groups")
        if response.status_code == 401:
            print("‚úÖ Endpoint groupes d'√©tude prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint groupes d'√©tude: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur groupes d'√©tude: {e}")
    
    # Test des projets
    try:
        response = requests.get(f"{API_BASE}/collaboration/projects")
        if response.status_code == 401:
            print("‚úÖ Endpoint projets prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint projets: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur projets: {e}")
    
    return True

def test_ai_advanced_endpoints():
    """Tester les endpoints de l'IA avanc√©e"""
    print("\nü§ñ Test des endpoints de l'IA avanc√©e...")
    
    # Test des recommandations
    try:
        response = requests.get(f"{API_BASE}/ai_advanced/recommendations")
        if response.status_code == 401:
            print("‚úÖ Endpoint recommandations IA prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint recommandations IA: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur recommandations IA: {e}")
    
    # Test des sessions de tutorat
    try:
        response = requests.get(f"{API_BASE}/ai_advanced/tutoring/sessions")
        if response.status_code == 401:
            print("‚úÖ Endpoint tutorat IA prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint tutorat IA: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur tutorat IA: {e}")
    
    # Test de la d√©tection de difficult√©s
    try:
        response = requests.get(f"{API_BASE}/ai_advanced/difficulty-detection")
        if response.status_code == 401:
            print("‚úÖ Endpoint d√©tection difficult√©s prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint d√©tection difficult√©s: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur d√©tection difficult√©s: {e}")
    
    return True

def test_homework_endpoints():
    """Tester les endpoints des devoirs"""
    print("\nüìù Test des endpoints des devoirs...")
    
    # Test des devoirs (c√¥t√© professeur)
    try:
        response = requests.get(f"{API_BASE}/homework/assignments")
        if response.status_code == 401:
            print("‚úÖ Endpoint devoirs prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint devoirs: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur devoirs: {e}")
    
    # Test des soumissions (c√¥t√© √©tudiant)
    try:
        response = requests.get(f"{API_BASE}/homework/submissions")
        if response.status_code == 401:
            print("‚úÖ Endpoint soumissions prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint soumissions: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur soumissions: {e}")
    
    return True

def test_detailed_reports_endpoints():
    """Tester les endpoints des rapports d√©taill√©s"""
    print("\nüìä Test des endpoints des rapports d√©taill√©s...")
    
    # Test des rapports de performance
    try:
        response = requests.get(f"{API_BASE}/ai_advanced/analytics/performance")
        if response.status_code == 401:
            print("‚úÖ Endpoint analytics performance prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint analytics performance: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur analytics performance: {e}")
    
    # Test des rapports d'engagement
    try:
        response = requests.get(f"{API_BASE}/ai_advanced/analytics/engagement")
        if response.status_code == 401:
            print("‚úÖ Endpoint analytics engagement prot√©g√© (401 - Non authentifi√©)")
        else:
            print(f"‚ö†Ô∏è Endpoint analytics engagement: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur analytics engagement: {e}")
    
    return True

def test_authentication_flow():
    """Tester le flux d'authentification"""
    print("\nüîê Test du flux d'authentification...")
    
    # Test de l'endpoint de connexion
    try:
        login_data = {
            "username": "test_user",
            "password": "test_password"
        }
        response = requests.post(f"{API_BASE}/auth/login", json=login_data)
        if response.status_code == 401:
            print("‚úÖ Endpoint de connexion fonctionne (401 - Identifiants invalides)")
        else:
            print(f"‚ö†Ô∏è Endpoint de connexion: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
    
    return True

def test_database_connectivity():
    """Tester la connectivit√© de la base de donn√©es"""
    print("\nüóÑÔ∏è Test de la connectivit√© de la base de donn√©es...")
    
    # V√©rifier que le serveur r√©pond
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            print("‚úÖ Serveur backend accessible")
            return True
        else:
            print(f"‚ùå Serveur backend: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Serveur backend inaccessible: {e}")
        return False

def test_cors_configuration():
    """Tester la configuration CORS"""
    print("\nüåê Test de la configuration CORS...")
    
    try:
        # Test avec origine frontend
        headers = {
            'Origin': 'http://localhost:3000',
            'Access-Control-Request-Method': 'GET',
            'Access-Control-Request-Headers': 'Content-Type'
        }
        response = requests.options(f"{API_BASE}/calendar/events", headers=headers)
        
        if response.status_code == 200:
            print("‚úÖ Configuration CORS fonctionne")
            return True
        else:
            print(f"‚ö†Ô∏è Configuration CORS: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur CORS: {e}")
        return False

def run_all_tests():
    """Ex√©cuter tous les tests"""
    print("üöÄ D√©marrage des tests des endpoints avanc√©s...")
    print("=" * 60)
    
    tests = [
        ("Connectivit√© serveur", test_database_connectivity),
        ("Endpoint de sant√©", test_health_endpoint),
        ("Configuration CORS", test_cors_configuration),
        ("Flux d'authentification", test_authentication_flow),
        ("Endpoints calendrier", test_calendar_endpoints),
        ("Endpoints collaboration", test_collaboration_endpoints),
        ("Endpoints IA avanc√©e", test_ai_advanced_endpoints),
        ("Endpoints devoirs", test_homework_endpoints),
        ("Endpoints rapports", test_detailed_reports_endpoints),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå Erreur lors du test {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}")
        if success:
            passed += 1
    
    print(f"\nüéØ R√©sultats: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s avec succ√®s!")
    else:
        print(f"‚ö†Ô∏è {total - passed} test(s) ont √©chou√©")
    
    return passed == total

if __name__ == "__main__":
    success = run_all_tests()
    
    if success:
        print("\n‚úÖ Tests termin√©s avec succ√®s!")
        print("\nüí° Prochaines √©tapes:")
        print("   1. V√©rifier que le frontend peut se connecter au backend")
        print("   2. Tester l'authentification avec de vrais utilisateurs")
        print("   3. V√©rifier que les widgets frontend fonctionnent")
    else:
        print("\n‚ùå Certains tests ont √©chou√©!")
        print("\nüîß Actions recommand√©es:")
        print("   1. V√©rifier que le serveur backend est en cours d'ex√©cution")
        print("   2. V√©rifier la configuration de la base de donn√©es")
        print("   3. V√©rifier les logs du serveur pour plus de d√©tails")




