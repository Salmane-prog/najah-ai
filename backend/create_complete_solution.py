#!/usr/bin/env python3
"""
Script complet pour cr√©er la solution compl√®te :
1. Table assessment_assignments (liaison √©tudiants-√©valuations)
2. Tables learning_paths manquantes
3. Utilisateur 30 et donn√©es de test
"""

import sqlite3
import os
from datetime import datetime

def create_assessment_assignments_table():
    """Cr√©er la table de liaison √©tudiants-√©valuations"""
    
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'app.db')
    
    print(f"üîó CR√âATION DE LA TABLE ASSESSMENT_ASSIGNMENTS")
    print("=" * 60)
    print(f"üìç Base de donn√©es: {db_path}")
    print()
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # Cr√©er la table assessment_assignments
        print("üìù Cr√©ation de la table assessment_assignments...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS assessment_assignments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                assessment_id INTEGER NOT NULL,
                status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'overdue')),
                assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                due_date TIMESTAMP,
                started_at TIMESTAMP,
                completed_at TIMESTAMP,
                FOREIGN KEY (student_id) REFERENCES users (id),
                FOREIGN KEY (assessment_id) REFERENCES assessments (id),
                UNIQUE(student_id, assessment_id)
            )
        ''')
        
        print("‚úÖ Table assessment_assignments cr√©√©e/v√©rifi√©e")
        
        # Cr√©er un index pour am√©liorer les performances
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_assessment_assignments_student 
            ON assessment_assignments(student_id)
        ''')
        
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_assessment_assignments_assessment 
            ON assessment_assignments(assessment_id)
        ''')
        
        print("‚úÖ Index de performance cr√©√©s")
        
        # Valider les changements
        conn.commit()
        print("üéâ Table assessment_assignments pr√™te!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        conn.rollback()
    
    finally:
        conn.close()

def create_learning_paths_tables():
    """Cr√©er les 3 tables manquantes pour les parcours d'apprentissage"""
    
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'app.db')
    
    print(f"\nüìö CR√âATION DES TABLES LEARNING PATHS")
    print("-" * 50)
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # 1. Table learning_paths
        print("1. üìö Cr√©ation de la table learning_paths...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS learning_paths (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                subject TEXT NOT NULL,
                difficulty TEXT DEFAULT 'medium',
                estimated_duration INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        print("   ‚úÖ Table learning_paths cr√©√©e/v√©rifi√©e")
        
        # 2. Table learning_path_steps
        print("2. üéØ Cr√©ation de la table learning_path_steps...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS learning_path_steps (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                learning_path_id INTEGER NOT NULL,
                step_number INTEGER NOT NULL,
                title TEXT NOT NULL,
                description TEXT,
                content_type TEXT,
                estimated_duration INTEGER,
                is_required BOOLEAN DEFAULT 1,
                is_active BOOLEAN DEFAULT 1,
                is_completed BOOLEAN DEFAULT 0,
                FOREIGN KEY (learning_path_id) REFERENCES learning_paths (id)
            )
        ''')
        print("   ‚úÖ Table learning_path_steps cr√©√©e/v√©rifi√©e")
        
        # 3. Table student_learning_paths
        print("3. üë§ Cr√©ation de la table student_learning_paths...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS student_learning_paths (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                learning_path_id INTEGER NOT NULL,
                progress REAL DEFAULT 0.0,
                current_step INTEGER DEFAULT 1,
                total_steps INTEGER DEFAULT 1,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_completed BOOLEAN DEFAULT 0,
                FOREIGN KEY (student_id) REFERENCES users (id),
                FOREIGN KEY (learning_path_id) REFERENCES learning_paths (id)
            )
        ''')
        print("   ‚úÖ Table student_learning_paths cr√©√©e/v√©rifi√©e")
        
        # Valider les changements
        conn.commit()
        print("\nüéâ 3 tables learning_paths cr√©√©es avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        conn.rollback()
    
    finally:
        conn.close()

def create_test_user_30():
    """Cr√©er l'utilisateur de test avec ID 30"""
    
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'app.db')
    
    print(f"\nüë§ CR√âATION DE L'UTILISATEUR DE TEST")
    print("-" * 40)
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # V√©rifier si l'utilisateur 30 existe d√©j√†
        cursor.execute("SELECT id, username, role FROM users WHERE id = 30")
        existing_user = cursor.fetchone()
        
        if existing_user:
            print(f"‚úÖ Utilisateur 30 existe d√©j√†: {existing_user}")
            return existing_user[0]
        
        # Cr√©er l'utilisateur 30 avec la bonne structure
        cursor.execute('''
            INSERT INTO users (id, username, email, full_name, role, created_at)
            VALUES (30, 'student30', 'student30@test.com', '√âtudiant Test 30', 'student', ?)
        ''', (datetime.now(),))
        
        print("‚úÖ Utilisateur 30 cr√©√© avec succ√®s")
        
        # Valider les changements
        conn.commit()
        return 30
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'utilisateur: {e}")
        conn.rollback()
        return None
    
    finally:
        conn.close()

def create_test_data_for_user_30():
    """Cr√©er des donn√©es de test compl√®tes pour l'utilisateur 30"""
    
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'app.db')
    
    print(f"\nüß™ CR√âATION DES DONN√âES DE TEST COMPL√àTES")
    print("-" * 50)
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # 1. Cr√©er des √©valuations de test
        print("1. üìù Cr√©ation d'√©valuations de test...")
        
        # V√©rifier si des √©valuations existent d√©j√†
        cursor.execute("SELECT COUNT(*) FROM assessments")
        existing_assessments = cursor.fetchone()[0]
        
        if existing_assessments == 0:
            # Cr√©er des √©valuations
            cursor.execute('''
                INSERT INTO assessments (title, description, category_id, total_points, time_limit, is_active, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', ('√âvaluation Math√©matiques', 'Test de connaissances en alg√®bre', 1, 20, 30, 1, datetime.now()))
            
            cursor.execute('''
                INSERT INTO assessments (title, description, category_id, total_points, time_limit, is_active, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', ('√âvaluation Physique', 'Test de m√©canique', 2, 25, 25, 1, datetime.now()))
            
            print("   ‚úÖ 2 √©valuations cr√©√©es")
        else:
            print(f"   ‚úÖ {existing_assessments} √©valuations existent d√©j√†")
        
        # 2. Cr√©er des assignations d'√©valuations pour l'utilisateur 30
        print("2. üîó Cr√©ation des assignations d'√©valuations...")
        
        # R√©cup√©rer les IDs des √©valuations
        cursor.execute("SELECT id FROM assessments LIMIT 2")
        assessments = cursor.fetchall()
        
        if len(assessments) >= 2:
            assessment1_id = assessments[0][0]
            assessment2_id = assessments[1][0]
            
            # V√©rifier si des assignations existent d√©j√†
            cursor.execute("SELECT COUNT(*) FROM assessment_assignments WHERE student_id = 30")
            existing_assignments = cursor.fetchone()[0]
            
            if existing_assignments == 0:
                # Assignation 1 : En attente
                cursor.execute('''
                    INSERT INTO assessment_assignments (student_id, assessment_id, status, assigned_at, due_date)
                    VALUES (?, ?, ?, ?, ?)
                ''', (30, assessment1_id, 'pending', datetime.now(), '2024-02-15 23:59:59'))
                
                # Assignation 2 : Termin√©e
                cursor.execute('''
                    INSERT INTO assessment_assignments (student_id, assessment_id, status, assigned_at, started_at, completed_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (30, assessment2_id, 'completed', '2024-01-10 10:00:00', '2024-01-10 10:30:00', '2024-01-10 10:55:00'))
                
                print("   ‚úÖ 2 assignations d'√©valuations cr√©√©es")
            else:
                print(f"   ‚úÖ {existing_assignments} assignations existent d√©j√†")
        
        # 3. Cr√©er des r√©sultats d'√©valuations
        print("3. üìä Cr√©ation des r√©sultats d'√©valuations...")
        
        # V√©rifier si des r√©sultats existent d√©j√†
        cursor.execute("SELECT COUNT(*) FROM student_assessment_results WHERE student_id = 30")
        existing_results = cursor.fetchone()[0]
        
        if existing_results == 0 and len(assessments) >= 2:
            # R√©sultat pour l'√©valuation 2 (termin√©e)
            cursor.execute('''
                INSERT INTO student_assessment_results (student_id, assessment_id, score, total_possible, percentage, time_taken, completed_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (30, assessment2_id, 18, 25, 72.0, 1500, '2024-01-10 10:55:00'))
            
            print("   ‚úÖ 1 r√©sultat d'√©valuation cr√©√©")
        else:
            print(f"   ‚úÖ {existing_results} r√©sultats existent d√©j√†")
        
        # 4. Cr√©er des parcours d'apprentissage
        print("4. üó∫Ô∏è Cr√©ation de parcours d'apprentissage...")
        
        # V√©rifier si des parcours existent d√©j√†
        cursor.execute("SELECT COUNT(*) FROM learning_paths")
        existing_paths = cursor.fetchone()[0]
        
        if existing_paths == 0:
            cursor.execute('''
                INSERT INTO learning_paths (title, subject, difficulty, estimated_duration, created_at)
                VALUES (?, ?, ?, ?, ?)
            ''', ('Parcours Math√©matiques', 'Math√©matiques', 'medium', 120, datetime.now()))
            
            cursor.execute('''
                INSERT INTO learning_paths (title, subject, difficulty, estimated_duration, created_at)
                VALUES (?, ?, ?, ?, ?)
            ''', ('Parcours Physique', 'Physique', 'easy', 90, datetime.now()))
            
            print("   ‚úÖ 2 parcours cr√©√©s")
        else:
            print(f"   ‚úÖ {existing_paths} parcours existent d√©j√†")
        
        # 5. Cr√©er des relations √©tudiant-parcours
        print("5. üîó Cr√©ation des relations √©tudiant-parcours...")
        
        # R√©cup√©rer les IDs des parcours
        cursor.execute("SELECT id FROM learning_paths LIMIT 2")
        paths = cursor.fetchall()
        
        if len(paths) >= 2:
            path1_id = paths[0][0]
            path2_id = paths[1][0]
            
            # V√©rifier si des relations existent d√©j√†
            cursor.execute("SELECT COUNT(*) FROM student_learning_paths WHERE student_id = 30")
            existing_relations = cursor.fetchone()[0]
            
            if existing_relations == 0:
                cursor.execute('''
                    INSERT INTO student_learning_paths (student_id, learning_path_id, progress, current_step, total_steps, started_at, is_completed)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (30, path1_id, 25.0, 2, 8, '2024-01-15', 0))
                
                cursor.execute('''
                    INSERT INTO student_learning_paths (student_id, learning_path_id, progress, current_step, total_steps, started_at, is_completed)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (30, path2_id, 100.0, 5, 5, '2024-01-10', 1))
                
                print("   ‚úÖ 2 relations √©tudiant-parcours cr√©√©es")
            else:
                print(f"   ‚úÖ {existing_relations} relations existent d√©j√†")
        
        # Valider les changements
        conn.commit()
        print("\nüéâ Donn√©es de test compl√®tes cr√©√©es avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es: {e}")
        conn.rollback()
    
    finally:
        conn.close()

def verify_complete_solution():
    """V√©rifier que la solution compl√®te fonctionne"""
    
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'app.db')
    
    print(f"\nüîç V√âRIFICATION DE LA SOLUTION COMPL√àTE")
    print("=" * 60)
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # V√©rifier l'utilisateur 30
        cursor.execute("SELECT id, username, role FROM users WHERE id = 30")
        user = cursor.fetchone()
        if user:
            print(f"‚úÖ Utilisateur 30: {user}")
        else:
            print("‚ùå Utilisateur 30 non trouv√©")
            return
        
        # V√©rifier les assignations d'√©valuations
        cursor.execute("SELECT COUNT(*) FROM assessment_assignments WHERE student_id = 30")
        assignment_count = cursor.fetchone()[0]
        print(f"üìù Assignations d'√©valuations pour l'utilisateur 30: {assignment_count}")
        
        # V√©rifier les r√©sultats d'√©valuations
        cursor.execute("SELECT COUNT(*) FROM student_assessment_results WHERE student_id = 30")
        result_count = cursor.fetchone()[0]
        print(f"üìä R√©sultats d'√©valuations pour l'utilisateur 30: {result_count}")
        
        # V√©rifier les parcours
        cursor.execute("SELECT COUNT(*) FROM student_learning_paths WHERE student_id = 30")
        path_count = cursor.fetchone()[0]
        print(f"üó∫Ô∏è Parcours pour l'utilisateur 30: {path_count}")
        
        # V√©rifier toutes les tables cr√©√©es
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name IN ('assessment_assignments', 'learning_paths', 'learning_path_steps', 'student_learning_paths')")
        created_tables = cursor.fetchall()
        print(f"üìã Tables cr√©√©es: {[table[0] for table in created_tables]}")
        
        print(f"\nüéØ R√âSUM√â FINAL:")
        print(f"   - Utilisateur 30: {'‚úÖ Cr√©√©' if user else '‚ùå Manquant'}")
        print(f"   - Assignations d'√©valuations: {assignment_count}")
        print(f"   - R√©sultats d'√©valuations: {result_count}")
        print(f"   - Parcours: {path_count}")
        print(f"   - Tables cr√©√©es: {'‚úÖ Compl√®tes' if len(created_tables) == 4 else '‚ùå Manquantes'}")
        
        if user and assignment_count > 0 and result_count > 0 and path_count > 0 and len(created_tables) == 4:
            print(f"\nüéâ SUCC√àS COMPLET ! VOS WIDGETS DEVRAIENT MAINTENANT AFFICHER DES DONN√âES!")
            print(f"üîÑ Rafra√Æchissez votre dashboard et testez les widgets!")
            print(f"üìä Les endpoints devraient maintenant retourner des donn√©es r√©elles!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
    
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ CR√âATION DE LA SOLUTION COMPL√àTE")
    print("=" * 70)
    print("üìã Ce script cr√©e :")
    print("   1. üîó Table assessment_assignments (liaison √©tudiants-√©valuations)")
    print("   2. üìö Tables learning_paths manquantes")
    print("   3. üë§ Utilisateur 30 avec donn√©es de test")
    print("   4. üìù Assignations et r√©sultats d'√©valuations")
    print("   5. üó∫Ô∏è Parcours d'apprentissage")
    print()
    
    create_assessment_assignments_table()
    create_learning_paths_tables()
    create_test_user_30()
    create_test_data_for_user_30()
    verify_complete_solution()
    
    print("\nüéâ SOLUTION COMPL√àTE CR√â√âE AVEC SUCC√àS!")
    print("üîÑ Maintenant, rafra√Æchissez votre dashboard et testez les widgets!")
    print("üìä Les 404 devraient √™tre remplac√©s par des donn√©es r√©elles!")
