#!/usr/bin/env python3
"""
Script de configuration compl√®te du syst√®me de questions am√©lior√©
"""

import os
import sys
import sqlite3
from datetime import datetime

def setup_database():
    """Configure la base de donn√©es avec toutes les nouvelles tables"""
    
    print("üîß CONFIGURATION DE LA BASE DE DONN√âES")
    print("=" * 50)
    
    # Chemin vers la base de donn√©es
    db_path = os.path.join(os.path.dirname(__file__), "..", "data", "app.db")
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return False
    
    print(f"üîç Connexion √† la base de donn√©es: {db_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # 1. Cr√©er la table question_history
        print("\n1Ô∏è‚É£ Cr√©ation de la table question_history...")
        
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS question_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                test_id INTEGER NOT NULL,
                question_id INTEGER NOT NULL,
                question_text TEXT NOT NULL,
                difficulty VARCHAR(20) NOT NULL,
                topic VARCHAR(100),
                asked_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                student_response TEXT,
                is_correct INTEGER,
                FOREIGN KEY (test_id) REFERENCES french_adaptive_tests (id)
            )
        """)
        
        # Cr√©er des index pour am√©liorer les performances
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_question_history_test_id ON question_history(test_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_question_history_question_id ON question_history(question_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_question_history_difficulty ON question_history(difficulty)")
        
        print("‚úÖ Table question_history cr√©√©e avec succ√®s")
        
        # 2. V√©rifier les tables existantes
        print("\n2Ô∏è‚É£ V√©rification des tables existantes...")
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        required_tables = [
            "users", "french_adaptive_tests", "french_learning_profiles",
            "question_history"
        ]
        
        for table in required_tables:
            if table in tables:
                print(f"‚úÖ Table {table} existe")
            else:
                print(f"‚ö†Ô∏è Table {table} manquante")
        
        # 3. Ins√©rer des donn√©es de d√©monstration si n√©cessaire
        print("\n3Ô∏è‚É£ V√©rification des donn√©es de d√©monstration...")
        
        # V√©rifier s'il y a des tests existants
        cursor.execute("SELECT COUNT(*) FROM french_adaptive_tests")
        test_count = cursor.fetchone()[0]
        
        if test_count == 0:
            print("üìù Aucun test existant, cr√©ation de tests de d√©monstration...")
            
            # Cr√©er un utilisateur de test si n√©cessaire
            cursor.execute("SELECT COUNT(*) FROM users WHERE role = 'student'")
            student_count = cursor.fetchone()[0]
            
            if student_count == 0:
                print("üë§ Cr√©ation d'un √©tudiant de test...")
                cursor.execute("""
                    INSERT INTO users (username, email, role, created_at) 
                    VALUES ('etudiant_test', 'etudiant@test.com', 'student', CURRENT_TIMESTAMP)
                """)
                student_id = cursor.lastrowid
                print(f"‚úÖ √âtudiant de test cr√©√© avec l'ID: {student_id}")
            else:
                # Utiliser le premier √©tudiant existant
                cursor.execute("SELECT id FROM users WHERE role = 'student' LIMIT 1")
                student_id = cursor.fetchone()[0]
                print(f"‚úÖ Utilisation de l'√©tudiant existant ID: {student_id}")
            
            # Cr√©er un test de d√©monstration
            cursor.execute("""
                INSERT INTO french_adaptive_tests (
                    student_id, test_type, total_questions, current_difficulty, 
                    status, started_at
                ) VALUES (?, 'initial', 10, 'easy', 'in_progress', CURRENT_TIMESTAMP)
            """, (student_id,))
            
            test_id = cursor.lastrowid
            print(f"‚úÖ Test de d√©monstration cr√©√© avec l'ID: {test_id}")
            
            # Cr√©er un profil d'apprentissage
            cursor.execute("""
                INSERT INTO french_learning_profiles (
                    student_id, learning_style, french_level, preferred_pace,
                    strengths, weaknesses, created_at
                ) VALUES (?, 'visual', 'A1', 'moyen', 
                '["motivation"]', '["grammaire", "vocabulaire"]', CURRENT_TIMESTAMP)
            """, (student_id,))
            
            print("‚úÖ Profil d'apprentissage cr√©√©")
            
        else:
            print(f"‚úÖ {test_count} tests existants trouv√©s")
        
        # 4. V√©rifier la structure de la base
        print("\n4Ô∏è‚É£ V√©rification de la structure...")
        
        # V√©rifier les colonnes de question_history
        cursor.execute("PRAGMA table_info(question_history)")
        columns = [row[1] for row in cursor.fetchall()]
        
        expected_columns = [
            "id", "test_id", "question_id", "question_text", 
            "difficulty", "topic", "asked_at", "student_response", "is_correct"
        ]
        
        for col in expected_columns:
            if col in columns:
                print(f"‚úÖ Colonne {col} existe")
            else:
                print(f"‚ùå Colonne {col} manquante")
        
        conn.commit()
        print("\n‚úÖ Configuration de la base de donn√©es termin√©e avec succ√®s!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la configuration: {e}")
        conn.rollback()
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        conn.close()

def test_system():
    """Test du syst√®me complet"""
    
    print("\nüß™ TEST DU SYST√àME COMPLET")
    print("=" * 50)
    
    try:
        # Test des imports
        print("1Ô∏è‚É£ Test des imports...")
        
        # Ajouter le r√©pertoire parent au path
        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
        
        from data.enhanced_french_questions import get_total_questions_count
        print("‚úÖ Import de la banque de questions r√©ussi")
        
        from services.question_rotation_service import QuestionRotationService
        print("‚úÖ Import du service de rotation r√©ussi")
        
        # Test des statistiques
        print("\n2Ô∏è‚É£ Test des statistiques...")
        
        counts = get_total_questions_count()
        print(f"üìä Total des questions: {counts['total']}")
        print(f"   - Facile: {counts['easy']}")
        print(f"   - Moyen: {counts['medium']}")
        print(f"   - Difficile: {counts['hard']}")
        
        print("\nüéâ SYST√àME PR√äT √Ä UTILISER!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ CONFIGURATION COMPL√àTE DU SYST√àME DE QUESTIONS AM√âLIOR√â")
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    # Configuration de la base de donn√©es
    if setup_database():
        print("\n‚úÖ Base de donn√©es configur√©e avec succ√®s")
        
        # Test du syst√®me
        if test_system():
            print("\nüéâ CONFIGURATION TERMIN√âE AVEC SUCC√àS!")
            print("\nüìã R√âSUM√â DES AM√âLIORATIONS:")
            print("   ‚úÖ Table question_history cr√©√©e")
            print("   ‚úÖ Service de rotation intelligente configur√©")
            print("   ‚úÖ Banque de questions √©tendue (40+ questions)")
            print("   ‚úÖ Questions dynamiques avec templates")
            print("   ‚úÖ Syst√®me anti-r√©p√©tition op√©rationnel")
            print("   ‚úÖ Endpoints de statistiques ajout√©s")
            
            print("\nüöÄ Le syst√®me est maintenant pr√™t √† √©viter les r√©p√©titions!")
        else:
            print("\n‚ùå Erreur lors du test du syst√®me")
    else:
        print("\n‚ùå Erreur lors de la configuration de la base de donn√©es")
    
    print("\n" + "=" * 60)











