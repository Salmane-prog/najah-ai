#!/usr/bin/env python3
"""
API pour l'onboarding automatique des √©tudiants
V√©rifie et lance automatiquement l'√©valuation initiale √† la premi√®re connexion
"""

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import Dict, Any
from datetime import datetime

from core.database import get_db
from core.security import get_current_user
from models.user import User
from services.student_onboarding_service import StudentOnboardingService

router = APIRouter(tags=["student_onboarding"])

@router.get("/student/{student_id}/onboarding-status")
async def get_student_onboarding_status(
    student_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    V√©rifier le statut d'onboarding d'un √©tudiant
    Lance automatiquement l'√©valuation initiale si n√©cessaire
    """
    try:
        # V√©rifier l'autorisation
        if current_user.id != student_id and current_user.role.value != "teacher":
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Acc√®s non autoris√©"
            )
        
        print(f"üéì V√©rification du statut d'onboarding pour l'√©tudiant {student_id}")
        
        # Utiliser le service d'onboarding
        onboarding_service = StudentOnboardingService(db)
        onboarding_status = onboarding_service.get_student_onboarding_status(student_id)
        
        return {
            "success": True,
            "message": "Statut d'onboarding r√©cup√©r√© avec succ√®s",
            "data": onboarding_status
        }
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification du statut d'onboarding: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors de la v√©rification: {str(e)}"
        )

@router.post("/student/{student_id}/start-onboarding")
async def start_student_onboarding(
    student_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    D√©marrer manuellement l'onboarding d'un √©tudiant
    """
    try:
        # V√©rifier l'autorisation
        if current_user.id != student_id and current_user.role.value != "teacher":
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Acc√®s non autoris√©"
            )
        
        print(f"üöÄ D√©marrage manuel de l'onboarding pour l'√©tudiant {student_id}")
        
        # Utiliser le service d'onboarding
        onboarding_service = StudentOnboardingService(db)
        
        # V√©rifier le statut actuel
        current_status = onboarding_service.check_and_initialize_student(student_id)
        
        if current_status["status"] == "fully_onboarded":
            return {
                "success": True,
                "message": "L'√©tudiant est d√©j√† enti√®rement configur√©",
                "data": current_status
            }
        
        # D√©marrer l'√©valuation initiale
        assessment_result = onboarding_service.auto_start_initial_assessment(student_id)
        
        # Mettre √† jour le statut
        updated_status = onboarding_service.check_and_initialize_student(student_id)
        
        return {
            "success": True,
            "message": "Onboarding d√©marr√© avec succ√®s",
            "data": {
                "previous_status": current_status,
                "assessment_result": assessment_result,
                "current_status": updated_status
            }
        }
        
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage de l'onboarding: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors du d√©marrage: {str(e)}"
        )

@router.get("/student/{student_id}/assessment-ready")
async def check_assessment_readiness(
    student_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    V√©rifier si l'√©valuation initiale est pr√™te pour un √©tudiant
    """
    try:
        # V√©rifier l'autorisation
        if current_user.id != student_id and current_user.role.value != "teacher":
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Acc√®s non autoris√©"
            )
        
        print(f"üîç V√©rification de la disponibilit√© de l'√©valuation pour l'√©tudiant {student_id}")
        
        # Utiliser le service d'onboarding
        onboarding_service = StudentOnboardingService(db)
        onboarding_status = onboarding_service.check_and_initialize_student(student_id)
        
        # V√©rifier si l'√©valuation est pr√™te
        assessment_ready = False
        assessment_id = None
        
        if onboarding_status["status"] == "needs_initial_evaluation":
            # D√©marrer automatiquement l'√©valuation
            assessment_result = onboarding_service.auto_start_initial_assessment(student_id)
            if assessment_result["success"]:
                assessment_ready = True
                assessment_id = assessment_result["assessment_id"]
        
        elif onboarding_status["status"] == "profile_exists_no_assessment":
            # V√©rifier s'il y a une √©valuation en cours
            existing_assessment = onboarding_service._get_existing_assessment(student_id)
            if existing_assessment and existing_assessment["status"] == "in_progress":
                assessment_ready = True
                assessment_id = existing_assessment["id"]
        
        return {
            "success": True,
            "message": "Statut de l'√©valuation v√©rifi√©",
            "data": {
                "assessment_ready": assessment_ready,
                "assessment_id": assessment_id,
                "onboarding_status": onboarding_status
            }
        }
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la disponibilit√©: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors de la v√©rification: {str(e)}"
        )

@router.get("/student/{student_id}/onboarding-summary")
async def get_onboarding_summary(
    student_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Obtenir un r√©sum√© complet de l'onboarding d'un √©tudiant
    """
    try:
        # V√©rifier l'autorisation
        if current_user.id != student_id and current_user.role.value != "teacher":
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Acc√®s non autoris√©"
            )
        
        print(f"üìä G√©n√©ration du r√©sum√© d'onboarding pour l'√©tudiant {student_id}")
        
        # Utiliser le service d'onboarding
        onboarding_service = StudentOnboardingService(db)
        
        # V√©rifier le statut actuel
        onboarding_status = onboarding_service.check_and_initialize_student(student_id)
        
        # R√©cup√©rer les informations d√©taill√©es
        summary = {
            "student_id": student_id,
            "onboarding_status": onboarding_status,
            "timestamp": datetime.utcnow().isoformat(),
            "next_actions": [],
            "completed_steps": [],
            "pending_steps": []
        }
        
        # Analyser les √©tapes
        if onboarding_status["has_learning_profile"]:
            summary["completed_steps"].append("Profil d'apprentissage cr√©√©")
        else:
            summary["pending_steps"].append("Cr√©er le profil d'apprentissage")
        
        if onboarding_status["has_completed_assessment"]:
            summary["completed_steps"].append("√âvaluation initiale termin√©e")
        else:
            summary["pending_steps"].append("Terminer l'√©valuation initiale")
        
        # D√©terminer les prochaines actions
        if onboarding_status["status"] == "needs_initial_evaluation":
            summary["next_actions"].append("Commencer l'√©valuation initiale")
        elif onboarding_status["status"] == "profile_exists_no_assessment":
            summary["next_actions"].append("Reprendre l'√©valuation initiale")
        elif onboarding_status["status"] == "fully_onboarded":
            summary["next_actions"].append("Commencer l'apprentissage")
        
        return {
            "success": True,
            "message": "R√©sum√© d'onboarding g√©n√©r√© avec succ√®s",
            "data": summary
        }
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du r√©sum√©: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors de la g√©n√©ration: {str(e)}"
        )

@router.post("/student/{student_id}/reset-onboarding")
async def reset_student_onboarding(
    student_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    R√©initialiser l'onboarding d'un √©tudiant (pour les tests ou corrections)
    """
    try:
        # V√©rifier l'autorisation (seulement les professeurs)
        if current_user.role.value != "teacher":
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="Seuls les professeurs peuvent r√©initialiser l'onboarding"
            )
        
        print(f"üîÑ R√©initialisation de l'onboarding pour l'√©tudiant {student_id}")
        
        # Utiliser le service d'onboarding
        onboarding_service = StudentOnboardingService(db)
        
        # Supprimer les donn√©es existantes
        self._reset_student_data(db, student_id)
        
        # V√©rifier le nouveau statut
        new_status = onboarding_service.check_and_initialize_student(student_id)
        
        return {
            "success": True,
            "message": "Onboarding r√©initialis√© avec succ√®s",
            "data": {
                "previous_status": "reset",
                "new_status": new_status
            }
        }
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©initialisation: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Erreur lors de la r√©initialisation: {str(e)}"
        )

def _reset_student_data(db: Session, student_id: int):
    """R√©initialiser les donn√©es d'un √©tudiant"""
    try:
        # Supprimer les profils d'apprentissage
        db.execute("""
            DELETE FROM french_learning_profiles 
            WHERE student_id = :student_id
        """, {"student_id": student_id})
        
        # Supprimer les tests
        db.execute("""
            DELETE FROM french_adaptive_tests 
            WHERE student_id = :student_id
        """, {"student_id": student_id})
        
        # Supprimer les r√©ponses
        db.execute("""
            DELETE FROM french_test_answers 
            WHERE student_id = :student_id
        """, {"student_id": student_id})
        
        # Supprimer les questions d'√©valuation
        db.execute("""
            DELETE FROM assessment_questions 
            WHERE assessment_id IN (
                SELECT id FROM french_adaptive_tests WHERE student_id = :student_id
            )
        """, {"student_id": student_id})
        
        db.commit()
        print(f"‚úÖ Donn√©es r√©initialis√©es pour l'√©tudiant {student_id}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la r√©initialisation des donn√©es: {e}")
        db.rollback()
        raise





