#!/usr/bin/env python3
"""
Script pour tester la connexion √† l'API et diagnostiquer le probl√®me de cr√©ation de tests
"""

import requests
import json

def test_api_connection():
    """Tester la connexion √† l'API"""
    base_url = "http://localhost:8000"
    
    print("üîç Test de connexion √† l'API...")
    print("=" * 50)
    
    try:
        # Test 1: V√©rifier que l'API est accessible
        print("\n1Ô∏è‚É£ Test de connectivit√©...")
        response = requests.get(f"{base_url}/docs", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API accessible sur /docs")
        else:
            print(f"‚ùå API /docs retourne: {response.status_code}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter √† l'API")
        print("   V√©rifiez que le backend est d√©marr√© sur le port 8000")
        return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False
    
    # Test 2: V√©rifier l'endpoint de cr√©ation de tests
    print("\n2Ô∏è‚É£ Test de l'endpoint de cr√©ation...")
    try:
        test_data = {
            "title": "Test de Diagnostic",
            "subject": "Diagnostic",
            "level": "Test",
            "duration": 10,
            "question_count": 5,
            "difficulty_range": "1-5",
            "learning_objectives": ["Test de connexion"],
            "adaptation_type": "hybrid"
        }
        
        response = requests.post(
            f"{base_url}/api/v1/teacher-adaptive-evaluation/tests/create",
            json=test_data,
            timeout=10
        )
        
        print(f"   - Status: {response.status_code}")
        print(f"   - R√©ponse: {response.text[:200]}...")
        
        if response.status_code == 401:
            print("   ‚ùå Erreur d'authentification - Token requis")
        elif response.status_code == 422:
            print("   ‚ùå Erreur de validation des donn√©es")
        elif response.status_code == 200 or response.status_code == 201:
            print("   ‚úÖ Test cr√©√© avec succ√®s !")
        else:
            print(f"   ‚ùå Erreur inattendue: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test: {e}")
    
    # Test 3: V√©rifier l'endpoint de liste des tests
    print("\n3Ô∏è‚É£ Test de l'endpoint de liste...")
    try:
        response = requests.get(
            f"{base_url}/api/v1/teacher-adaptive-evaluation/tests/teacher/33",
            timeout=10
        )
        
        print(f"   - Status: {response.status_code}")
        print(f"   - R√©ponse: {response.text[:200]}...")
        
        if response.status_code == 401:
            print("   ‚ùå Erreur d'authentification - Token requis")
        elif response.status_code == 200:
            print("   ‚úÖ Liste des tests accessible")
        else:
            print(f"   ‚ùå Erreur: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test: {e}")
    
    print("\n" + "=" * 50)
    print("üìã R√©sum√© du diagnostic:")
    print("   - Si vous voyez des erreurs 401: Probl√®me d'authentification")
    print("   - Si vous voyez des erreurs 422: Probl√®me de donn√©es")
    print("   - Si vous voyez des erreurs 500: Probl√®me serveur")
    print("   - Si tout est 200: L'API fonctionne, probl√®me c√¥t√© frontend")
    
    return True

if __name__ == "__main__":
    test_api_connection()
