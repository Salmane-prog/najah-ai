#!/usr/bin/env python3
"""
Script d'initialisation de la base de donn√©es avanc√©e
Cr√©e toutes les tables n√©cessaires pour les nouvelles fonctionnalit√©s
"""

import sqlite3
import json
from datetime import datetime
import os

def create_advanced_tables():
    """Cr√©er les tables avanc√©es pour les nouvelles fonctionnalit√©s"""
    
    # Connexion √† la base de donn√©es
    db_path = "najah_ai.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es {db_path} non trouv√©e!")
        print("Cr√©ation d'une nouvelle base de donn√©es...")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    print("üîß Cr√©ation des tables avanc√©es...")
    
    try:
        # 1. Table des questions √©tendues
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS extended_questions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question_text TEXT NOT NULL,
                question_type TEXT NOT NULL,
                subject TEXT NOT NULL,
                difficulty INTEGER NOT NULL,
                competency TEXT,
                learning_style TEXT,
                options TEXT,
                correct_answer TEXT NOT NULL,
                explanation TEXT,
                estimated_time INTEGER,
                cognitive_load REAL,
                tags TEXT,
                curriculum_standards TEXT,
                prerequisites TEXT,
                learning_objectives TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ Table 'extended_questions' cr√©√©e")
        
        # 2. Table des m√©tadonn√©es des questions
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS question_metadata (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question_id INTEGER NOT NULL,
                bloom_taxonomy_level TEXT,
                knowledge_type TEXT,
                cognitive_domain TEXT,
                difficulty_justification TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (question_id) REFERENCES extended_questions (id)
            )
        """)
        print("‚úÖ Table 'question_metadata' cr√©√©e")
        
        # 3. Table des tags
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS question_tags (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tag TEXT UNIQUE NOT NULL,
                category TEXT,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ Table 'question_tags' cr√©√©e")
        
        # 4. Table des relations questions-tags
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS question_tag_relations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                question_id INTEGER NOT NULL,
                tag_id INTEGER NOT NULL,
                FOREIGN KEY (question_id) REFERENCES extended_questions (id),
                FOREIGN KEY (tag_id) REFERENCES question_tags (id)
            )
        """)
        print("‚úÖ Table 'question_tag_relations' cr√©√©e")
        
        # 5. Table des profils cognitifs
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS cognitive_profiles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                learning_style TEXT NOT NULL,
                strengths TEXT,
                weaknesses TEXT,
                recommendations TEXT,
                confidence_level REAL,
                generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ Table 'cognitive_profiles' cr√©√©e")
        
        # 6. Table des analyses de r√©ponses
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS response_analyses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                question_id INTEGER NOT NULL,
                response_time INTEGER,
                is_correct BOOLEAN NOT NULL,
                time_analysis TEXT,
                pattern TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ Table 'response_analyses' cr√©√©e")
        
        # 7. Table des capacit√©s des √©tudiants (IRT)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS student_abilities (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                ability_level REAL NOT NULL,
                confidence_interval TEXT,
                estimated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        print("‚úÖ Table 'student_abilities' cr√©√©e")
        
        # 8. Table des sessions adaptatives
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS adaptive_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                session_start TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                session_end TIMESTAMP,
                initial_difficulty INTEGER NOT NULL,
                final_difficulty INTEGER,
                questions_answered INTEGER DEFAULT 0,
                correct_answers INTEGER DEFAULT 0,
                total_time INTEGER,
                cognitive_load_tracking TEXT,
                adaptation_history TEXT
            )
        """)
        print("‚úÖ Table 'adaptive_sessions' cr√©√©e")
        
        # Cr√©er des index pour am√©liorer les performances
        print("üîß Cr√©ation des index...")
        
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_extended_questions_subject ON extended_questions(subject)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_extended_questions_difficulty ON extended_questions(difficulty)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_extended_questions_type ON extended_questions(question_type)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_cognitive_profiles_student ON cognitive_profiles(student_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_response_analyses_student ON response_analyses(student_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_student_abilities_student ON student_abilities(student_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_adaptive_sessions_student ON adaptive_sessions(student_id)")
        
        print("‚úÖ Index cr√©√©s")
        
        # Ins√©rer quelques tags de base
        print("üîß Insertion des tags de base...")
        
        base_tags = [
            ("math√©matiques", "mati√®re", "Questions de math√©matiques"),
            ("fran√ßais", "mati√®re", "Questions de fran√ßais"),
            ("sciences", "mati√®re", "Questions de sciences"),
            ("histoire", "mati√®re", "Questions d'histoire"),
            ("g√©ographie", "mati√®re", "Questions de g√©ographie"),
            ("facile", "difficult√©", "Questions de niveau facile"),
            ("moyen", "difficult√©", "Questions de niveau moyen"),
            ("difficile", "difficult√©", "Questions de niveau difficile"),
            ("QCM", "type", "Questions √† choix multiples"),
            ("texte_libre", "type", "Questions √† r√©ponse libre"),
            ("image", "type", "Questions avec support image"),
            ("logique", "comp√©tence", "D√©veloppement de la logique"),
            ("m√©moire", "comp√©tence", "Exercice de la m√©moire"),
            ("compr√©hension", "comp√©tence", "Compr√©hension de texte"),
            ("calcul", "comp√©tence", "Calculs math√©matiques"),
            ("analyse", "comp√©tence", "Analyse et r√©flexion"),
            ("visuel", "style", "Style d'apprentissage visuel"),
            ("auditif", "style", "Style d'apprentissage auditif"),
            ("kinesth√©sique", "style", "Style d'apprentissage kinesth√©sique"),
            ("lecture_√©criture", "style", "Style d'apprentissage lecture/√©criture")
        ]
        
        for tag, category, description in base_tags:
            try:
                cursor.execute("""
                    INSERT OR IGNORE INTO question_tags (tag, category, description)
                    VALUES (?, ?, ?)
                """, (tag, category, description))
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur lors de l'insertion du tag {tag}: {e}")
        
        print("‚úÖ Tags de base ins√©r√©s")
        
        # Valider les changements
        conn.commit()
        print("‚úÖ Toutes les tables ont √©t√© cr√©√©es avec succ√®s!")
        
        # V√©rifier la structure
        print("\nüîç V√©rification de la structure des tables...")
        
        tables = [
            "extended_questions", "question_metadata", "question_tags", 
            "question_tag_relations", "cognitive_profiles", "response_analyses",
            "student_abilities", "adaptive_sessions"
        ]
        
        for table in tables:
            cursor.execute(f"PRAGMA table_info({table})")
            columns = cursor.fetchall()
            print(f"   üìã {table}: {len(columns)} colonnes")
        
        # Compter les tags
        cursor.execute("SELECT COUNT(*) FROM question_tags")
        tag_count = cursor.fetchone()[0]
        print(f"   üè∑Ô∏è Tags disponibles: {tag_count}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        conn.rollback()
        raise
    
    finally:
        conn.close()

def test_database_connection():
    """Tester la connexion √† la base de donn√©es"""
    try:
        conn = sqlite3.connect("najah_ai.db")
        cursor = conn.cursor()
        
        # Test simple
        cursor.execute("SELECT 1")
        result = cursor.fetchone()
        
        if result and result[0] == 1:
            print("‚úÖ Connexion √† la base de donn√©es r√©ussie!")
            return True
        else:
            print("‚ùå Erreur de connexion √† la base de donn√©es!")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False
    
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ Initialisation de la base de donn√©es avanc√©e...")
    print("=" * 50)
    
    # Cr√©er les tables
    create_advanced_tables()
    
    print("\n" + "=" * 50)
    
    # Tester la connexion
    test_database_connection()
    
    print("\nüéâ Initialisation termin√©e!")
    print("\nüìã Tables cr√©√©es:")
    print("   - extended_questions (banque de questions √©tendue)")
    print("   - question_metadata (m√©tadonn√©es des questions)")
    print("   - question_tags (tags de cat√©gorisation)")
    print("   - question_tag_relations (relations questions-tags)")
    print("   - cognitive_profiles (profils cognitifs)")
    print("   - response_analyses (analyses des r√©ponses)")
    print("   - student_abilities (capacit√©s IRT)")
    print("   - adaptive_sessions (sessions adaptatives)")
    
    print("\nüîß Prochaines √©tapes:")
    print("   1. Ex√©cuter create_extended_question_bank.py pour peupler la banque")
    print("   2. Tester les endpoints avanc√©s")
    print("   3. Int√©grer les composants frontend")












