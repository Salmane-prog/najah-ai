#!/usr/bin/env python3
"""
Script de test pour le syst√®me de rotation des questions
"""

import os
import sys
import random
from datetime import datetime

# Ajouter le r√©pertoire parent au path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_question_rotation():
    """Test du syst√®me de rotation des questions"""
    
    print("üß™ TEST DU SYST√àME DE ROTATION DES QUESTIONS")
    print("=" * 50)
    
    try:
        # Test 1: Import des modules
        print("\n1Ô∏è‚É£ Test des imports...")
        
        from data.enhanced_french_questions import (
            get_question_pool, 
            generate_dynamic_question, 
            get_total_questions_count
        )
        print("‚úÖ Import de la banque de questions √©tendue r√©ussi")
        
        from services.question_rotation_service import QuestionRotationService
        print("‚úÖ Import du service de rotation r√©ussi")
        
        # Test 2: V√©rification de la banque de questions
        print("\n2Ô∏è‚É£ V√©rification de la banque de questions...")
        
        counts = get_total_questions_count()
        print(f"üìä Nombre total de questions: {counts['total']}")
        print(f"   - Facile: {counts['easy']}")
        print(f"   - Moyen: {counts['medium']}")
        print(f"   - Difficile: {counts['hard']}")
        
        # Test 3: Test des questions dynamiques
        print("\n3Ô∏è‚É£ Test des questions dynamiques...")
        
        # Question d'articles
        article_question = generate_dynamic_question("articles", "easy")
        print(f"üìù Question articles: {article_question['question']}")
        print(f"   R√©ponse: {article_question['correct']}")
        print(f"   Dynamique: {article_question.get('is_dynamic', False)}")
        
        # Question de conjugaison
        conjugation_question = generate_dynamic_question("conjugation", "medium")
        print(f"üìù Question conjugaison: {conjugation_question['question']}")
        print(f"   R√©ponse: {conjugation_question['correct']}")
        print(f"   Dynamique: {conjugation_question.get('is_dynamic', False)}")
        
        # Test 4: Test du pool de questions
        print("\n4Ô∏è‚É£ Test du pool de questions...")
        
        easy_pool = get_question_pool("easy", include_dynamic=True)
        medium_pool = get_question_pool("medium", include_dynamic=True)
        hard_pool = get_question_pool("hard", include_dynamic=True)
        
        print(f"üìö Pool facile: {len(easy_pool)} questions")
        print(f"üìö Pool moyen: {len(medium_pool)} questions")
        print(f"üìö Pool difficile: {len(hard_pool)} questions")
        
        # Test 5: Simulation de s√©lection de questions
        print("\n5Ô∏è‚É£ Simulation de s√©lection de questions...")
        
        # Simuler un test avec plusieurs questions
        test_questions = []
        difficulties = ["easy", "medium", "hard"]
        
        for i in range(10):
            difficulty = random.choice(difficulties)
            pool = get_question_pool(difficulty, include_dynamic=True)
            
            if pool:
                question = random.choice(pool)
                test_questions.append({
                    "id": question["id"],
                    "difficulty": question["difficulty"],
                    "topic": question.get("topic", "Sans topic")
                })
        
        # V√©rifier les r√©p√©titions
        question_ids = [q["id"] for q in test_questions]
        unique_ids = set(question_ids)
        repetition_rate = (len(question_ids) - len(unique_ids)) / len(question_ids)
        
        print(f"üîÑ Taux de r√©p√©tition simul√©: {repetition_rate:.2%}")
        print(f"   Questions uniques: {len(unique_ids)}/{len(question_ids)}")
        
        if repetition_rate == 0.0:
            print("‚úÖ Aucune r√©p√©tition d√©tect√©e!")
        elif repetition_rate < 0.1:
            print("‚úÖ Tr√®s peu de r√©p√©titions, syst√®me efficace!")
        else:
            print("‚ö†Ô∏è R√©p√©titions d√©tect√©es, √† am√©liorer")
        
        # Test 6: V√©rification des topics
        print("\n6Ô∏è‚É£ V√©rification des topics...")
        
        topics = {}
        for question in test_questions:
            topic = question["topic"]
            topics[topic] = topics.get(topic, 0) + 1
        
        print("üìã R√©partition par topic:")
        for topic, count in topics.items():
            print(f"   - {topic}: {count} questions")
        
        print("\nüéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DES TESTS: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_question_generation():
    """Test de la g√©n√©ration de questions sp√©cifiques"""
    
    print("\nüîß TEST DE G√âN√âRATION DE QUESTIONS SP√âCIFIQUES")
    print("=" * 50)
    
    try:
        from data.enhanced_french_questions import generate_dynamic_question
        
        # Test articles
        print("\nüìù Test questions d'articles:")
        for i in range(3):
            question = generate_dynamic_question("articles", "easy")
            print(f"   {i+1}. {question['question']} ‚Üí {question['correct']}")
        
        # Test conjugaison
        print("\nüìù Test questions de conjugaison:")
        for i in range(3):
            question = generate_dynamic_question("conjugation", "medium")
            print(f"   {i+1}. {question['question']} ‚Üí {question['correct']}")
        
        print("‚úÖ G√©n√©ration de questions sp√©cifiques r√©ussie!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration questions: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ D√âMARRAGE DES TESTS DU SYST√àME DE ROTATION")
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    success = True
    
    # Test principal
    if not test_question_rotation():
        success = False
    
    # Test de g√©n√©ration
    if not test_question_generation():
        success = False
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ TOUS LES TESTS SONT PASS√âS!")
        print("‚úÖ Le syst√®me de rotation des questions fonctionne correctement")
        print("‚úÖ La banque de questions √©tendue est op√©rationnelle")
        print("‚úÖ Les questions dynamiques sont g√©n√©r√©es correctement")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("‚ö†Ô∏è V√©rifiez les erreurs ci-dessus")
    
    print("=" * 50)











