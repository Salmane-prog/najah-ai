#!/usr/bin/env python3
"""
Script de test pour le Workflow Manager
"""

import sys
import os

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.database import get_db
from services.workflow_manager import WorkflowManager
from services.assessment_engine import AssessmentEngine
from services.learning_path_generator import LearningPathGenerator
from services.progress_tracker import ProgressTracker

def test_workflow_manager():
    """Tester le Workflow Manager"""
    print("üß™ TEST DU WORKFLOW MANAGER")
    print("=" * 80)
    
    try:
        # Obtenir une session de base de donn√©es
        db = next(get_db())
        
        # Cr√©er les instances des services
        print("üîß Initialisation des services...")
        workflow_manager = WorkflowManager(db)
        assessment_engine = AssessmentEngine(db)
        learning_path_generator = LearningPathGenerator(db)
        progress_tracker = ProgressTracker(db)
        
        print("   ‚úÖ Tous les services initialis√©s avec succ√®s")
        
        # Test 1: Initialisation du parcours d'apprentissage
        print("\n1Ô∏è‚É£ TEST D'INITIALISATION DU PARCOURS")
        print("-" * 50)
        
        student_id = 30  # ID de l'√©tudiant de test
        subjects = ["Math√©matiques", "Fran√ßais"]
        
        try:
            print("   üìù Initialisation du parcours d'apprentissage...")
            journey = workflow_manager.initialize_student_learning_journey(student_id, subjects)
            
            print(f"   ‚úÖ Parcours initialis√© avec succ√®s")
            print(f"      - √âvaluation initiale: {journey['initial_assessment']['title']}")
            print(f"      - Parcours de base cr√©√©s: {len(journey['base_learning_paths'])}")
            print(f"      - Prochaines √©tapes: {len(journey['next_steps'])}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors de l'initialisation: {e}")
        
        # Test 2: Test du moteur d'√©valuation
        print("\n2Ô∏è‚É£ TEST DU MOTEUR D'√âVALUATION")
        print("-" * 50)
        
        try:
            print("   üìù Cr√©ation d'une √©valuation de test...")
            test_assessment = assessment_engine.create_initial_assessment(
                student_id=student_id,
                subject="Sciences"
            )
            
            print(f"   ‚úÖ √âvaluation cr√©√©e: {test_assessment.title}")
            print(f"      - ID: {test_assessment.id}")
            print(f"      - Mati√®re: {test_assessment.subject}")
            print(f"      - Statut: {test_assessment.status}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la cr√©ation de l'√©valuation: {e}")
        
        # Test 3: Test du g√©n√©rateur de parcours
        print("\n3Ô∏è‚É£ TEST DU G√âN√âRATEUR DE PARCOURS")
        print("-" * 50)
        
        try:
            print("   üõ§Ô∏è G√©n√©ration de parcours personnalis√©s...")
            
            # Cr√©er des r√©sultats d'√©valuation simul√©s
            mock_assessment_results = {
                "level": "Interm√©diaire",
                "subject_scores": {
                    "Math√©matiques": {"correct": 3, "total": 5},
                    "Fran√ßais": {"correct": 4, "total": 5}
                },
                "recommendations": ["Continuer les exercices", "Pratiquer r√©guli√®rement"]
            }
            
            personalized_paths = learning_path_generator.generate_personalized_paths(
                student_id, mock_assessment_results
            )
            
            print(f"   ‚úÖ {len(personalized_paths)} parcours personnalis√©s g√©n√©r√©s")
            for path in personalized_paths:
                print(f"      - {path.title} ({path.subject})")
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la g√©n√©ration des parcours: {e}")
        
        # Test 4: Test du suivi de progression
        print("\n4Ô∏è‚É£ TEST DU SUIVI DE PROGRESSION")
        print("-" * 50)
        
        try:
            print("   üìä R√©cup√©ration de la progression globale...")
            overall_progress = progress_tracker.get_student_overall_progress(student_id)
            
            print(f"   ‚úÖ Progression r√©cup√©r√©e")
            print(f"      - Niveau global: {overall_progress['overall_level']}")
            print(f"      - Parcours actifs: {overall_progress['learning_paths']['active']}")
            print(f"      - Progression moyenne: {overall_progress['learning_paths']['average_progress']}%")
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la r√©cup√©ration de la progression: {e}")
        
        # Test 5: Test de g√©n√©ration de rapport
        print("\n5Ô∏è‚É£ TEST DE G√âN√âRATION DE RAPPORT")
        print("-" * 50)
        
        try:
            print("   üìã G√©n√©ration du rapport hebdomadaire...")
            weekly_report = workflow_manager.generate_weekly_report(student_id)
            
            print(f"   ‚úÖ Rapport hebdomadaire g√©n√©r√©")
            print(f"      - Type: {weekly_report['report_type']}")
            print(f"      - Recommandations: {len(weekly_report['recommendations'])}")
            print(f"      - Objectifs: {len(weekly_report['goals_for_next_week'])}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la g√©n√©ration du rapport: {e}")
        
        # Test 6: Test d'analyse des mati√®res
        print("\n6Ô∏è‚É£ TEST D'ANALYSE DES MATI√àRES")
        print("-" * 50)
        
        try:
            print("   üéØ Analyse de la progression par mati√®re...")
            
            for subject in ["Math√©matiques", "Fran√ßais", "Sciences"]:
                try:
                    subject_progress = progress_tracker.get_subject_progress(student_id, subject)
                    print(f"   ‚úÖ {subject}: {subject_progress['level']}")
                    print(f"      - Progression: {subject_progress['learning_paths']['average_progress']}%")
                    print(f"      - Recommandations: {len(subject_progress['recommendations'])}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è {subject}: Erreur - {e}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors de l'analyse des mati√®res: {e}")
        
        # Test 7: Test des analytics d'apprentissage
        print("\n7Ô∏è‚É£ TEST DES ANALYTICS D'APPRENTISSAGE")
        print("-" * 50)
        
        try:
            print("   üìà R√©cup√©ration des analytics d'apprentissage...")
            learning_analytics = progress_tracker.get_learning_analytics(student_id, "week")
            
            print(f"   ‚úÖ Analytics r√©cup√©r√©s")
            print(f"      - P√©riode: {learning_analytics['period']}")
            print(f"      - Activit√©s: {learning_analytics['activities']['total_activities']}")
            print(f"      - Tendance: {learning_analytics['trends']['trend']}")
            print(f"      - Recommandations: {len(learning_analytics['recommendations'])}")
            
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la r√©cup√©ration des analytics: {e}")
        
        print("\n" + "=" * 80)
        print("üéØ R√âSUM√â DES TESTS")
        print("‚úÖ Services initialis√©s avec succ√®s")
        print("‚úÖ Workflow Manager fonctionnel")
        print("‚úÖ Tous les composants test√©s")
        
        # Fermer la session de base de donn√©es
        db.close()
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests du Workflow Manager...")
    print("Assurez-vous que votre serveur backend est d√©marr√© et accessible")
    print("Appuyez sur Entr√©e pour continuer...")
    input()
    test_workflow_manager()







