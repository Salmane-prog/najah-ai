#!/usr/bin/env python3
"""
Script simplifi√© pour peupler la base de donn√©es avec des donn√©es essentielles
Cr√©√© pour tester le dashboard √©tudiant sans les relations complexes
"""

import os
import sys
from datetime import datetime, timedelta
import random

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.database import SessionLocal
from models import *

def populate_database_simple():
    """Peuple la base de donn√©es avec des donn√©es essentielles"""
    print("üöÄ D√©marrage du peuplement simplifi√© de la base de donn√©es...")
    
    db = SessionLocal()
    try:
        # 1. CR√âER LES UTILISATEURS
        print("üë• Cr√©ation des utilisateurs...")
        users = create_users_simple(db)
        
        # 2. CR√âER LES CAT√âGORIES
        print("üìö Cr√©ation des cat√©gories...")
        categories = create_categories_simple(db)
        
        # 3. CR√âER LES QUIZZES ET QUESTIONS
        print("‚ùì Cr√©ation des quiz et questions...")
        quizzes, questions = create_quizzes_simple(db, categories, users)
        
        # 4. CR√âER LES R√âSULTATS DE QUIZ
        print("üìä Cr√©ation des r√©sultats de quiz...")
        create_quiz_results_simple(db, users, quizzes, questions)
        
        # 5. CR√âER LES CONTENUS
        print("üìñ Cr√©ation des contenus...")
        create_contents_simple(db, categories)
        
        # 6. CR√âER LES NOTIFICATIONS
        print("üîî Cr√©ation des notifications...")
        create_notifications_simple(db, users)
        
        # 7. CR√âER LES MESSAGES
        print("üí¨ Cr√©ation des messages...")
        create_messages_simple(db, users)
        
        # 8. CR√âER LES ANALYTICS
        print("üìä Cr√©ation des analytics...")
        create_analytics_simple(db, users)
        
        print("\n‚úÖ Base de donn√©es peupl√©e avec succ√®s !")
        print(f"üìä {len(users)} utilisateurs cr√©√©s")
        print(f"üìö {len(quizzes)} quiz cr√©√©s")
        print(f"‚ùì {len(questions)} questions cr√©√©es")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du peuplement: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def create_users_simple(db):
    """Cr√©e des utilisateurs de test simplifi√©s"""
    users = []
    
    # Admin
    admin = User(
        email="admin@najah.ai",
        username="admin",
        first_name="Admin",
        last_name="Najah",
        role=UserRole.admin,
        is_active=True,
        hashed_password="$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.i8i"
    )
    users.append(admin)
    
    # Enseignants
    teachers = [
        User(email="teacher1@najah.ai", username="prof_math", first_name="Marie", last_name="Dupont", role=UserRole.teacher, is_active=True),
        User(email="teacher2@najah.ai", username="prof_fr", first_name="Jean", last_name="Martin", role=UserRole.teacher, is_active=True)
    ]
    users.extend(teachers)
    
    # √âtudiants
    students = [
        User(email="student1@najah.ai", username="etudiant1", first_name="Lucas", last_name="Petit", role=UserRole.student, is_active=True),
        User(email="student2@najah.ai", username="etudiant2", first_name="Emma", last_name="Rousseau", role=UserRole.student, is_active=True),
        User(email="student3@najah.ai", username="etudiant3", first_name="Hugo", last_name="Moreau", role=UserRole.student, is_active=True)
    ]
    users.extend(students)
    
    # Ajouter tous les utilisateurs
    for user in users:
        if not db.query(User).filter(User.email == user.email).first():
            db.add(user)
    
    db.flush()  # G√©n√©rer les IDs
    db.commit()
    
    # R√©cup√©rer les utilisateurs avec leurs IDs
    created_users = []
    for user in users:
        created_user = db.query(User).filter(User.email == user.email).first()
        if created_user:
            created_users.append(created_user)
    
    print(f"‚úÖ {len(created_users)} utilisateurs cr√©√©s")
    return created_users

def create_categories_simple(db):
    """Cr√©e des cat√©gories de contenu simplifi√©es"""
    categories = [
        Category(name="Math√©matiques", description="Alg√®bre, g√©om√©trie, calcul"),
        Category(name="Fran√ßais", description="Grammaire, litt√©rature, expression"),
        Category(name="Histoire", description="Histoire de France, g√©ographie"),
        Category(name="Sciences", description="Physique, chimie, biologie")
    ]
    
    for category in categories:
        if not db.query(Category).filter(Category.name == category.name).first():
            db.add(category)
    
    db.commit()
    print(f"‚úÖ {len(categories)} cat√©gories cr√©√©es")
    return categories

def create_quizzes_simple(db, categories, users):
    """Cr√©e des quiz et questions simplifi√©s"""
    quizzes = []
    questions = []
    
    # Quiz de math√©matiques
    math_quiz = Quiz(
        title="Quiz Math√©matiques - Niveau 1",
        description="Testez vos connaissances en math√©matiques",
        subject="Math√©matiques",
        level="6√®me",
        difficulty="medium",
        time_limit=30,
        max_score=100,
        is_active=True,
        created_by=users[0].id  # Admin
    )
    db.add(math_quiz)
    db.flush()
    quizzes.append(math_quiz)
    
    # Questions pour le quiz de math
    math_questions = [
        Question(
            quiz_id=math_quiz.id,
            question_text="Quel est le r√©sultat de 15 + 27 ?",
            question_type="multiple_choice",
            points=10,
            correct_answer="42"
        ),
        Question(
            quiz_id=math_quiz.id,
            question_text="Quelle est la racine carr√©e de 64 ?",
            question_type="multiple_choice",
            points=10,
            correct_answer="8"
        ),
        Question(
            quiz_id=math_quiz.id,
            question_text="Combien font 7 x 8 ?",
            question_type="multiple_choice",
            points=10,
            correct_answer="56"
        )
    ]
    
    for q in math_questions:
        db.add(q)
        questions.append(q)
    
    # Quiz de fran√ßais
    fr_quiz = Quiz(
        title="Quiz Fran√ßais - Grammaire",
        description="Testez votre grammaire fran√ßaise",
        subject="Fran√ßais",
        level="6√®me",
        difficulty="medium",
        time_limit=25,
        max_score=100,
        is_active=True,
        created_by=users[0].id  # Admin
    )
    db.add(fr_quiz)
    db.flush()
    quizzes.append(fr_quiz)
    
    # Questions pour le quiz de fran√ßais
    fr_questions = [
        Question(
            quiz_id=fr_quiz.id,
            question_text="Quel est le pluriel de 'cheval' ?",
            question_type="multiple_choice",
            points=10,
            correct_answer="chevaux"
        ),
        Question(
            quiz_id=fr_quiz.id,
            question_text="Conjuguez '√™tre' √† la 3√®me personne du singulier au pr√©sent",
            question_type="multiple_choice",
            points=10,
            correct_answer="est"
        )
    ]
    
    for q in fr_questions:
        db.add(q)
        questions.append(q)
    
    db.commit()
    print(f"‚úÖ {len(quizzes)} quiz cr√©√©s avec {len(questions)} questions")
    return quizzes, questions

def create_quiz_results_simple(db, users, quizzes, questions):
    """Cr√©e des r√©sultats de quiz simplifi√©s pour les √©tudiants"""
    students = [u for u in users if u.role == UserRole.student]
    
    for student in students:
        for quiz in quizzes:
            # Cr√©er un r√©sultat de quiz
            score = random.randint(60, 100)
            completed = random.choice([True, False])
            
            quiz_result = QuizResult(
                user_id=student.id,
                student_id=student.id,
                quiz_id=quiz.id,
                score=score,
                max_score=100,
                percentage=score,
                is_completed=completed,
                completed_at=datetime.now() - timedelta(days=random.randint(0, 29)) if completed else None
            )
            db.add(quiz_result)
            db.flush()
            
            # Cr√©er des r√©ponses aux questions
            for question in questions:
                if question.quiz_id == quiz.id:
                    is_correct = random.choice([True, False])
                    answer = question.correct_answer if is_correct else "R√©ponse incorrecte"
                    
                    quiz_answer = QuizAnswer(
                        result_id=quiz_result.id,
                        question_id=question.id,
                        answer_text=answer,
                        is_correct=is_correct,
                        points_earned=question.points if is_correct else 0
                    )
                    db.add(quiz_answer)
    
    db.commit()
    print("‚úÖ R√©sultats de quiz cr√©√©s")

def create_contents_simple(db, categories):
    """Cr√©e des contenus d'apprentissage simplifi√©s"""
    for category in categories:
        for i in range(2):  # 2 contenus par cat√©gorie
            content = Content(
                title=f"Contenu {category.name} - Partie {i+1}",
                description=f"Description du contenu {category.name} partie {i+1}",
                content_type="text",
                subject=category.name,
                level="beginner",
                difficulty=random.uniform(1.0, 5.0),
                estimated_time=random.randint(15, 45),
                content_data=f"Contenu d√©taill√© pour {category.name} partie {i+1}",
                category_id=category.id,
                created_by=1,  # Admin
                is_active=True
            )
            db.add(content)
    
    db.commit()
    print("‚úÖ Contenus cr√©√©s")

def create_notifications_simple(db, users):
    """Cr√©e des notifications simplifi√©es"""
    for user in users:
        for i in range(random.randint(2, 4)):
            notification = Notification(
                user_id=user.id,
                title=f"Notification {i+1}",
                message=f"Message de notification {i+1} pour {user.username}",
                notification_type=random.choice(["info", "success", "warning"]),
                is_read=random.choice([True, False]),
                created_at=datetime.now() - timedelta(days=random.randint(0, 7))
            )
            db.add(notification)
    
    db.commit()
    print("‚úÖ Notifications cr√©√©es")

def create_messages_simple(db, users):
    """Cr√©e des messages simplifi√©s"""
    students = [u for u in users if u.role == UserRole.student]
    teachers = [u for u in users if u.role == UserRole.teacher]
    
    # Cr√©er des threads simples
    for i in range(3):
        thread = Thread(
            title=f"Discussion {i+1}",
            created_by=random.choice(students + teachers).id,
            category_id=random.randint(1, 4),
            type="g√©n√©ral"
        )
        db.add(thread)
        db.flush()
        
        # Cr√©er des messages dans le thread
        for j in range(random.randint(2, 5)):
            message = Message(
                thread_id=thread.id,
                user_id=random.choice(students + teachers).id,
                content=f"Message {j+1} dans le thread {thread.title}"
            )
            db.add(message)
    
    db.commit()
    print("‚úÖ Messages cr√©√©s")

def create_analytics_simple(db, users):
    """Cr√©e des analytics simplifi√©s"""
    students = [u for u in users if u.role == UserRole.student]
    
    for student in students:
        analytics = StudentAnalytics(
            student_id=student.id,
            class_id=1,  # Classe par d√©faut
            total_quizzes=random.randint(5, 20),
            avg_score=random.uniform(60.0, 95.0),
            total_time=random.randint(100, 500),
            activities_count=random.randint(10, 30)
        )
        db.add(analytics)
        
        # Activit√©s utilisateur
        for i in range(random.randint(3, 8)):
            activity = UserActivity(
                user_id=student.id,
                activity_type=random.choice(["login", "quiz", "content", "message"]),
                description=f"Activit√© {i+1}",
                timestamp=datetime.now() - timedelta(hours=random.randint(1, 48))
            )
            db.add(activity)
    
    db.commit()
    print("‚úÖ Analytics cr√©√©s")

if __name__ == "__main__":
    print("üöÄ D√©marrage du peuplement simplifi√© de la base de donn√©es...")
    populate_database_simple()
    print("\nüéâ Base de donn√©es simplifi√©e peupl√©e !")
    print("üìä Vous pouvez maintenant tester votre dashboard √©tudiant !")
