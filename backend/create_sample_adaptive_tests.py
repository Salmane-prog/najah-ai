#!/usr/bin/env python3
"""
Script pour cr√©er des tests adaptatifs de d√©monstration
"""

import sqlite3
import os
from datetime import datetime, timedelta
import json

def create_sample_adaptive_tests():
    """Cr√©er des tests adaptatifs de d√©monstration"""
    
    # Chemin vers la base de donn√©es
    db_path = os.path.join(os.path.dirname(__file__), "..", "data", "app.db")
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return False
    
    print(f"üîç Connexion √† la base de donn√©es: {db_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # V√©rifier si les tables existent
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='adaptive_tests'")
        if not cursor.fetchone():
            print("‚ùå Table adaptive_tests n'existe pas. Cr√©ez d'abord les tables.")
            return False
        
        # V√©rifier s'il y a d√©j√† des tests
        cursor.execute("SELECT COUNT(*) FROM adaptive_tests")
        existing_count = cursor.fetchone()[0]
        
        if existing_count > 0:
            print(f"‚úÖ {existing_count} tests adaptatifs existent d√©j√†")
            return True
        
        print("üöÄ Cr√©ation des tests adaptatifs de d√©monstration...")
        
        # R√©cup√©rer un utilisateur enseignant
        cursor.execute("SELECT id FROM users WHERE role = 'teacher' LIMIT 1")
        teacher_result = cursor.fetchone()
        
        if not teacher_result:
            print("‚ùå Aucun enseignant trouv√© dans la base de donn√©es")
            return False
        
        teacher_id = teacher_result[0]
        print(f"üë®‚Äçüè´ Enseignant trouv√©: ID {teacher_id}")
        
        # Tests de d√©monstration
    sample_tests = [
        {
            "title": "Test de Grammaire Fran√ßaise Niveau Interm√©diaire",
            "subject": "Fran√ßais",
                "description": "Test adaptatif pour √©valuer les comp√©tences en grammaire fran√ßaise, incluant la conjugaison, les accords et la syntaxe.",
                "difficulty_range_min": 3,
                "difficulty_range_max": 7,
            "estimated_duration": 25,
            "is_active": True
        },
        {
            "title": "√âvaluation Math√©matiques - Alg√®bre",
            "subject": "Math√©matiques",
                "description": "Test adaptatif sur les √©quations du premier degr√©, les in√©quations et les syst√®mes d'√©quations.",
                "difficulty_range_min": 4,
                "difficulty_range_max": 8,
            "estimated_duration": 30,
            "is_active": True
        },
        {
            "title": "Histoire - R√©volution Fran√ßaise",
            "subject": "Histoire",
                "description": "Test adaptatif sur la p√©riode r√©volutionnaire fran√ßaise, les √©v√©nements cl√©s et les personnages importants.",
                "difficulty_range_min": 2,
                "difficulty_range_max": 6,
            "estimated_duration": 20,
                "is_active": True
            },
            {
                "title": "Sciences - Cycle de l'Eau et √âcosyst√®mes",
                "subject": "Sciences",
                "description": "Test adaptatif sur le cycle de l'eau, les √©cosyst√®mes et l'impact humain sur l'environnement.",
                "difficulty_range_min": 3,
                "difficulty_range_max": 7,
                "estimated_duration": 25,
                "is_active": True
            },
            {
                "title": "G√©ographie - Cartographie et Climat",
                "subject": "G√©ographie",
                "description": "Test adaptatif sur la lecture de cartes, les climats du monde et la g√©ographie physique.",
                "difficulty_range_min": 2,
                "difficulty_range_max": 6,
                "estimated_duration": 20,
                "is_active": True
            }
        ]
        
        # Ins√©rer les tests
        for test_data in sample_tests:
            cursor.execute("""
                INSERT INTO adaptive_tests (
                    title, subject, description, difficulty_range_min, difficulty_range_max,
                    estimated_duration, is_active, created_by, created_at, updated_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                test_data["title"],
                test_data["subject"],
                test_data["description"],
                test_data["difficulty_range_min"],
                test_data["difficulty_range_max"],
                test_data["estimated_duration"],
                test_data["is_active"],
                teacher_id,
                datetime.now().isoformat(),
                datetime.now().isoformat()
            ))
            
            test_id = cursor.lastrowid
            print(f"‚úÖ Test cr√©√©: {test_data['title']} (ID: {test_id})")
            
            # Cr√©er quelques questions d'exemple pour chaque test
            create_sample_questions(cursor, test_id, test_data["subject"])
        
        # Cr√©er les tables de support si elles n'existent pas
        create_support_tables(cursor)
        
        # Cr√©er des assignations de d√©monstration
        create_sample_assignments(cursor, teacher_id)
        
        conn.commit()
        print(f"üéâ {len(sample_tests)} tests adaptatifs cr√©√©s avec succ√®s !")
        
        return True
                
        except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tests: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def create_sample_questions(cursor, test_id, subject):
    """Cr√©er des questions d'exemple pour un test"""
    
    questions_data = {
        "Fran√ßais": [
            {
                "question_text": "Quel est le temps du verbe dans la phrase 'Je mange une pomme' ?",
                "question_type": "multiple_choice",
                "options": json.dumps(["Pr√©sent", "Imparfait", "Futur", "Pass√© compos√©"]),
                "correct_answer": "Pr√©sent",
                "explanation": "Le verbe 'mange' est au pr√©sent de l'indicatif.",
                "difficulty_level": 3,
                "topic": "Conjugaison"
            },
            {
                "question_text": "Compl√©tez : 'Les enfants ___ dans le jardin.'",
                "question_type": "fill_blank",
                "options": json.dumps([]),
                "correct_answer": "jouent",
                "explanation": "Avec le sujet 'Les enfants' (pluriel), le verbe 'jouer' prend la terminaison '-ent'.",
                "difficulty_level": 4,
                "topic": "Accords"
            }
        ],
        "Math√©matiques": [
            {
                "question_text": "R√©solvez l'√©quation : 2x + 5 = 13",
                "question_type": "fill_blank",
                "options": json.dumps([]),
                "correct_answer": "4",
                "explanation": "2x + 5 = 13 ‚Üí 2x = 8 ‚Üí x = 4",
                "difficulty_level": 4,
                "topic": "√âquations"
            },
            {
                "question_text": "Quelle est la solution de l'in√©quation 3x - 2 > 7 ?",
                "question_type": "multiple_choice",
                "options": json.dumps(["x > 3", "x < 3", "x ‚â• 3", "x ‚â§ 3"]),
                "correct_answer": "x > 3",
                "explanation": "3x - 2 > 7 ‚Üí 3x > 9 ‚Üí x > 3",
                "difficulty_level": 5,
                "topic": "In√©quations"
            }
        ],
        "Histoire": [
            {
                "question_text": "En quelle ann√©e a eu lieu la prise de la Bastille ?",
                "question_type": "multiple_choice",
                "options": json.dumps(["1789", "1790", "1791", "1792"]),
                "correct_answer": "1789",
                "explanation": "La prise de la Bastille a eu lieu le 14 juillet 1789.",
                "difficulty_level": 3,
                "topic": "R√©volution Fran√ßaise"
            },
            {
                "question_text": "Qui √©tait Maximilien de Robespierre ?",
                "question_type": "multiple_choice",
                "options": json.dumps(["Un roi", "Un r√©volutionnaire", "Un g√©n√©ral", "Un √©crivain"]),
                "correct_answer": "Un r√©volutionnaire",
                "explanation": "Robespierre √©tait un avocat et r√©volutionnaire fran√ßais, figure de la Terreur.",
                "difficulty_level": 4,
                "topic": "Personnages"
            }
        ],
        "Sciences": [
            {
                "question_text": "Quel est le nom du processus par lequel l'eau passe de l'√©tat liquide √† l'√©tat gazeux ?",
                "question_type": "multiple_choice",
                "options": json.dumps(["Condensation", "√âvaporation", "Solidification", "Fusion"]),
                "correct_answer": "√âvaporation",
                "explanation": "L'√©vaporation est le passage de l'√©tat liquide √† l'√©tat gazeux.",
                "difficulty_level": 3,
                "topic": "Cycle de l'Eau"
            },
            {
                "question_text": "Qu'est-ce qu'un √©cosyst√®me ?",
                "question_type": "multiple_choice",
                "options": json.dumps(["Un animal", "Un ensemble d'√™tres vivants et leur environnement", "Une plante", "Un min√©ral"]),
                "correct_answer": "Un ensemble d'√™tres vivants et leur environnement",
                "explanation": "Un √©cosyst√®me est un ensemble form√© par une communaut√© d'√™tres vivants et son environnement.",
                "difficulty_level": 4,
                "topic": "√âcosyst√®mes"
            }
        ],
        "G√©ographie": [
            {
                "question_text": "Quel type de carte montre les reliefs et l'altitude ?",
                "question_type": "multiple_choice",
                "options": json.dumps(["Carte politique", "Carte topographique", "Carte climatique", "Carte √©conomique"]),
                "correct_answer": "Carte topographique",
                "explanation": "Une carte topographique montre les reliefs, l'altitude et les formes du terrain.",
                "difficulty_level": 3,
                "topic": "Cartographie"
            },
            {
                "question_text": "Quel est le climat dominant en France m√©tropolitaine ?",
                "question_type": "multiple_choice",
                "options": json.dumps(["Climat tropical", "Climat oc√©anique", "Climat d√©sertique", "Climat polaire"]),
                "correct_answer": "Climat oc√©anique",
                "explanation": "La France m√©tropolitaine a principalement un climat oc√©anique temp√©r√©.",
                "difficulty_level": 4,
                "topic": "Climat"
            }
        ]
    }
    
    questions = questions_data.get(subject, questions_data["Fran√ßais"])
    
    for question_data in questions:
        cursor.execute("""
            INSERT INTO adaptive_questions (
                test_id, question_text, question_type, options, correct_answer,
                explanation, difficulty_level, subject, topic, created_at
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            test_id,
            question_data["question_text"],
            question_data["question_type"],
            question_data["options"],
            question_data["correct_answer"],
            question_data["explanation"],
            question_data["difficulty_level"],
            subject,
            question_data["topic"],
            datetime.now().isoformat()
        ))
    
    print(f"  üìù {len(questions)} questions cr√©√©es pour le test {subject}")

def create_support_tables(cursor):
    """Cr√©er les tables de support si elles n'existent pas"""
    
    # Table test_assignments
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS test_assignments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            test_id INTEGER NOT NULL,
            assignment_type TEXT NOT NULL CHECK (assignment_type IN ('class', 'individual')),
            target_id INTEGER NOT NULL,
            assigned_by INTEGER NOT NULL,
            assigned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            due_date TIMESTAMP,
            is_active INTEGER DEFAULT 1,
            FOREIGN KEY (test_id) REFERENCES adaptive_tests (id) ON DELETE CASCADE,
            FOREIGN KEY (assigned_by) REFERENCES users (id) ON DELETE CASCADE
        )
    """)
    
    # Table adaptive_test_responses
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS adaptive_test_responses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            test_id INTEGER NOT NULL,
            student_id INTEGER NOT NULL,
            status TEXT DEFAULT 'in_progress' CHECK (status IN ('not_started', 'in_progress', 'completed')),
            final_score REAL,
            questions_answered INTEGER DEFAULT 0,
            correct_answers INTEGER DEFAULT 0,
            start_time TIMESTAMP,
            completion_time TIMESTAMP,
            difficulty_adjustments INTEGER DEFAULT 0,
            FOREIGN KEY (test_id) REFERENCES adaptive_tests (id) ON DELETE CASCADE,
            FOREIGN KEY (student_id) REFERENCES users (id) ON DELETE CASCADE
        )
    """)
    
    # Table adaptive_test_performance
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS adaptive_test_performance (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            test_id INTEGER NOT NULL,
            status TEXT DEFAULT 'not_started',
            final_score REAL,
            questions_answered INTEGER DEFAULT 0,
            correct_answers INTEGER DEFAULT 0,
            average_response_time REAL,
            difficulty_adjustments INTEGER DEFAULT 0,
            start_time TIMESTAMP,
            completion_time TIMESTAMP,
            FOREIGN KEY (student_id) REFERENCES users (id) ON DELETE CASCADE,
            FOREIGN KEY (test_id) REFERENCES adaptive_tests (id) ON DELETE CASCADE
        )
    """)
    
    print("  ‚úÖ Tables de support cr√©√©es")

def create_sample_assignments(cursor, teacher_id):
    """Cr√©er des assignations de d√©monstration"""
    
    # R√©cup√©rer les classes de l'enseignant
    cursor.execute("""
        SELECT id FROM class_groups WHERE teacher_id = ?
    """, (teacher_id,))
    
    classes = cursor.fetchall()
    
    if not classes:
        print("  ‚ö†Ô∏è Aucune classe trouv√©e pour cr√©er des assignations")
        return
    
    # R√©cup√©rer les tests cr√©√©s
    cursor.execute("SELECT id FROM adaptive_tests WHERE created_by = ?", (teacher_id,))
    tests = cursor.fetchall()
    
    if not tests:
        print("  ‚ö†Ô∏è Aucun test trouv√© pour cr√©er des assignations")
        return
    
    # Cr√©er quelques assignations de d√©monstration
    for i, test in enumerate(tests[:3]):  # Assigner les 3 premiers tests
        test_id = test[0]
        class_id = classes[i % len(classes)][0]  # Distribuer entre les classes
        
        cursor.execute("""
            INSERT INTO test_assignments (
                test_id, assignment_type, target_id, assigned_by, assigned_at, is_active
            ) VALUES (?, 'class', ?, ?, ?, 1)
        """, (test_id, class_id, teacher_id, datetime.now().isoformat()))
        
        print(f"  üìã Test {test_id} assign√© √† la classe {class_id}")
    
    print("  ‚úÖ Assignations de d√©monstration cr√©√©es")

if __name__ == "__main__":
    print("üöÄ Script de cr√©ation des tests adaptatifs de d√©monstration")
    print("=" * 60)
    
    success = create_sample_adaptive_tests()
    
    if success:
        print("\nüéâ Tests adaptatifs cr√©√©s avec succ√®s !")
        print("Vous pouvez maintenant acc√©der √† la page d'√©valuation adaptative.")
    else:
        print("\n‚ùå √âchec de la cr√©ation des tests adaptatifs")
        print("V√©rifiez que les tables existent et que vous avez un utilisateur enseignant.")
