#!/usr/bin/env python3
"""
Script pour cr√©er des donn√©es r√©elles pour tester l'interface enseignant avanc√©e
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Forcer la configuration de la base de donn√©es
os.environ["SQLALCHEMY_DATABASE_URL"] = "sqlite:///F:/IMT/stage/Yancode/Najah__AI/data/app.db"

from core.database import get_db
from models.user import User
from models.class_group import ClassGroup, ClassStudent
from models.learning_path import LearningPath, StudentLearningPath
from models.quiz import Quiz, QuizResult
from models.advanced_learning import (
    LearningPathStep, StudentProgress, ClassAnalytics, 
    StudentAnalytics, RealTimeActivity
)
from core.security import get_password_hash
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import json

def create_real_data():
    """Cr√©er des donn√©es r√©elles pour l'interface avanc√©e"""
    print("üöÄ CR√âATION DE DONN√âES R√âELLES POUR L'INTERFACE AVANC√âE")
    print("=" * 60)
    
    db = next(get_db())
    
    try:
        # 1. Cr√©er des classes avanc√©es
        print("üìö Cr√©ation des classes avanc√©es...")
        
        # Classe Math√©matiques Avanc√©es
        math_class = ClassGroup(
            name="Math√©matiques Avanc√©es",
            description="Cours de math√©matiques pour niveau interm√©diaire",
            teacher_id=1,  # marie.dubois@najah.ai
            level="intermediate",
            subject="Math√©matiques",
            max_students=25,
            is_active=True
        )
        db.add(math_class)
        
        # Classe Fran√ßais Litt√©raire
        french_class = ClassGroup(
            name="Fran√ßais Litt√©raire",
            description="√âtude de la litt√©rature fran√ßaise",
            teacher_id=1,
            level="advanced",
            subject="Fran√ßais",
            max_students=20,
            is_active=True
        )
        db.add(french_class)
        
        # Classe Sciences Exp√©rimentales
        science_class = ClassGroup(
            name="Sciences Exp√©rimentales",
            description="Physique et chimie pratiques",
            teacher_id=1,
            level="intermediate",
            subject="Sciences",
            max_students=30,
            is_active=True
        )
        db.add(science_class)
        
        db.commit()
        print("‚úÖ Classes cr√©√©es avec succ√®s")
        
        # 2. Assigner des √©tudiants aux classes
        print("üë• Assignation des √©tudiants aux classes...")
        
        # R√©cup√©rer les √©tudiants existants
        students = db.query(User).filter(User.role == 'student').limit(6).all()
        
        # Assigner aux classes
        class_assignments = [
            (students[0].id, math_class.id),
            (students[1].id, math_class.id),
            (students[2].id, french_class.id),
            (students[3].id, french_class.id),
            (students[4].id, science_class.id),
            (students[5].id, science_class.id),
        ]
        
        for student_id, class_id in class_assignments:
            assignment = ClassStudent(
                class_id=class_id,
                student_id=student_id
            )
            db.add(assignment)
        
        db.commit()
        print("‚úÖ √âtudiants assign√©s aux classes")
        
        # 3. Cr√©er des parcours d'apprentissage avanc√©s
        print("üìñ Cr√©ation des parcours d'apprentissage...")
        
        # Parcours Math√©matiques
        math_path = LearningPath(
            title="Parcours Math√©matiques Interm√©diaire",
            description="Apprentissage progressif des math√©matiques",
            objectives="Ma√Ætriser les concepts de base et interm√©diaires",
            subject="Math√©matiques",
            level="intermediate",
            difficulty="intermediate",
            estimated_duration=45,
            is_adaptive=True,
            created_by=1
        )
        db.add(math_path)
        
        # Parcours Fran√ßais
        french_path = LearningPath(
            title="Litt√©rature Fran√ßaise Moderne",
            description="√âtude des ≈ìuvres litt√©raires modernes",
            objectives="Comprendre et analyser les textes litt√©raires",
            subject="Fran√ßais",
            level="advanced",
            difficulty="advanced",
            estimated_duration=30,
            is_adaptive=False,
            created_by=1
        )
        db.add(french_path)
        
        db.commit()
        print("‚úÖ Parcours d'apprentissage cr√©√©s")
        
        # 4. Cr√©er des √©tapes pour les parcours
        print("üìù Cr√©ation des √©tapes de parcours...")
        
        # √âtapes pour le parcours math√©matiques
        math_steps = [
            {
                "title": "Introduction aux √©quations",
                "description": "Comprendre les bases des √©quations",
                "step_type": "content",
                "order": 1,
                "estimated_duration": 20,
                "is_required": True,
                "prerequisites": []
            },
            {
                "title": "Quiz √âquations Basiques",
                "description": "Test sur les √©quations simples",
                "step_type": "quiz",
                "order": 2,
                "estimated_duration": 15,
                "is_required": True,
                "prerequisites": [1]
            },
            {
                "title": "√âquations du Second Degr√©",
                "description": "Apprendre √† r√©soudre les √©quations quadratiques",
                "step_type": "content",
                "order": 3,
                "estimated_duration": 25,
                "is_required": True,
                "prerequisites": [1, 2]
            }
        ]
        
        for step_data in math_steps:
            step = LearningPathStep(
                learning_path_id=math_path.id,
                title=step_data["title"],
                description=step_data["description"],
                step_type=step_data["step_type"],
                order=step_data["order"],
                estimated_duration=step_data["estimated_duration"],
                is_required=step_data["is_required"],
                prerequisites=json.dumps(step_data["prerequisites"])
            )
            db.add(step)
        
        db.commit()
        print("‚úÖ √âtapes de parcours cr√©√©es")
        
        # 5. Cr√©er des quiz et r√©sultats
        print("üìä Cr√©ation des quiz et r√©sultats...")
        
        # Quiz Math√©matiques
        math_quiz = Quiz(
            title="Quiz √âquations Basiques",
            description="Test sur les √©quations du premier degr√©",
            subject="Math√©matiques",
            level="intermediate",
            difficulty="medium",
            time_limit=20,
            max_score=100,
            created_by=1
        )
        db.add(math_quiz)
        
        # Quiz Fran√ßais
        french_quiz = Quiz(
            title="Analyse Litt√©raire",
            description="Test sur l'analyse de textes",
            subject="Fran√ßais",
            level="advanced",
            difficulty="advanced",
            time_limit=30,
            max_score=100,
            created_by=1
        )
        db.add(french_quiz)
        
        db.commit()
        
        # Cr√©er des r√©sultats de quiz
        quiz_results = [
            {"student_id": students[0].id, "quiz_id": math_quiz.id, "score": 85, "max_score": 100},
            {"student_id": students[1].id, "quiz_id": math_quiz.id, "score": 72, "max_score": 100},
            {"student_id": students[2].id, "quiz_id": french_quiz.id, "score": 90, "max_score": 100},
            {"student_id": students[3].id, "quiz_id": french_quiz.id, "score": 78, "max_score": 100},
        ]
        
        for result_data in quiz_results:
            result = QuizResult(
                quiz_id=result_data["quiz_id"],
                student_id=result_data["student_id"],
                score=result_data["score"],
                max_score=result_data["max_score"],
                time_taken=15,
                completed=True,
                sujet="G√©n√©ral"
            )
            db.add(result)
        
        db.commit()
        print("‚úÖ Quiz et r√©sultats cr√©√©s")
        
        # 6. Cr√©er des donn√©es de progression
        print("üìà Cr√©ation des donn√©es de progression...")
        
        progress_data = [
            {"student_id": students[0].id, "learning_path_id": math_path.id, "progress_percentage": 75.0},
            {"student_id": students[1].id, "learning_path_id": math_path.id, "progress_percentage": 60.0},
            {"student_id": students[2].id, "learning_path_id": french_path.id, "progress_percentage": 85.0},
            {"student_id": students[3].id, "learning_path_id": french_path.id, "progress_percentage": 45.0},
        ]
        
        for progress_data_item in progress_data:
            progress = StudentProgress(
                student_id=progress_data_item["student_id"],
                learning_path_id=progress_data_item["learning_path_id"],
                progress_percentage=progress_data_item["progress_percentage"],
                completed_steps=json.dumps([1, 2]),
                is_active=True,
                last_activity=datetime.utcnow()
            )
            db.add(progress)
        
        db.commit()
        print("‚úÖ Donn√©es de progression cr√©√©es")
        
        # 7. Cr√©er des analytics
        print("üìä Cr√©ation des analytics...")
        
        # Analytics pour la classe math√©matiques
        math_analytics = ClassAnalytics(
            class_id=math_class.id,
            total_students=2,
            active_students=2,
            average_progress=67.5,
            completed_quizzes=2,
            average_score=78.5,
            weak_subjects=json.dumps(["G√©om√©trie"]),
            strong_subjects=json.dumps(["Alg√®bre"])
        )
        db.add(math_analytics)
        
        # Analytics pour la classe fran√ßais
        french_analytics = ClassAnalytics(
            class_id=french_class.id,
            total_students=2,
            active_students=2,
            average_progress=65.0,
            completed_quizzes=2,
            average_score=84.0,
            weak_subjects=json.dumps(["Grammaire"]),
            strong_subjects=json.dumps(["Litt√©rature"])
        )
        db.add(french_analytics)
        
        db.commit()
        print("‚úÖ Analytics cr√©√©s")
        
        # 8. Cr√©er des activit√©s temps r√©el
        print("‚è∞ Cr√©ation des activit√©s temps r√©el...")
        
        activities = [
            {
                "student_id": students[0].id,
                "activity_type": "quiz_start",
                "activity_data": json.dumps({"quiz_id": math_quiz.id}),
                "session_id": "session_001"
            },
            {
                "student_id": students[0].id,
                "activity_type": "quiz_complete",
                "activity_data": json.dumps({"quiz_id": math_quiz.id, "score": 85}),
                "session_id": "session_001"
            },
            {
                "student_id": students[2].id,
                "activity_type": "content_view",
                "activity_data": json.dumps({"content_id": 1}),
                "session_id": "session_002"
            }
        ]
        
        for activity_data in activities:
            activity = RealTimeActivity(
                student_id=activity_data["student_id"],
                activity_type=activity_data["activity_type"],
                activity_data=activity_data["activity_data"],
                session_id=activity_data["session_id"]
            )
            db.add(activity)
        
        db.commit()
        print("‚úÖ Activit√©s temps r√©el cr√©√©es")
        
        print("\nüéâ DONN√âES R√âELLES CR√â√âES AVEC SUCC√àS!")
        print("=" * 60)
        print(f"üìö Classes cr√©√©es: 3")
        print(f"üë• √âtudiants assign√©s: 6")
        print(f"üìñ Parcours cr√©√©s: 2")
        print(f"üìù √âtapes cr√©√©es: 3")
        print(f"üìä Quiz cr√©√©s: 2")
        print(f"üìà Progression: 4 enregistrements")
        print(f"üìä Analytics: 2 classes")
        print(f"‚è∞ Activit√©s temps r√©el: 3")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_real_data() 