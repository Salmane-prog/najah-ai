#!/usr/bin/env python3
"""
Script pour cr√©er des √©valuations et parcours pour l'√©tudiant
"""

import sqlite3
import os
from datetime import datetime

def create_student_assessments():
    """Cr√©er des √©valuations et parcours pour l'√©tudiant"""
    print("üéì CR√âATION DES √âVALUATIONS ET PARCOURS POUR L'√âTUDIANT")
    print("=" * 70)
    
    # Chemin vers la base de donn√©es
    db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'app.db')
    print(f"üìÅ Base de donn√©es: {db_path}")
    
    if not os.path.exists(db_path):
        print("‚ùå Base de donn√©es non trouv√©e!")
        return
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # √âtape 1: V√©rifier l'√©tudiant
        print("\n1Ô∏è‚É£ V√©rification de l'√©tudiant...")
        cursor.execute("SELECT id FROM students WHERE user_id = 30")
        student = cursor.fetchone()
        
        if student:
            student_id = student[0]
            print(f"   ‚úÖ √âtudiant trouv√©: ID {student_id}")
        else:
            print("   ‚ùå √âtudiant non trouv√©!")
            return
        
        # √âtape 2: Cr√©er une √©valuation initiale
        print("\n2Ô∏è‚É£ Cr√©ation de l'√©valuation initiale...")
        
        # Ins√©rer l'√©valuation
        cursor.execute("""
            INSERT INTO assessments 
            (title, description, subject, level, difficulty, total_questions, time_limit, is_adaptive, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            "√âvaluation Initiale - Test de Positionnement",
            "√âvaluation pour d√©terminer votre niveau et vos besoins d'apprentissage",
            "G√©n√©ral",
            "beginner",
            "easy",
            20,
            45,
            True,
            datetime.utcnow().isoformat()
        ))
        
        assessment_id = cursor.lastrowid
        print(f"   ‚úÖ √âvaluation cr√©√©e: ID {assessment_id}")
        
        # √âtape 3: Cr√©er des questions pour l'√©valuation
        print("\n3Ô∏è‚É£ Cr√©ation des questions d'√©valuation...")
        
        questions_data = [
            ("Quel est votre niveau en math√©matiques ?", "Math√©matiques", "beginner"),
            ("Connaissez-vous les bases de la grammaire fran√ßaise ?", "Fran√ßais", "beginner"),
            ("Avez-vous des connaissances en sciences ?", "Sciences", "beginner"),
            ("Quel est votre objectif principal d'apprentissage ?", "G√©n√©ral", "beginner"),
            ("Combien de temps pouvez-vous consacrer √† l'apprentissage par jour ?", "G√©n√©ral", "beginner")
        ]
        
        for i, (question, subject, level) in enumerate(questions_data, 1):
            cursor.execute("""
                INSERT INTO assessment_questions 
                (assessment_id, question_text, question_type, subject, level, order_index, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                assessment_id,
                question,
                "multiple_choice",
                subject,
                level,
                i,
                datetime.utcnow().isoformat()
            ))
        
        print(f"   ‚úÖ {len(questions_data)} questions cr√©√©es")
        
        # √âtape 4: Cr√©er un r√©sultat d'√©valuation pour l'√©tudiant
        print("\n4Ô∏è‚É£ Cr√©ation du r√©sultat d'√©valuation...")
        
        cursor.execute("""
            INSERT INTO assessment_results 
            (student_id, assessment_id, score, max_score, percentage, completed, started_at, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            student_id,
            assessment_id,
            0,  # Score initial
            100,  # Score maximum
            0.0,  # Pourcentage initial
            False,  # Non compl√©t√©
            datetime.utcnow().isoformat(),
            datetime.utcnow().isoformat()
        ))
        
        print(f"   ‚úÖ R√©sultat d'√©valuation cr√©√©")
        
        # √âtape 5: Assigner des parcours recommand√©s
        print("\n5Ô∏è‚É£ Assignation des parcours recommand√©s...")
        
        # S√©lectionner 3 parcours de base
        cursor.execute("""
            SELECT id, title FROM learning_paths 
            WHERE level = 'beginner' AND difficulty = 'easy'
            LIMIT 3
        """)
        recommended_paths = cursor.fetchall()
        
        assigned_count = 0
        for path in recommended_paths:
            path_id, title = path
            
            # V√©rifier si d√©j√† assign√©
            cursor.execute("""
                SELECT id FROM student_learning_paths 
                WHERE student_id = ? AND learning_path_id = ?
            """, (student_id, path_id))
            
            if not cursor.fetchone():
                # Assigner le parcours
                cursor.execute("""
                    INSERT INTO student_learning_paths 
                    (student_id, learning_path_id, started_at, current_step, progress, is_completed, created_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    student_id,
                    path_id,
                    datetime.utcnow().isoformat(),
                    1,  # Commencer √† la premi√®re √©tape
                    0.0,  # Progression initiale
                    False,  # Non compl√©t√©
                    datetime.utcnow().isoformat()
                ))
                assigned_count += 1
                print(f"      ‚úÖ Parcours '{title}' assign√©")
        
        # Valider les changements
        conn.commit()
        print(f"\n‚úÖ Configuration termin√©e avec succ√®s!")
        print(f"   üìù √âvaluation initiale cr√©√©e")
        print(f"   üõ§Ô∏è {assigned_count} parcours recommand√©s assign√©s")
        
        # √âtape 6: V√©rification finale
        print("\n6Ô∏è‚É£ V√©rification finale...")
        
        # V√©rifier les √©valuations
        cursor.execute("""
            SELECT COUNT(*) FROM assessment_results 
            WHERE student_id = ?
        """, (student_id,))
        assessment_count = cursor.fetchone()[0]
        print(f"   üìù √âvaluations: {assessment_count}")
        
        # V√©rifier les parcours assign√©s
        cursor.execute("""
            SELECT COUNT(*) FROM student_learning_paths 
            WHERE student_id = ?
        """, (student_id,))
        paths_count = cursor.fetchone()[0]
        print(f"   üõ§Ô∏è Parcours assign√©s: {paths_count}")
        
        conn.close()
        
        print(f"\nüéâ L'√©tudiant est maintenant pr√™t pour l'√©valuation initiale!")
        print(f"   Rechargez le dashboard pour voir les changements")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")

if __name__ == "__main__":
    create_student_assessments()







