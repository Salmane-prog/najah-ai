#!/usr/bin/env python3
"""
Script pour cr√©er SEULEMENT les tables manquantes et un utilisateur de test
"""

import sqlite3
import os
from datetime import datetime

def create_missing_tables():
    """Cr√©er seulement les tables manquantes"""
    
    # Chemin vers la base de donn√©es
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'app.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return
    
    print(f"üîç Cr√©ation des tables manquantes dans: {db_path}")
    print("=" * 60)
    
    # Connexion √† la base de donn√©es
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # 1. Cr√©er la table assessment_results (si elle n'existe pas)
        print("1. Cr√©ation de la table assessment_results...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS assessment_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                assessment_id INTEGER NOT NULL,
                student_id INTEGER NOT NULL,
                score REAL NOT NULL,
                max_score REAL NOT NULL,
                percentage REAL NOT NULL,
                completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                strengths TEXT,
                weaknesses TEXT,
                recommendations TEXT,
                FOREIGN KEY (assessment_id) REFERENCES assessments (id),
                FOREIGN KEY (student_id) REFERENCES users (id)
            )
        ''')
        print("‚úÖ Table assessment_results cr√©√©e/v√©rifi√©e")
        
        # 2. Cr√©er la table learning_paths (si elle n'existe pas)
        print("2. Cr√©ation de la table learning_paths...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS learning_paths (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                subject TEXT NOT NULL,
                difficulty TEXT DEFAULT 'medium',
                estimated_duration INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        print("‚úÖ Table learning_paths cr√©√©e/v√©rifi√©e")
        
        # 3. Cr√©er la table learning_path_steps (si elle n'existe pas)
        print("3. Cr√©ation de la table learning_path_steps...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS learning_path_steps (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                learning_path_id INTEGER NOT NULL,
                step_number INTEGER NOT NULL,
                title TEXT NOT NULL,
                description TEXT,
                content_type TEXT,
                estimated_duration INTEGER,
                is_required BOOLEAN DEFAULT 1,
                is_active BOOLEAN DEFAULT 1,
                is_completed BOOLEAN DEFAULT 0,
                FOREIGN KEY (learning_path_id) REFERENCES learning_paths (id)
            )
        ''')
        print("‚úÖ Table learning_path_steps cr√©√©e/v√©rifi√©e")
        
        # 4. Cr√©er la table student_learning_paths (si elle n'existe pas)
        print("4. Cr√©ation de la table student_learning_paths...")
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS student_learning_paths (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                learning_path_id INTEGER NOT NULL,
                progress REAL DEFAULT 0.0,
                current_step INTEGER DEFAULT 1,
                total_steps INTEGER DEFAULT 1,
                started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_completed BOOLEAN DEFAULT 0,
                FOREIGN KEY (student_id) REFERENCES users (id),
                FOREIGN KEY (learning_path_id) REFERENCES learning_paths (id)
            )
        ''')
        print("‚úÖ Table student_learning_paths cr√©√©e/v√©rifi√©e")
        
        # Valider les changements
        conn.commit()
        print("\nüéâ Tables manquantes cr√©√©es avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
        conn.rollback()
    
    finally:
        conn.close()

def create_test_user():
    """Cr√©er un utilisateur de test avec ID 30"""
    
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'app.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return
    
    print(f"\nüë§ Cr√©ation de l'utilisateur de test...")
    print("=" * 40)
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # V√©rifier si l'utilisateur 30 existe d√©j√†
        cursor.execute("SELECT id FROM users WHERE id = 30")
        existing_user = cursor.fetchone()
        
        if existing_user:
            print("‚úÖ Utilisateur 30 existe d√©j√†")
            return
        
        # Cr√©er l'utilisateur 30
        cursor.execute('''
            INSERT INTO users (id, username, email, hashed_password, role, is_active, first_name, last_name, created_at)
            VALUES (30, 'student30', 'student30@test.com', 'test123', 'student', 1, '√âtudiant', 'Test', ?)
        ''', (datetime.now(),))
        
        print("‚úÖ Utilisateur 30 cr√©√© avec succ√®s")
        
        # Valider les changements
        conn.commit()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'utilisateur: {e}")
        conn.rollback()
    
    finally:
        conn.close()

def create_test_data():
    """Cr√©er des donn√©es de test pour l'utilisateur 30"""
    
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'app.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return
    
    print(f"\nüß™ Cr√©ation des donn√©es de test...")
    print("=" * 40)
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # 1. Cr√©er des √©valuations de test pour l'utilisateur 30
        print("1. Cr√©ation d'√©valuations de test...")
        
        # V√©rifier si des √©valuations existent d√©j√† pour l'utilisateur 30
        cursor.execute("SELECT COUNT(*) FROM assessments WHERE student_id = 30")
        existing_assessments = cursor.fetchone()[0]
        
        if existing_assessments == 0:
            cursor.execute('''
                INSERT INTO assessments (title, description, subject, difficulty, estimated_time, status, student_id, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', ('√âvaluation Math√©matiques', 'Test de connaissances en alg√®bre', 'Math√©matiques', 'medium', 30, 'pending', 30, datetime.now()))
            
            cursor.execute('''
                INSERT INTO assessments (title, description, subject, difficulty, estimated_time, status, student_id, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', ('√âvaluation Physique', 'Test de m√©canique', 'Physique', 'easy', 25, 'completed', 30, datetime.now()))
            
            print("‚úÖ 2 √©valuations cr√©√©es")
        else:
            print(f"‚úÖ {existing_assessments} √©valuations existent d√©j√†")
        
        # 2. Cr√©er des parcours d'apprentissage
        print("2. Cr√©ation de parcours d'apprentissage...")
        
        # V√©rifier si des parcours existent d√©j√†
        cursor.execute("SELECT COUNT(*) FROM learning_paths")
        existing_paths = cursor.fetchone()[0]
        
        if existing_paths == 0:
            cursor.execute('''
                INSERT INTO learning_paths (title, subject, difficulty, estimated_duration, created_at)
                VALUES (?, ?, ?, ?, ?)
            ''', ('Parcours Math√©matiques', 'Math√©matiques', 'medium', 120, datetime.now()))
            
            cursor.execute('''
                INSERT INTO learning_paths (title, subject, difficulty, estimated_duration, created_at)
                VALUES (?, ?, ?, ?, ?)
            ''', ('Parcours Physique', 'Physique', 'easy', 90, datetime.now()))
            
            print("‚úÖ 2 parcours cr√©√©s")
        else:
            print(f"‚úÖ {existing_paths} parcours existent d√©j√†")
        
        # 3. Cr√©er des relations √©tudiant-parcours
        print("3. Cr√©ation des relations √©tudiant-parcours...")
        
        # R√©cup√©rer les IDs des parcours
        cursor.execute("SELECT id FROM learning_paths LIMIT 2")
        paths = cursor.fetchall()
        
        if len(paths) >= 2:
            path1_id = paths[0][0]
            path2_id = paths[1][0]
            
            # V√©rifier si des relations existent d√©j√†
            cursor.execute("SELECT COUNT(*) FROM student_learning_paths WHERE student_id = 30")
            existing_relations = cursor.fetchone()[0]
            
            if existing_relations == 0:
                cursor.execute('''
                    INSERT INTO student_learning_paths (student_id, learning_path_id, progress, current_step, total_steps, started_at, is_completed)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (30, path1_id, 25.0, 2, 8, '2024-01-15', 0))
                
                cursor.execute('''
                    INSERT INTO student_learning_paths (student_id, learning_path_id, progress, current_step, total_steps, started_at, is_completed)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (30, path2_id, 100.0, 5, 5, '2024-01-10', 1))
                
                print("‚úÖ 2 relations √©tudiant-parcours cr√©√©es")
            else:
                print(f"‚úÖ {existing_relations} relations existent d√©j√†")
        
        # Valider les changements
        conn.commit()
        print("\nüéâ Donn√©es de test cr√©√©es avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es: {e}")
        conn.rollback()
    
    finally:
        conn.close()

def verify_test_data():
    """V√©rifier que les donn√©es de test ont √©t√© cr√©√©es"""
    
    db_path = os.path.join(os.path.dirname(__file__), 'data', 'app.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return
    
    print(f"\nüîç V√©rification des donn√©es de test...")
    print("=" * 50)
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # V√©rifier l'utilisateur 30
        cursor.execute("SELECT id, username, role FROM users WHERE id = 30")
        user = cursor.fetchone()
        if user:
            print(f"‚úÖ Utilisateur 30: {user}")
        else:
            print("‚ùå Utilisateur 30 non trouv√©")
            return
        
        # V√©rifier les √©valuations
        cursor.execute("SELECT COUNT(*) FROM assessments WHERE student_id = 30")
        assessment_count = cursor.fetchone()[0]
        print(f"üìä √âvaluations pour l'utilisateur 30: {assessment_count}")
        
        # V√©rifier les parcours
        cursor.execute("SELECT COUNT(*) FROM student_learning_paths WHERE student_id = 30")
        path_count = cursor.fetchone()[0]
        print(f"üìä Parcours pour l'utilisateur 30: {path_count}")
        
        print(f"\nüéØ R√âSUM√â:")
        print(f"   - Utilisateur 30: {'‚úÖ Cr√©√©' if user else '‚ùå Manquant'}")
        print(f"   - √âvaluations: {assessment_count}")
        print(f"   - Parcours: {path_count}")
        
        if user and assessment_count > 0 and path_count > 0:
            print(f"\nüéâ VOS WIDGETS DEVRAIENT MAINTENANT AFFICHER DES DONN√âES!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
    
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ CR√âATION DES TABLES MANQUANTES ET DONN√âES DE TEST")
    print("=" * 70)
    
    create_missing_tables()
    create_test_user()
    create_test_data()
    verify_test_data()
    
    print("\nüéâ SCRIPT TERMIN√â AVEC SUCC√àS!")
    print("üîÑ Maintenant, rafra√Æchissez votre dashboard et testez les widgets!") 