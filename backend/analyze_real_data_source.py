#!/usr/bin/env python3
"""
Script pour analyser d'o√π viennent r√©ellement les donn√©es affich√©es dans les widgets
et comprendre pourquoi nous avons des "NaN%"
"""

import sqlite3
import os

def analyze_real_data_source():
    """Analyser la vraie source des donn√©es affich√©es"""
    
    db_path = "najah_ai.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es {db_path} non trouv√©e")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîç ANALYSE DE LA VRAIE SOURCE DES DONN√âES")
        print("=" * 60)
        
        # 1. V√©rifier toutes les tables
        print("\n1. üìä TOUTES LES TABLES DISPONIBLES")
        print("-" * 40)
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        for i, (table_name,) in enumerate(tables, 1):
            print(f"   {i:2d}. {table_name}")
        
        # 2. Analyser les tables qui pourraient contenir des donn√©es d'√©tudiants
        print("\n2. üéØ ANALYSE DES TABLES POTENTIELLES")
        print("-" * 40)
        
        # V√©rifier test_attempts (pour les tentatives de tests)
        print("\n   üìù TABLE test_attempts:")
        try:
            cursor.execute("SELECT COUNT(*) FROM test_attempts WHERE student_id = 30")
            count = cursor.fetchone()[0]
            print(f"      Tentatives pour l'√©tudiant 30: {count}")
            
            if count > 0:
                cursor.execute("""
                    SELECT test_id, started_at, completed_at, score
                    FROM test_attempts 
                    WHERE student_id = 30 
                    LIMIT 3
                """)
                attempts = cursor.fetchall()
                for attempt in attempts:
                    print(f"      Test {attempt[0]}, Score: {attempt[3]}, Started: {attempt[1]}")
        except Exception as e:
            print(f"      ‚ùå Erreur: {e}")
        
        # V√©rifier adaptive_sessions (pour les sessions adaptatives)
        print("\n   üß† TABLE adaptive_sessions:")
        try:
            cursor.execute("SELECT COUNT(*) FROM adaptive_sessions WHERE student_id = 30")
            count = cursor.fetchone()[0]
            print(f"      Sessions pour l'√©tudiant 30: {count}")
            
            if count > 0:
                cursor.execute("""
                    SELECT session_start, session_end, initial_difficulty, final_difficulty
                    FROM adaptive_sessions 
                    WHERE student_id = 30 
                    LIMIT 3
                """)
                sessions = cursor.fetchall()
                for session in sessions:
                    print(f"      Session: {session[0]} √† {session[1]}, Difficult√©: {session[2]}‚Üí{session[3]}")
        except Exception as e:
            print(f"      ‚ùå Erreur: {e}")
        
        # V√©rifier cognitive_profiles (pour les profils cognitifs)
        print("\n   üß© TABLE cognitive_profiles:")
        try:
            cursor.execute("SELECT COUNT(*) FROM cognitive_profiles WHERE student_id = 30")
            count = cursor.fetchone()[0]
            print(f"      Profils pour l'√©tudiant 30: {count}")
            
            if count > 0:
                cursor.execute("""
                    SELECT learning_style, strengths, weaknesses
                    FROM cognitive_profiles 
                    WHERE student_id = 30
                """)
                profiles = cursor.fetchall()
                for profile in profiles:
                    print(f"      Style: {profile[0]}, Forces: {profile[1]}")
        except Exception as e:
            print(f"      ‚ùå Erreur: {e}")
        
        # 3. V√©rifier les endpoints qui fonctionnent r√©ellement
        print("\n3. üåê ENDPOINTS QUI FONCTIONNENT R√âELLEMENT")
        print("-" * 40)
        
        print("   üìç Endpoints utilis√©s par les widgets:")
        print("      - /api/v1/french-optimized/student/{id}/profile")
        print("      - /api/v1/student_learning_paths/student/{id}")
        
        print("\n   üîç Tables correspondantes:")
        print("      - french-optimized ‚Üí Pas de table directe")
        print("      - student_learning_paths ‚Üí Table vide")
        
        # 4. Analyser pourquoi les widgets affichent des donn√©es
        print("\n4. ü§î POURQUOI LES WIDGETS AFFICHENT DES DONN√âES ?")
        print("-" * 40)
        
        print("   üé≠ HYPOTH√àSES:")
        print("      1. Les donn√©es viennent d'endpoints diff√©rents")
        print("      2. Les donn√©es sont simul√©es dans le frontend")
        print("      3. Les donn√©es viennent de tables non identifi√©es")
        print("      4. Les donn√©es sont mises en cache quelque part")
        
        # 5. V√©rifier s'il y a des donn√©es cach√©es
        print("\n5. üîç RECHERCHE DE DONN√âES CACH√âES")
        print("-" * 40)
        
        # V√©rifier toutes les tables pour des donn√©es d'√©tudiant 30
        for table_name, in tables:
            try:
                cursor.execute(f"PRAGMA table_info({table_name})")
                columns = cursor.fetchall()
                
                # Chercher des colonnes qui pourraient contenir student_id
                student_columns = [col for col in columns if 'student' in col[1].lower() or 'user' in col[1].lower()]
                
                if student_columns:
                    print(f"   üìã {table_name}:")
                    for col in student_columns:
                        print(f"      Colonne: {col[1]} ({col[2]})")
                        
                        # V√©rifier s'il y a des donn√©es pour l'√©tudiant 30
                        try:
                            cursor.execute(f"SELECT COUNT(*) FROM {table_name} WHERE {col[1]} = 30")
                            count = cursor.fetchone()[0]
                            print(f"      Donn√©es pour √©tudiant 30: {count}")
                            
                            if count > 0:
                                cursor.execute(f"SELECT * FROM {table_name} WHERE {col[1]} = 30 LIMIT 1")
                                sample = cursor.fetchone()
                                print(f"      Exemple: {sample}")
                        except Exception as e:
                            print(f"      ‚ùå Erreur lors de la v√©rification: {e}")
                    
                    print()
                    
            except Exception as e:
                continue
        
        conn.close()
        
        print("\n   üéØ Analyse termin√©e!")
        print("   üí° Les widgets affichent probablement des donn√©es simul√©es ou d'endpoints diff√©rents")
        
    except Exception as e:
        print(f"üí• Erreur lors de l'analyse: {e}")

if __name__ == "__main__":
    analyze_real_data_source()
