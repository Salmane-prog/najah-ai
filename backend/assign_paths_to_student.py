#!/usr/bin/env python3
"""
Script pour assigner les parcours d'apprentissage √† l'√©tudiant
"""

import sqlite3
import os
from datetime import datetime, timedelta

def assign_paths_to_student():
    """Assigner les parcours √† l'√©tudiant"""
    print("üéØ ASSIGNATION DES PARCOURS √Ä L'√âTUDIANT")
    print("=" * 60)
    
    # Chemin vers la base de donn√©es
    db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'app.db')
    print(f"üìÅ Base de donn√©es: {db_path}")
    
    if not os.path.exists(db_path):
        print("‚ùå Base de donn√©es non trouv√©e!")
        return
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # √âtape 1: V√©rifier l'√©tudiant
        print("\n1Ô∏è‚É£ V√©rification de l'√©tudiant...")
        cursor.execute("SELECT id, user_id FROM students WHERE user_id = 30")
        student = cursor.fetchone()
        
        if student:
            student_id, user_id = student
            print(f"   ‚úÖ √âtudiant trouv√©: ID {student_id}, User ID {user_id}")
        else:
            print("   ‚ùå √âtudiant non trouv√©!")
            return
        
        # √âtape 2: V√©rifier les parcours disponibles
        print("\n2Ô∏è‚É£ V√©rification des parcours disponibles...")
        cursor.execute("SELECT id, title, subject FROM learning_paths")
        paths = cursor.fetchall()
        
        if paths:
            print(f"   ‚úÖ {len(paths)} parcours disponibles:")
            for path in paths:
                print(f"      - ID: {path[0]}, Titre: {path[1]}, Mati√®re: {path[2]}")
        else:
            print("   ‚ùå Aucun parcours disponible!")
            return
        
        # √âtape 3: Assigner les parcours √† l'√©tudiant
        print("\n3Ô∏è‚É£ Assignation des parcours √† l'√©tudiant...")
        
        # Supprimer les anciennes assignations
        cursor.execute("DELETE FROM student_learning_paths WHERE student_id = ?", (student_id,))
        print(f"   üóëÔ∏è Anciennes assignations supprim√©es")
        
        # Assigner tous les parcours
        assigned_count = 0
        for path in paths:
            path_id = path[0]
            
            # Ins√©rer l'assignation
            cursor.execute("""
                INSERT INTO student_learning_paths 
                (student_id, learning_path_id, started_at, current_step, progress, is_completed, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                student_id,
                path_id,
                datetime.utcnow().isoformat(),
                1,  # Commencer √† la premi√®re √©tape
                0.0,  # Progression initiale
                False,  # Non compl√©t√©
                datetime.utcnow().isoformat()
            ))
            assigned_count += 1
            print(f"      ‚úÖ Parcours {path[1]} assign√©")
        
        # √âtape 4: Cr√©er des √©valuations pour l'√©tudiant
        print("\n4Ô∏è‚É£ Cr√©ation d'√©valuations pour l'√©tudiant...")
        
        # V√©rifier les √©valuations existantes
        cursor.execute("SELECT id, title FROM assessments")
        assessments = cursor.fetchall()
        
        if assessments:
            print(f"   ‚úÖ {len(assessments)} √©valuations disponibles:")
            for assessment in assessments:
                print(f"      - ID: {assessment[0]}, Titre: {assessment[1]}")
            
            # Cr√©er des r√©sultats d'√©valuation pour l'√©tudiant
            for assessment in assessments:
                assessment_id = assessment[0]
                
                # V√©rifier si l'√©tudiant a d√©j√† un r√©sultat
                cursor.execute("""
                    SELECT id FROM assessment_results 
                    WHERE student_id = ? AND assessment_id = ?
                """, (student_id, assessment_id))
                
                if not cursor.fetchone():
                    # Cr√©er un r√©sultat d'√©valuation
                    cursor.execute("""
                        INSERT INTO assessment_results 
                        (student_id, assessment_id, score, max_score, percentage, completed, started_at, completed_at, created_at)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        student_id,
                        assessment_id,
                        0,  # Score initial
                        100,  # Score maximum
                        0.0,  # Pourcentage initial
                        False,  # Non compl√©t√©
                        datetime.utcnow().isoformat(),
                        None,  # Pas encore compl√©t√©
                        datetime.utcnow().isoformat()
                    ))
                    print(f"      ‚úÖ R√©sultat cr√©√© pour {assessment[1]}")
        else:
            print("   ‚ö†Ô∏è Aucune √©valuation disponible")
        
        # Valider les changements
        conn.commit()
        print(f"\n‚úÖ {assigned_count} parcours assign√©s avec succ√®s!")
        
        # √âtape 5: V√©rification finale
        print("\n5Ô∏è‚É£ V√©rification finale...")
        
        # V√©rifier les parcours assign√©s
        cursor.execute("""
            SELECT COUNT(*) FROM student_learning_paths 
            WHERE student_id = ?
        """, (student_id,))
        assigned_paths = cursor.fetchone()[0]
        print(f"   üõ§Ô∏è Parcours assign√©s: {assigned_paths}")
        
        # V√©rifier les √©valuations
        cursor.execute("""
            SELECT COUNT(*) FROM assessment_results 
            WHERE student_id = ?
        """, (student_id,))
        assessment_results = cursor.fetchone()[0]
        print(f"   üìù R√©sultats d'√©valuation: {assessment_results}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'assignation: {e}")

if __name__ == "__main__":
    assign_paths_to_student()







