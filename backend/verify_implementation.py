#!/usr/bin/env python3
"""
Script de v√©rification finale pour confirmer que toutes les fonctionnalit√©s avanc√©es sont op√©rationnelles
"""

import sqlite3
import requests
from pathlib import Path
from datetime import datetime

def verify_database_structure():
    """V√©rifier la structure de la base de donn√©es"""
    print("üóÑÔ∏è V√©rification de la structure de la base de donn√©es...")
    
    db_path = Path(__file__).parent.parent / "data" / "app.db"
    
    if not db_path.exists():
        print("‚ùå Base de donn√©es non trouv√©e")
        return False
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # Tables requises pour les fonctionnalit√©s avanc√©es
        required_tables = [
            'calendar_events',
            'event_reminders', 
            'calendar_study_sessions',
            'study_groups',
            'study_group_members',
            'group_messages',
            'group_resources',
            'ai_recommendations',
            'ai_tutoring_sessions',
            'ai_tutoring_interactions',
            'difficulty_detection',
            'homework_assignments',
            'homework_submissions',
            'collaboration_projects',
            'project_members',
            'project_tasks',
            'detailed_reports'
        ]
        
        missing_tables = []
        existing_tables = []
        
        for table in required_tables:
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
            if cursor.fetchone():
                existing_tables.append(table)
            else:
                missing_tables.append(table)
        
        print(f"‚úÖ {len(existing_tables)}/{len(required_tables)} tables requises trouv√©es")
        
        if missing_tables:
            print(f"‚ùå Tables manquantes: {', '.join(missing_tables)}")
            return False
        
        # V√©rifier la structure des tables importantes
        print("\nüîç V√©rification de la structure des tables...")
        
        table_checks = [
            ('calendar_events', ['title', 'event_type', 'start_time', 'created_by']),
            ('study_groups', ['name', 'subject', 'created_by']),
            ('ai_recommendations', ['user_id', 'recommendation_type', 'title']),
            ('homework_assignments', ['title', 'subject', 'assigned_by', 'due_date'])
        ]
        
        for table, required_columns in table_checks:
            try:
                cursor.execute(f"PRAGMA table_info({table})")
                columns = [col[1] for col in cursor.fetchall()]
                
                missing_cols = [col for col in required_columns if col not in columns]
                if missing_cols:
                    print(f"   ‚ö†Ô∏è  {table}: Colonnes manquantes: {missing_cols}")
                else:
                    print(f"   ‚úÖ {table}: Structure correcte")
            except Exception as e:
                print(f"   ‚ùå {table}: Erreur de v√©rification - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la structure: {e}")
        return False
    finally:
        conn.close()

def verify_test_data():
    """V√©rifier que les donn√©es de test sont pr√©sentes"""
    print("\nüìä V√©rification des donn√©es de test...")
    
    db_path = Path(__file__).parent.parent / "data" / "app.db"
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # V√©rifier les donn√©es dans les tables principales
        data_checks = [
            ('calendar_events', '√©v√©nements de calendrier'),
            ('calendar_study_sessions', 'sessions d\'√©tude'),
            ('study_groups', 'groupes d\'√©tude'),
            ('ai_recommendations', 'recommandations IA'),
            ('homework_assignments', 'devoirs'),
            ('detailed_reports', 'rapports d√©taill√©s')
        ]
        
        total_records = 0
        
        for table, description in data_checks:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                total_records += count
                
                if count > 0:
                    print(f"   ‚úÖ {description}: {count} enregistrements")
                else:
                    print(f"   ‚ö†Ô∏è  {description}: Aucun enregistrement")
            except Exception as e:
                print(f"   ‚ùå {description}: Erreur de v√©rification - {e}")
        
        print(f"\nüìà Total: {total_records} enregistrements de test")
        
        return total_records > 0
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des donn√©es: {e}")
        return False
    finally:
        conn.close()

def verify_server_connectivity():
    """V√©rifier la connectivit√© du serveur"""
    print("\nüåê V√©rification de la connectivit√© du serveur...")
    
    try:
        # Test de l'endpoint de sant√©
        response = requests.get("http://localhost:8000/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Serveur backend accessible")
            return True
        else:
            print(f"‚ö†Ô∏è Serveur backend: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå Serveur backend inaccessible")
        return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def verify_api_endpoints():
    """V√©rifier que les endpoints API r√©pondent"""
    print("\nüîå V√©rification des endpoints API...")
    
    # Endpoints √† tester (sans authentification - doivent retourner 401)
    endpoints = [
        ("/api/v1/calendar/events", "Calendrier - √âv√©nements"),
        ("/api/v1/collaboration/study-groups", "Collaboration - Groupes d'√©tude"),
        ("/api/v1/ai_advanced/recommendations", "IA Avanc√©e - Recommandations"),
        ("/api/v1/homework/assignments", "Devoirs - Assignations"),
        ("/api/v1/ai_advanced/analytics/performance", "IA Avanc√©e - Analytics")
    ]
    
    working_endpoints = 0
    
    for endpoint, description in endpoints:
        try:
            response = requests.get(f"http://localhost:8000{endpoint}", timeout=5)
            
            if response.status_code == 401:
                print(f"   ‚úÖ {description}: Prot√©g√© (401 - Non authentifi√©)")
                working_endpoints += 1
            elif response.status_code == 403:
                print(f"   ‚úÖ {description}: Prot√©g√© (403 - Acc√®s refus√©)")
                working_endpoints += 1
            else:
                print(f"   ‚ö†Ô∏è  {description}: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå {description}: Erreur - {e}")
    
    print(f"\nüéØ {working_endpoints}/{len(endpoints)} endpoints fonctionnels")
    return working_endpoints == len(endpoints)

def verify_cors_configuration():
    """V√©rifier la configuration CORS"""
    print("\nüåç V√©rification de la configuration CORS...")
    
    try:
        headers = {
            'Origin': 'http://localhost:3000',
            'Access-Control-Request-Method': 'GET',
            'Access-Control-Request-Headers': 'Content-Type'
        }
        
        response = requests.options("http://localhost:8000/api/v1/calendar/events", headers=headers, timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ Configuration CORS fonctionnelle")
            return True
        else:
            print(f"‚ö†Ô∏è Configuration CORS: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur CORS: {e}")
        return False

def generate_verification_report():
    """G√©n√©rer un rapport de v√©rification complet"""
    print("üöÄ V√âRIFICATION COMPL√àTE DES FONCTIONNALIT√âS AVANC√âES")
    print("=" * 70)
    
    checks = [
        ("Structure de la base de donn√©es", verify_database_structure),
        ("Donn√©es de test", verify_test_data),
        ("Connectivit√© du serveur", verify_server_connectivity),
        ("Endpoints API", verify_api_endpoints),
        ("Configuration CORS", verify_cors_configuration)
    ]
    
    results = []
    
    for check_name, check_func in checks:
        try:
            success = check_func()
            results.append((check_name, success))
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification {check_name}: {e}")
            results.append((check_name, False))
    
    # R√©sum√© final
    print("\n" + "=" * 70)
    print("üìã RAPPORT DE V√âRIFICATION FINAL")
    print("=" * 70)
    
    passed = 0
    total = len(results)
    
    for check_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {check_name}")
        if success:
            passed += 1
    
    print(f"\nüéØ R√©sultats: {passed}/{total} v√©rifications r√©ussies")
    
    if passed == total:
        print("\nüéâ TOUTES LES FONCTIONNALIT√âS SONT OP√âRATIONNELLES!")
        print("\n‚úÖ Impl√©mentation r√©ussie:")
        print("   - Gestion des Devoirs")
        print("   - Calendrier Avanc√©") 
        print("   - Collaboration")
        print("   - IA Avanc√©e")
        print("   - Rapports D√©taill√©s")
        
        print("\nüí° Prochaines √©tapes:")
        print("   1. Tester l'interface utilisateur")
        print("   2. V√©rifier l'authentification")
        print("   3. Tester les fonctionnalit√©s avec de vrais utilisateurs")
        
    else:
        print(f"\n‚ö†Ô∏è {total - passed} v√©rification(s) ont √©chou√©")
        print("\nüîß Actions recommand√©es:")
        print("   1. V√©rifier les erreurs ci-dessus")
        print("   2. Ex√©cuter les scripts de correction")
        print("   3. Red√©marrer le serveur si n√©cessaire")
    
    return passed == total

if __name__ == "__main__":
    success = generate_verification_report()
    
    if success:
        print("\n‚úÖ V√©rification termin√©e avec succ√®s!")
        print("\nüöÄ La plateforme Najah AI est pr√™te pour la production!")
    else:
        print("\n‚ùå Certaines v√©rifications ont √©chou√©!")
        print("\nüîß Veuillez corriger les probl√®mes avant de continuer.")




