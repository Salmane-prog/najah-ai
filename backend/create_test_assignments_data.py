#!/usr/bin/env python3
"""
Script pour cr√©er des donn√©es de test pour les assignations
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine, text
from datetime import datetime, timedelta

def create_test_assignments_data():
    """Cr√©er des donn√©es de test pour les assignations"""
    
    # Cr√©er une connexion directe √† la base de donn√©es
    engine = create_engine("sqlite:///../data/app.db")
    
    try:
        with engine.connect() as conn:
            # 1. V√©rifier s'il y a des utilisateurs
            result = conn.execute(text("SELECT id, username, role FROM users WHERE role IN ('student', 'teacher') LIMIT 10"))
            users = result.fetchall()
            
            if len(users) < 2:
                print("‚ùå Il faut au moins un √©tudiant et un professeur dans la base de donn√©es")
                return
            
            student = None
            teacher = None
            for user in users:
                if user[2] == 'student' and not student:
                    student = user
                elif user[2] == 'teacher' and not teacher:
                    teacher = user
                
                if student and teacher:
                    break
            
            if not student or not teacher:
                print("‚ùå Il faut au moins un √©tudiant et un professeur dans la base de donn√©es")
                return
            
            print(f"‚úÖ √âtudiant trouv√©: {student[1]} (ID: {student[0]})")
            print(f"‚úÖ Professeur trouv√©: {teacher[1]} (ID: {teacher[0]})")
            
            # 2. Cr√©er une classe de test si elle n'existe pas
            class_result = conn.execute(text("SELECT id FROM class_groups WHERE teacher_id = :teacher_id LIMIT 1"), {
                "teacher_id": teacher[0]
            })
            class_group = class_result.fetchone()
            
            if not class_group:
                print("üìö Cr√©ation d'une classe de test...")
                conn.execute(text("""
                    INSERT INTO class_groups (name, description, level, subject, teacher_id, max_students)
                    VALUES (:name, :description, :level, :subject, :teacher_id, :max_students)
                """), {
                    "name": "Classe de test",
                    "description": "Classe cr√©√©e pour les tests",
                    "level": "Terminale",
                    "subject": "Math√©matiques",
                    "teacher_id": teacher[0],
                    "max_students": 30
                })
                
                # R√©cup√©rer l'ID de la classe cr√©√©e
                class_result = conn.execute(text("SELECT last_insert_rowid()"))
                class_id = class_result.fetchone()[0]
                print(f"‚úÖ Classe cr√©√©e avec l'ID: {class_id}")
            else:
                class_id = class_group[0]
                print(f"‚úÖ Classe existante trouv√©e: {class_id}")
            
            # 3. Ajouter l'√©tudiant √† la classe si pas d√©j√† fait
            student_in_class = conn.execute(text("""
                SELECT id FROM class_students WHERE class_id = :class_id AND student_id = :student_id
            """), {
                "class_id": class_id,
                "student_id": student[0]
            }).fetchone()
            
            if not student_in_class:
                print("üë§ Ajout de l'√©tudiant √† la classe...")
                conn.execute(text("""
                    INSERT INTO class_students (class_id, student_id, enrolled_at, status)
                    VALUES (:class_id, :student_id, :enrolled_at, :status)
                """), {
                    "class_id": class_id,
                    "student_id": student[0],
                    "enrolled_at": datetime.utcnow(),
                    "status": "active"
                })
                print("‚úÖ √âtudiant ajout√© √† la classe")
            else:
                print("‚úÖ √âtudiant d√©j√† dans la classe")
            
            # 4. Cr√©er des devoirs de test
            print("üìù Cr√©ation de devoirs de test...")
            
            # Supprimer les anciens devoirs
            conn.execute(text("DELETE FROM homework"))
            
            test_homeworks = [
                {
                    "title": "Devoir de math√©matiques - √âquations du second degr√©",
                    "description": "R√©soudre les exercices 1 √† 15 du chapitre 3 sur les √©quations du second degr√©",
                    "subject": "Math√©matiques",
                    "priority": "high",
                    "estimated_time": 120,
                    "due_date": datetime.now() + timedelta(days=7)
                },
                {
                    "title": "R√©daction d'histoire - R√©volution fran√ßaise",
                    "description": "√âcrire une dissertation de 3 pages sur les causes de la R√©volution fran√ßaise",
                    "subject": "Histoire",
                    "priority": "medium",
                    "estimated_time": 180,
                    "due_date": datetime.now() + timedelta(days=14)
                },
                {
                    "title": "R√©vision physique - M√©canique",
                    "description": "R√©viser les chapitres 1 √† 4 sur la m√©canique et faire les exercices",
                    "subject": "Physique",
                    "priority": "medium",
                    "estimated_time": 90,
                    "due_date": datetime.now() + timedelta(days=5)
                }
            ]
            
            for homework_data in test_homeworks:
                conn.execute(text("""
                    INSERT INTO homework (
                        title, description, subject, class_id, assigned_by, assigned_to,
                        due_date, status, priority, estimated_time, created_at
                    ) VALUES (
                        :title, :description, :subject, :class_id, :assigned_by, :assigned_to,
                        :due_date, :status, :priority, :estimated_time, :created_at
                    )
                """), {
                    "title": homework_data["title"],
                    "description": homework_data["description"],
                    "subject": homework_data["subject"],
                    "class_id": class_id,
                    "assigned_by": teacher[0],
                    "assigned_to": student[0],
                    "due_date": homework_data["due_date"],
                    "status": "pending",
                    "priority": homework_data["priority"],
                    "estimated_time": homework_data["estimated_time"],
                    "created_at": datetime.utcnow()
                })
            
            # 5. Cr√©er des objectifs d'apprentissage de test
            print("üéØ Cr√©ation d'objectifs de test...")
            
            # Supprimer les anciens objectifs
            conn.execute(text("DELETE FROM learning_goals"))
            
            test_goals = [
                {
                    "title": "Ma√Ætriser les √©quations du second degr√©",
                    "description": "√ätre capable de r√©soudre tous types d'√©quations du second degr√©",
                    "subject": "Math√©matiques",
                    "target_date": datetime.now() + timedelta(days=30),
                    "progress": 0.0
                },
                {
                    "title": "Comprendre la R√©volution fran√ßaise",
                    "description": "Analyser les causes et cons√©quences de la R√©volution fran√ßaise",
                    "subject": "Histoire",
                    "target_date": datetime.now() + timedelta(days=45),
                    "progress": 0.3
                }
            ]
            
            for goal_data in test_goals:
                conn.execute(text("""
                    INSERT INTO learning_goals (
                        user_id, title, description, subject, target_date, progress, status, created_at
                    ) VALUES (
                        :user_id, :title, :description, :subject, :target_date, :progress, :status, :created_at
                    )
                """), {
                    "user_id": student[0],
                    "title": goal_data["title"],
                    "description": goal_data["description"],
                    "subject": goal_data["subject"],
                    "target_date": goal_data["target_date"],
                    "progress": goal_data["progress"],
                    "status": "active",
                    "created_at": datetime.utcnow()
                })
            
            # Commit les changements
            conn.commit()
            print(f"‚úÖ {len(test_homeworks)} devoirs de test cr√©√©s")
            print(f"‚úÖ {len(test_goals)} objectifs de test cr√©√©s")
            print("üìä Donn√©es de test cr√©√©es avec succ√®s !")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des donn√©es de test: {str(e)}")

if __name__ == "__main__":
    create_test_assignments_data() 