#!/usr/bin/env python3
"""
üîß SCRIPT DE R√âPARATION DE LA BASE DE DONN√âES
Corrige les probl√®mes de colonnes et de structure des tables
"""

import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire parent au path
sys.path.append(str(Path(__file__).parent))

from core.database import get_db, engine
from sqlalchemy import text

def fix_database():
    """R√©parer la base de donn√©es"""
    
    print("üîß R√âPARATION DE LA BASE DE DONN√âES")
    print("=" * 50)
    
    try:
        db = next(get_db())
        
        print("\nüìä V√©rification des tables existantes...")
        
        # V√©rifier si la table french_adaptive_tests existe
        result = db.execute(text("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='french_adaptive_tests'
        """))
        
        if result.fetchone():
            print("‚úÖ Table french_adaptive_tests trouv√©e")
            
            # V√©rifier la structure de la table
            result = db.execute(text("PRAGMA table_info(french_adaptive_tests)"))
            columns = [row[1] for row in result.fetchall()]
            print(f"   üìã Colonnes actuelles: {', '.join(columns)}")
            
            # V√©rifier si current_question_order existe
            if 'current_question_order' in columns:
                print("‚ö†Ô∏è  Colonne 'current_question_order' trouv√©e - suppression en cours...")
                
                # Cr√©er une nouvelle table avec la bonne structure
                db.execute(text("""
                    CREATE TABLE french_adaptive_tests_new (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        student_id INTEGER NOT NULL,
                        test_type VARCHAR NOT NULL,
                        current_question_index INTEGER DEFAULT 1,
                        total_questions INTEGER,
                        current_difficulty VARCHAR NOT NULL,
                        status VARCHAR DEFAULT 'in_progress',
                        started_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        completed_at DATETIME,
                        final_score FLOAT,
                        difficulty_progression TEXT,
                        level_progression VARCHAR DEFAULT 'A1',
                        current_level VARCHAR DEFAULT 'A1',
                        questions_sequence TEXT
                    )
                """))
                
                # Copier les donn√©es existantes
                db.execute(text("""
                    INSERT INTO french_adaptive_tests_new 
                    SELECT id, student_id, test_type, 
                           COALESCE(current_question_index, 1) as current_question_index,
                           total_questions, current_difficulty, status, started_at,
                           completed_at, final_score, difficulty_progression,
                           level_progression, current_level, questions_sequence
                    FROM french_adaptive_tests
                """))
                
                # Supprimer l'ancienne table
                db.execute(text("DROP TABLE french_adaptive_tests"))
                
                # Renommer la nouvelle table
                db.execute(text("ALTER TABLE french_adaptive_tests_new RENAME TO french_adaptive_tests"))
                
                db.commit()
                print("‚úÖ Table french_adaptive_tests r√©par√©e")
                
            else:
                print("‚úÖ Structure de la table correcte")
                
        else:
            print("‚ÑπÔ∏è  Table french_adaptive_tests n'existe pas - cr√©ation...")
            create_french_tables(db)
        
        # V√©rifier les autres tables
        print("\nüìä V√©rification des autres tables...")
        
        # Table french_test_answers
        result = db.execute(text("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='french_test_answers'
        """))
        
        if not result.fetchone():
            print("‚ÑπÔ∏è  Table french_test_answers n'existe pas - cr√©ation...")
            create_answer_table(db)
        else:
            print("‚úÖ Table french_test_answers trouv√©e")
        
        # Table french_learning_profiles
        result = db.execute(text("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='french_learning_profiles'
        """))
        
        if not result.fetchone():
            print("‚ÑπÔ∏è  Table french_learning_profiles n'existe pas - cr√©ation...")
            create_profile_table(db)
        else:
            print("‚úÖ Table french_learning_profiles trouv√©e")
        
        # Table assessment_questions
        result = db.execute(text("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='assessment_questions'
        """))
        
        if not result.fetchone():
            print("‚ÑπÔ∏è  Table assessment_questions n'existe pas - cr√©ation...")
            create_assessment_questions_table(db)
        else:
            print("‚úÖ Table assessment_questions trouv√©e")
        
        print("\n" + "=" * 50)
        print("üéâ R√âPARATION TERMIN√âE AVEC SUCC√àS !")
        print("‚úÖ Toutes les tables sont maintenant correctement configur√©es")
        print("‚úÖ Le syst√®me d'√©valuation peut maintenant fonctionner")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DE LA R√âPARATION: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        if 'db' in locals():
            db.close()

def create_french_tables(db):
    """Cr√©er les tables fran√ßaises avec la bonne structure"""
    
    # Table des tests fran√ßais
    db.execute(text("""
        CREATE TABLE french_adaptive_tests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            test_type VARCHAR NOT NULL,
            current_question_index INTEGER DEFAULT 1,
            total_questions INTEGER,
            current_difficulty VARCHAR NOT NULL,
            status VARCHAR DEFAULT 'in_progress',
            started_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            completed_at DATETIME,
            final_score FLOAT,
            difficulty_progression TEXT,
            level_progression VARCHAR DEFAULT 'A1',
            current_level VARCHAR DEFAULT 'A1',
            questions_sequence TEXT
        )
    """))
    
    print("‚úÖ Table french_adaptive_tests cr√©√©e")

def create_answer_table(db):
    """Cr√©er la table des r√©ponses"""
    
    db.execute(text("""
        CREATE TABLE french_test_answers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            test_id INTEGER NOT NULL,
            student_id INTEGER NOT NULL,
            question_id INTEGER NOT NULL,
            answer TEXT NOT NULL,
            is_correct BOOLEAN NOT NULL,
            score INTEGER NOT NULL,
            answered_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """))
    
    print("‚úÖ Table french_test_answers cr√©√©e")

def create_profile_table(db):
    """Cr√©er la table des profils"""
    
    db.execute(text("""
        CREATE TABLE french_learning_profiles (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL UNIQUE,
            french_level VARCHAR,
            learning_style VARCHAR,
            preferred_pace VARCHAR,
            strengths TEXT,
            weaknesses TEXT,
            cognitive_profile TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """))
    
    print("‚úÖ Table french_learning_profiles cr√©√©e")

def create_assessment_questions_table(db):
    """Cr√©er la table des questions d'√©valuation"""
    
    db.execute(text("""
        CREATE TABLE assessment_questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            test_id INTEGER NOT NULL,
            question_id INTEGER NOT NULL,
            question_order INTEGER NOT NULL,
            difficulty VARCHAR NOT NULL,
            question_text TEXT NOT NULL,
            options TEXT NOT NULL,
            correct_answer TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    """))
    
    print("‚úÖ Table assessment_questions cr√©√©e")

if __name__ == "__main__":
    print("üîß SCRIPT DE R√âPARATION DE LA BASE DE DONN√âES")
    print("=" * 50)
    
    success = fix_database()
    
    if success:
        print("\nüöÄ PROCHAINES √âTAPES:")
        print("   1. ‚úÖ Base de donn√©es r√©par√©e")
        print("   2. üß™ Tester le syst√®me: python quick_test.py")
        print("   3. üöÄ D√©marrer le serveur: python start_assessment_system.py")
        print("   4. üì± Tester le frontend: http://localhost:3001/dashboard/student/assessment")
    else:
        print("\n‚ùå LA R√âPARATION A √âCHOU√â")
        print("   V√©rifiez les erreurs ci-dessus et relancez le script")
    
    print("\n" + "=" * 50)





