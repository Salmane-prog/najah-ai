#!/usr/bin/env python3
"""
Script pour cr√©er des donn√©es de test compl√®tes avec une progression r√©elle
pour l'utilisateur 30
"""

import sqlite3
import os
from datetime import datetime, timedelta

def create_complete_test_data():
    """Cr√©er des donn√©es de test compl√®tes avec progression r√©elle"""
    
    db_path = "najah_ai.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es {db_path} non trouv√©e")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üöÄ CR√âATION DE DONN√âES DE TEST COMPL√àTES")
        print("=" * 60)
        
        # 1. V√©rifier que l'utilisateur 30 existe
        print("\n1. üë§ V√âRIFICATION DE L'UTILISATEUR 30")
        print("-" * 40)
        
        cursor.execute("SELECT id FROM users WHERE id = 30")
        user_exists = cursor.fetchone()
        
        if not user_exists:
            print("   ‚ùå Utilisateur 30 non trouv√©")
            print("   üîß Cr√©ation de l'utilisateur 30...")
            
            # Cr√©er l'utilisateur 30
            cursor.execute("""
                INSERT INTO users (id, username, email, full_name, role, created_at)
                VALUES (30, 'student30', 'student30@najah.edu', '√âtudiant Test 30', 'student', ?)
            """, (datetime.now().isoformat(),))
            
            print("   ‚úÖ Utilisateur 30 cr√©√©")
        else:
            print("   ‚úÖ Utilisateur 30 existe d√©j√†")
        
        # 2. V√©rifier que des parcours existent
        print("\n2. üó∫Ô∏è V√âRIFICATION DES PARCOURS")
        print("-" * 40)
        
        cursor.execute("SELECT id, title, subject FROM learning_paths LIMIT 10")
        paths = cursor.fetchall()
        
        if not paths:
            print("   ‚ùå Aucun parcours d'apprentissage trouv√©")
            print("   üîß Cr√©ation de parcours de test...")
            
            # Cr√©er des parcours de test
            test_paths = [
                ("Parcours Math√©matiques", "Math√©matiques", "medium", 120),
                ("Parcours Fran√ßais", "Fran√ßais", "medium", 90),
                ("Parcours Histoire", "Histoire", "easy", 75),
                ("Parcours Sciences", "Sciences", "hard", 150),
                ("Parcours G√©ographie", "G√©ographie", "medium", 60),
                ("Parcours Litt√©rature", "Litt√©rature", "medium", 100),
                ("Parcours Philosophie", "Philosophie", "hard", 80),
                ("Parcours Arts", "Arts", "easy", 45),
                ("Parcours Musique", "Musique", "medium", 70),
                ("Parcours Sport", "Sport", "easy", 30),
                ("Parcours Informatique", "Informatique", "hard", 180),
                ("Parcours Langues", "Langues", "medium", 110),
                ("Parcours √âconomie", "√âconomie", "medium", 85),
                ("Parcours Droit", "Droit", "hard", 95),
                ("Parcours M√©decine", "M√©decine", "hard", 200),
                ("Parcours Ing√©nierie", "Ing√©nierie", "hard", 160),
                ("Parcours Architecture", "Architecture", "medium", 130),
                ("Parcours Design", "Design", "medium", 90)
            ]
            
            for title, subject, difficulty, duration in test_paths:
                cursor.execute("""
                    INSERT INTO learning_paths (title, subject, difficulty, estimated_duration, created_at)
                    VALUES (?, ?, ?, ?, ?)
                """, (title, subject, difficulty, duration, datetime.now().isoformat()))
            
            print(f"   ‚úÖ {len(test_paths)} parcours de test cr√©√©s")
            
            # R√©cup√©rer les IDs des parcours cr√©√©s
            cursor.execute("SELECT id FROM learning_paths")
            paths = cursor.fetchall()
        
        print(f"   ‚úÖ {len(paths)} parcours disponibles")
        
        # 3. Cr√©er des donn√©es de progression vari√©es
        print("\n3. üìä CR√âATION DES DONN√âES DE PROGRESSION")
        print("-" * 40)
        
        # Vider la table existante
        cursor.execute("DELETE FROM student_learning_paths WHERE student_id = 30")
        print("   üóëÔ∏è Anciennes donn√©es supprim√©es")
        
        # Cr√©er des donn√©es de progression vari√©es
        test_data = []
        
        for i, (path_id,) in enumerate(paths):
            # Progression vari√©e pour tester diff√©rents sc√©narios
            if i == 0:  # Premier parcours - d√©but
                current_step = 1
                progress = 6.67  # 1/15 * 100
                is_completed = False
            elif i == 1:  # Deuxi√®me parcours - milieu
                current_step = 8
                progress = 53.33  # 8/15 * 100
                is_completed = False
            elif i == 2:  # Troisi√®me parcours - presque fini
                current_step = 14
                progress = 93.33  # 14/15 * 100
                is_completed = False
            elif i == 3:  # Quatri√®me parcours - termin√©
                current_step = 15
                progress = 100.0
                is_completed = True
            elif i == 4:  # Cinqui√®me parcours - progression moyenne
                current_step = 7
                progress = 46.67  # 7/15 * 100
                is_completed = False
            else:  # Autres parcours - progression vari√©e
                current_step = (i % 15) + 1
                progress = round((current_step / 15) * 100, 2)
                is_completed = False
            
            # Date de d√©but vari√©e
            start_date = datetime.now() - timedelta(days=i*2)
            
            test_data.append((
                30,  # student_id
                path_id,  # learning_path_id
                current_step,  # current_step
                15,  # total_steps
                progress,  # progress_percentage
                70.0 + (i * 3),  # performance_score
                is_completed,  # is_completed
                start_date.isoformat(),  # started_at
                datetime.now().isoformat() if is_completed else None,  # completed_at
                datetime.now().isoformat()  # last_activity
            ))
        
        # Ins√©rer les donn√©es de test
        cursor.executemany("""
            INSERT INTO student_learning_paths (
                student_id, learning_path_id, current_step, total_steps,
                progress_percentage, performance_score, is_completed,
                started_at, completed_at, last_activity
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, test_data)
        
        inserted_rows = cursor.rowcount
        print(f"   ‚úÖ {inserted_rows} lignes de donn√©es de progression cr√©√©es")
        
        # 4. V√©rifier le r√©sultat
        print("\n4. üìä V√âRIFICATION DES DONN√âES CR√â√âES")
        print("-" * 40)
        
        cursor.execute("""
            SELECT 
                COUNT(*) as total,
                COUNT(CASE WHEN progress_percentage IS NULL THEN 1 END) as null_progress,
                COUNT(CASE WHEN current_step IS NULL THEN 1 END) as null_step,
                COUNT(CASE WHEN total_steps IS NULL THEN 1 END) as null_total,
                COUNT(CASE WHEN is_completed = 1 THEN 1 END) as completed_paths
            FROM student_learning_paths
            WHERE student_id = 30
        """)
        
        stats = cursor.fetchone()
        print(f"   Total parcours: {stats[0]}")
        print(f"   Progress NULL: {stats[1]}")
        print(f"   Current Step NULL: {stats[2]}")
        print(f"   Total Steps NULL: {stats[3]}")
        print(f"   Parcours termin√©s: {stats[4]}")
        
        # 5. Afficher des exemples de donn√©es
        print("\n5. üìã EXEMPLES DE DONN√âES CR√â√âES")
        print("-" * 40)
        
        cursor.execute("""
            SELECT 
                id, learning_path_id, current_step, total_steps,
                progress_percentage, is_completed
            FROM student_learning_paths 
            WHERE student_id = 30
            LIMIT 5
        """)
        
        rows = cursor.fetchall()
        
        if rows:
            print("   Donn√©es cr√©√©es:")
            for row in rows:
                print(f"   ID: {row[0]}, Path: {row[1]}, Step: {row[2]}/{row[3]}, Progress: {row[4]}%, Completed: {row[5]}")
                print("   ---")
        
        # 6. Calculer la progression moyenne
        print("\n6. üéØ CALCUL DE LA PROGRESSION MOYENNE")
        print("-" * 40)
        
        cursor.execute("""
            SELECT 
                AVG(progress_percentage) as avg_progress,
                MIN(progress_percentage) as min_progress,
                MAX(progress_percentage) as max_progress
            FROM student_learning_paths 
            WHERE student_id = 30
        """)
        
        progress_stats = cursor.fetchone()
        
        if progress_stats[0] is not None:
            print(f"   Progression moyenne: {progress_stats[0]:.2f}%")
            print(f"   Progression min: {progress_stats[1]:.2f}%")
            print(f"   Progression max: {progress_stats[2]:.2f}%")
        else:
            print("   ‚ùå Impossible de calculer la progression")
        
        conn.commit()
        conn.close()
        
        print("\n   üéØ Donn√©es de test compl√®tes cr√©√©es avec succ√®s!")
        print("   üîÑ Maintenant, rafra√Æchissez votre dashboard pour voir les vrais pourcentages!")
        
    except Exception as e:
        print(f"üí• Erreur lors de la cr√©ation: {e}")

if __name__ == "__main__":
    create_complete_test_data()
