#!/usr/bin/env python3
"""
Script pour tester la cr√©ation, modification et suppression de notes
"""

import requests
import json

def test_create_notes():
    """Tester la cr√©ation, modification et suppression de notes"""
    base_url = "http://localhost:8000"
    
    try:
        print("üß™ TEST DE CR√âATION, MODIFICATION ET SUPPRESSION DE NOTES")
        print("=" * 60)
        
        # Test 1: Cr√©er une nouvelle note
        print("\n1. Test de cr√©ation d'une nouvelle note...")
        note_data = {
            "title": "Test de cr√©ation de note",
            "content": "Ceci est un test de cr√©ation de note avec stockage en base de donn√©es.",
            "subject": "Test",
            "tags": "[\"test\", \"cr√©ation\", \"base\"]"
        }
        
        response = requests.post(f"{base_url}/notes-advanced/", json=note_data)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            created_note = response.json()
            print("   ‚úÖ Note cr√©√©e avec succ√®s!")
            print(f"      - ID: {created_note['id']}")
            print(f"      - Titre: {created_note['title']}")
            print(f"      - Mati√®re: {created_note['subject']}")
            note_id = created_note['id']
        else:
            print(f"   ‚ùå Erreur: {response.text}")
            return
        
        # Test 2: V√©rifier que la note appara√Æt dans la liste
        print("\n2. V√©rification de la note dans la liste...")
        response = requests.get(f"{base_url}/notes-advanced/")
        if response.status_code == 200:
            notes = response.json()
            print(f"   ‚úÖ {len(notes)} notes trouv√©es")
            
            # Chercher la note cr√©√©e
            found = False
            for note in notes:
                if note['id'] == note_id:
                    found = True
                    print(f"   ‚úÖ Note trouv√©e dans la liste!")
                    break
            
            if not found:
                print("   ‚ùå Note cr√©√©e non trouv√©e dans la liste")
        else:
            print(f"   ‚ùå Erreur: {response.text}")
        
        # Test 3: Modifier la note
        print("\n3. Test de modification de la note...")
        update_data = {
            "title": "Test de modification de note",
            "content": "Ceci est un test de modification de note avec stockage en base de donn√©es."
        }
        
        response = requests.put(f"{base_url}/notes-advanced/{note_id}", json=update_data)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            updated_note = response.json()
            print("   ‚úÖ Note modifi√©e avec succ√®s!")
            print(f"      - Nouveau titre: {updated_note['title']}")
        else:
            print(f"   ‚ùå Erreur: {response.text}")
        
        # Test 4: Cr√©er une deuxi√®me note
        print("\n4. Test de cr√©ation d'une deuxi√®me note...")
        note_data2 = {
            "title": "Deuxi√®me note de test",
            "content": "Ceci est une deuxi√®me note de test pour v√©rifier le stockage multiple.",
            "subject": "Math√©matiques",
            "tags": "[\"maths\", \"alg√®bre\", \"test\"]"
        }
        
        response = requests.post(f"{base_url}/notes-advanced/", json=note_data2)
        if response.status_code == 200:
            created_note2 = response.json()
            print("   ‚úÖ Deuxi√®me note cr√©√©e avec succ√®s!")
            print(f"      - ID: {created_note2['id']}")
            print(f"      - Titre: {created_note2['title']}")
            print(f"      - Mati√®re: {created_note2['subject']}")
        else:
            print(f"   ‚ùå Erreur: {response.text}")
        
        # Test 5: V√©rifier le filtrage par mati√®re
        print("\n5. Test de filtrage par mati√®re...")
        response = requests.get(f"{base_url}/notes-advanced/?subject=Math√©matiques")
        if response.status_code == 200:
            notes = response.json()
            print(f"   ‚úÖ {len(notes)} notes trouv√©es pour Math√©matiques")
            for note in notes:
                print(f"      - {note['title']} ({note['subject']})")
        else:
            print(f"   ‚ùå Erreur: {response.text}")
        
        # Test 6: Supprimer la premi√®re note
        print("\n6. Test de suppression de la premi√®re note...")
        response = requests.delete(f"{base_url}/notes-advanced/{note_id}")
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Note supprim√©e avec succ√®s!")
        else:
            print(f"   ‚ùå Erreur: {response.text}")
        
        # Test 7: V√©rifier que la note a √©t√© supprim√©e
        print("\n7. V√©rification de la suppression...")
        response = requests.get(f"{base_url}/notes-advanced/")
        if response.status_code == 200:
            notes = response.json()
            print(f"   ‚úÖ {len(notes)} notes restantes")
            
            # V√©rifier que la note supprim√©e n'est plus l√†
            found = False
            for note in notes:
                if note['id'] == note_id:
                    found = True
                    break
            
            if not found:
                print("   ‚úÖ Note supprim√©e confirm√©e!")
            else:
                print("   ‚ùå Note supprim√©e encore pr√©sente")
        else:
            print(f"   ‚ùå Erreur: {response.text}")
        
        print("\n" + "=" * 60)
        print("üéâ TEST DE CR√âATION DE NOTES TERMIN√â AVEC SUCC√àS!")
        print("‚úÖ Cr√©ation de notes fonctionne!")
        print("‚úÖ Modification de notes fonctionne!")
        print("‚úÖ Suppression de notes fonctionne!")
        print("‚úÖ Stockage en base de donn√©es fonctionne!")
        print("‚úÖ Filtrage par mati√®re fonctionne!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")

if __name__ == "__main__":
    test_create_notes() 