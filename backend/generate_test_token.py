#!/usr/bin/env python3
"""
Script pour g√©n√©rer un token de test valide
"""

import jwt
from datetime import datetime, timedelta
from core.config import settings

def generate_test_token():
    """G√©n√®re un token de test valide pour un enseignant"""
    
    # Donn√©es du token
    payload = {
        "sub": "teacher@example.com",  # Email de l'utilisateur
        "role": "teacher",             # R√¥le de l'utilisateur
        "exp": datetime.utcnow() + timedelta(days=30),  # Expiration dans 30 jours
        "iat": datetime.utcnow(),      # Date de cr√©ation
    }
    
    try:
        # G√©n√©rer le token
        token = jwt.encode(payload, settings.SECRET_KEY, algorithm=settings.ALGORITHM)
        
        print("üîë TOKEN DE TEST G√âN√âR√â AVEC SUCC√àS !")
        print("=" * 60)
        print(f"Token: {token}")
        print("=" * 60)
        print("\nüìã INFORMATIONS DU TOKEN :")
        print(f"Email: {payload['sub']}")
        print(f"R√¥le: {payload['role']}")
        print(f"Expiration: {payload['exp']}")
        print(f"Algorithme: {settings.ALGORITHM}")
        
        print("\nüîß POUR TESTER LE FRONTEND :")
        print("1. Ouvre la console du navigateur (F12)")
        print("2. Ex√©cute cette commande :")
        print(f"   localStorage.setItem('najah_token', '{token}')")
        print("3. Rafra√Æchis la page")
        print("4. Essaie de cr√©er une √©valuation formative")
        
        return token
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du token: {e}")
        return None

def verify_token(token):
    """V√©rifie que le token g√©n√©r√© est valide"""
    
    try:
        # D√©coder le token
        payload = jwt.decode(token, settings.SECRET_KEY, algorithms=[settings.ALGORITHM])
        
        print("\n‚úÖ V√âRIFICATION DU TOKEN :")
        print(f"Token valide: OUI")
        print(f"Email: {payload.get('sub')}")
        print(f"R√¥le: {payload.get('role')}")
        print(f"Expiration: {payload.get('exp')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification du token: {e}")
        return False

if __name__ == "__main__":
    print("üîê G√©n√©rateur de token de test pour l'API formative evaluations")
    print("=" * 70)
    
    # G√©n√©rer le token
    token = generate_test_token()
    
    if token:
        # V√©rifier le token
        verify_token(token)
        
        print("\nüéØ TOKEN PR√äT √Ä UTILISER !")
        print("Copie le token ci-dessus et utilise-le dans le frontend.")
    else:
        print("\n‚ùå √âCHEC DE LA G√âN√âRATION DU TOKEN")
