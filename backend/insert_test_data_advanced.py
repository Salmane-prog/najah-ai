#!/usr/bin/env python3
"""
Script pour ins√©rer des donn√©es de test pour les nouvelles fonctionnalit√©s
- Gestion des Devoirs
- Calendrier Avanc√©
- Collaboration
- IA Avanc√©e
- Rapports D√©taill√©s
"""

import sqlite3
import json
from datetime import datetime, timedelta
from pathlib import Path

def insert_test_data():
    """Ins√©rer des donn√©es de test pour toutes les fonctionnalit√©s"""
    
    # Chemin vers la base de donn√©es
    db_path = Path(__file__).parent.parent / "data" / "app.db"
    
    if not db_path.exists():
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return False
    
    print(f"üìÅ Base de donn√©es trouv√©e: {db_path}")
    
    # Connexion √† la base de donn√©es
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    try:
        # V√©rifier que les utilisateurs existent
        cursor.execute("SELECT id, role FROM users LIMIT 5")
        users = cursor.fetchall()
        
        if not users:
            print("‚ùå Aucun utilisateur trouv√© dans la base de donn√©es")
            return False
        
        print(f"‚úÖ {len(users)} utilisateurs trouv√©s")
        
        # Identifier un professeur et un √©tudiant
        teacher_id = None
        student_id = None
        
        for user_id, role in users:
            if role == 'teacher' and teacher_id is None:
                teacher_id = user_id
            elif role == 'student' and student_id is None:
                student_id = user_id
        
        if not teacher_id:
            print("‚ö†Ô∏è Aucun professeur trouv√©, utilisation du premier utilisateur")
            teacher_id = users[0][0]
        
        if not student_id:
            print("‚ö†Ô∏è Aucun √©tudiant trouv√©, utilisation du deuxi√®me utilisateur")
            student_id = users[1][0] if len(users) > 1 else users[0][0]
        
        print(f"üë®‚Äçüè´ Professeur ID: {teacher_id}")
        print(f"üë®‚Äçüéì √âtudiant ID: {student_id}")
        
        # 1. Ins√©rer des √©v√©nements de calendrier
        print("\nüìÖ Insertion d'√©v√©nements de calendrier...")
        
        # √âv√©nements de cours
        events_data = [
            {
                'title': 'Cours de Math√©matiques',
                'description': 'Alg√®bre lin√©aire - Chapitre 3',
                'event_type': 'course',
                'start_time': datetime.now() + timedelta(days=1, hours=9),
                'end_time': datetime.now() + timedelta(days=1, hours=11),
                'location': 'Salle A101',
                'subject': 'Math√©matiques',
                'color': '#3B82F6',
                'created_by': teacher_id
            },
            {
                'title': 'Examen de Physique',
                'description': 'Examen final - M√©canique',
                'event_type': 'exam',
                'start_time': datetime.now() + timedelta(days=3, hours=14),
                'end_time': datetime.now() + timedelta(days=3, hours=16),
                'location': 'Salle B203',
                'subject': 'Physique',
                'color': '#EF4444',
                'created_by': teacher_id
            },
            {
                'title': 'Session d\'√©tude - Histoire',
                'description': 'R√©vision pour l\'examen',
                'event_type': 'study_session',
                'start_time': datetime.now() + timedelta(days=2, hours=15),
                'end_time': datetime.now() + timedelta(days=2, hours=17),
                'location': 'Biblioth√®que',
                'subject': 'Histoire',
                'color': '#10B981',
                'created_by': student_id
            }
        ]
        
        for event in events_data:
            cursor.execute("""
                INSERT INTO calendar_events 
                (title, description, event_type, start_time, end_time, location, subject, color, created_by)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                event['title'], event['description'], event['event_type'],
                event['start_time'], event['end_time'], event['location'],
                event['subject'], event['color'], event['created_by']
            ))
        
        print(f"‚úÖ {len(events_data)} √©v√©nements de calendrier cr√©√©s")
        
        # 2. Ins√©rer des sessions d'√©tude
        print("\nüìö Insertion de sessions d'√©tude...")
        
        sessions_data = [
            {
                'title': 'R√©vision Math√©matiques',
                'description': 'Exercices d\'alg√®bre',
                'subject': 'Math√©matiques',
                'start_time': datetime.now() + timedelta(days=1, hours=16),
                'duration': 120,
                'goals': json.dumps(['Comprendre les matrices', 'R√©soudre les √©quations']),
                'student_id': student_id
            },
            {
                'title': 'Pr√©paration Physique',
                'description': 'R√©solution de probl√®mes',
                'subject': 'Physique',
                'start_time': datetime.now() + timedelta(days=2, hours=10),
                'duration': 90,
                'goals': json.dumps(['Ma√Ætriser la cin√©matique', 'Pr√©parer l\'examen']),
                'student_id': student_id
            }
        ]
        
        for session in sessions_data:
            cursor.execute("""
                INSERT INTO calendar_study_sessions 
                (title, description, subject, start_time, duration, goals, student_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                session['title'], session['description'], session['subject'],
                session['start_time'], session['duration'], session['goals'], session['student_id']
            ))
        
        print(f"‚úÖ {len(sessions_data)} sessions d'√©tude cr√©√©es")
        
        # 3. Ins√©rer des groupes d'√©tude
        print("\nüë• Insertion de groupes d'√©tude...")
        
        groups_data = [
            {
                'name': 'Groupe Math√©matiques Avanc√©es',
                'description': 'Groupe d\'√©tude pour les math√©matiques de niveau avanc√©',
                'subject': 'Math√©matiques',
                'max_members': 8,
                'is_public': True,
                'created_by': teacher_id
            },
            {
                'name': '√âquipe Projet Physique',
                'description': 'Collaboration sur le projet de m√©canique',
                'subject': 'Physique',
                'max_members': 6,
                'is_public': False,
                'created_by': student_id
            }
        ]
        
        group_ids = []
        for group in groups_data:
            cursor.execute("""
                INSERT INTO study_groups 
                (name, description, subject, max_members, is_public, created_by)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                group['name'], group['description'], group['subject'],
                group['max_members'], group['is_public'], group['created_by']
            ))
            group_ids.append(cursor.lastrowid)
        
        print(f"‚úÖ {len(groups_data)} groupes d'√©tude cr√©√©s")
        
        # 4. Ajouter des membres aux groupes
        print("\nüë§ Ajout de membres aux groupes...")
        
        for group_id in group_ids:
            # Ajouter le cr√©ateur comme membre
            cursor.execute("""
                INSERT INTO study_group_members 
                (group_id, user_id, role)
                VALUES (?, ?, 'admin')
            """, (group_id, teacher_id if group_id == group_ids[0] else student_id))
            
            # Ajouter l'autre utilisateur
            other_user = student_id if group_id == group_ids[0] else teacher_id
            cursor.execute("""
                INSERT INTO study_group_members 
                (group_id, user_id, role)
                VALUES (?, ?, 'member')
            """, (group_id, other_user))
        
        print("‚úÖ Membres ajout√©s aux groupes")
        
        # 5. Ins√©rer des messages de groupe
        print("\nüí¨ Insertion de messages de groupe...")
        
        messages_data = [
            {
                'group_id': group_ids[0],
                'user_id': teacher_id,
                'content': 'Bienvenue dans le groupe Math√©matiques Avanc√©es !',
                'message_type': 'text'
            },
            {
                'group_id': group_ids[0],
                'user_id': student_id,
                'content': 'Merci ! J\'ai des questions sur les matrices.',
                'message_type': 'text'
            },
            {
                'group_id': group_ids[1],
                'user_id': student_id,
                'content': 'Quelqu\'un veut travailler sur le projet ce weekend ?',
                'message_type': 'text'
            }
        ]
        
        for message in messages_data:
            cursor.execute("""
                INSERT INTO group_messages 
                (group_id, user_id, content, message_type)
                VALUES (?, ?, ?, ?)
            """, (
                message['group_id'], message['user_id'],
                message['content'], message['message_type']
            ))
        
        print(f"‚úÖ {len(messages_data)} messages de groupe cr√©√©s")
        
        # 6. Ins√©rer des recommandations IA
        print("\nü§ñ Insertion de recommandations IA...")
        
        ai_recommendations = [
            {
                'user_id': student_id,
                'recommendation_type': 'content',
                'title': 'Vid√©o sur les matrices',
                'description': 'Regardez cette vid√©o pour mieux comprendre les matrices',
                'confidence_score': 0.85,
                'reason': 'Bas√© sur vos difficult√©s en alg√®bre'
            },
            {
                'user_id': student_id,
                'recommendation_type': 'quiz',
                'title': 'Quiz de r√©vision Physique',
                'description': 'Testez vos connaissances en m√©canique',
                'confidence_score': 0.78,
                'reason': 'Examen dans 3 jours'
            }
        ]
        
        for rec in ai_recommendations:
            cursor.execute("""
                INSERT INTO ai_recommendations 
                (user_id, recommendation_type, title, description, confidence_score, reason)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                rec['user_id'], rec['recommendation_type'], rec['title'],
                rec['description'], rec['confidence_score'], rec['reason']
            ))
        
        print(f"‚úÖ {len(ai_recommendations)} recommandations IA cr√©√©es")
        
        # 7. Ins√©rer des sessions de tutorat IA
        print("\nüéì Insertion de sessions de tutorat IA...")
        
        tutoring_sessions = [
            {
                'user_id': student_id,
                'subject': 'Math√©matiques',
                'topic': 'Alg√®bre lin√©aire',
                'session_type': 'remedial',
                'status': 'completed'
            },
            {
                'user_id': student_id,
                'subject': 'Physique',
                'topic': 'M√©canique',
                'session_type': 'preparation',
                'status': 'active'
            }
        ]
        
        session_ids = []
        for session in tutoring_sessions:
            cursor.execute("""
                INSERT INTO ai_tutoring_sessions 
                (user_id, subject, topic, session_type, status)
                VALUES (?, ?, ?, ?, ?)
            """, (
                session['user_id'], session['subject'], session['topic'],
                session['session_type'], session['status']
            ))
            session_ids.append(cursor.lastrowid)
        
        print(f"‚úÖ {len(tutoring_sessions)} sessions de tutorat IA cr√©√©es")
        
        # 8. Ins√©rer des interactions de tutorat
        print("\nüí≠ Insertion d'interactions de tutorat...")
        
        interactions = [
            {
                'session_id': session_ids[0],
                'user_message': 'Je ne comprends pas comment calculer le d√©terminant d\'une matrice 3x3',
                'ai_response': 'Pour calculer le d√©terminant d\'une matrice 3x3, vous pouvez utiliser la r√®gle de Sarrus...',
                'interaction_type': 'question',
                'user_satisfaction': 4
            },
            {
                'session_id': session_ids[1],
                'user_message': 'Pouvez-vous m\'expliquer la deuxi√®me loi de Newton ?',
                'ai_response': 'La deuxi√®me loi de Newton dit que la force nette agissant sur un objet est √©gale √† sa masse multipli√©e par son acc√©l√©ration...',
                'interaction_type': 'explanation',
                'user_satisfaction': 5
            }
        ]
        
        for interaction in interactions:
            cursor.execute("""
                INSERT INTO ai_tutoring_interactions 
                (session_id, user_message, ai_response, interaction_type, user_satisfaction)
                VALUES (?, ?, ?, ?, ?)
            """, (
                interaction['session_id'], interaction['user_message'],
                interaction['ai_response'], interaction['interaction_type'],
                interaction['user_satisfaction']
            ))
        
        print(f"‚úÖ {len(interactions)} interactions de tutorat cr√©√©es")
        
        # 9. Ins√©rer des d√©tections de difficult√©s
        print("\n‚ö†Ô∏è Insertion de d√©tections de difficult√©s...")
        
        difficulties = [
            {
                'user_id': student_id,
                'subject': 'Math√©matiques',
                'topic': 'Matrices',
                'difficulty_level': 'high',
                'confidence_score': 0.82,
                'evidence': json.dumps({'quiz_scores': [45, 52, 38], 'time_spent': 'long'})
            },
            {
                'user_id': student_id,
                'subject': 'Physique',
                'topic': 'Cin√©matique',
                'difficulty_level': 'medium',
                'confidence_score': 0.65,
                'evidence': json.dumps({'quiz_scores': [68, 72], 'time_spent': 'normal'})
            }
        ]
        
        for difficulty in difficulties:
            cursor.execute("""
                INSERT INTO difficulty_detection 
                (user_id, subject, topic, difficulty_level, confidence_score, evidence)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                difficulty['user_id'], difficulty['subject'], difficulty['topic'],
                difficulty['difficulty_level'], difficulty['confidence_score'],
                difficulty['evidence']
            ))
        
        print(f"‚úÖ {len(difficulties)} d√©tections de difficult√©s cr√©√©es")
        
        # 10. Ins√©rer des devoirs
        print("\nüìù Insertion de devoirs...")
        
        homework_assignments = [
            {
                'title': 'Exercices de matrices',
                'description': 'R√©soudre les exercices 1 √† 10 du chapitre 3',
                'subject': 'Math√©matiques',
                'class_id': 1,  # Assumons que la classe 1 existe
                'assigned_by': teacher_id,
                'due_date': datetime.now() + timedelta(days=7),
                'max_score': 100,
                'instructions': 'Utilisez la m√©thode de Gauss pour la r√©solution'
            },
            {
                'title': 'Probl√®me de m√©canique',
                'description': 'Analyser le mouvement d\'un projectile',
                'subject': 'Physique',
                'class_id': 1,
                'assigned_by': teacher_id,
                'due_date': datetime.now() + timedelta(days=5),
                'max_score': 50,
                'instructions': 'Dessinez le diagramme des forces et calculez la trajectoire'
            }
        ]
        
        assignment_ids = []
        for assignment in homework_assignments:
            cursor.execute("""
                INSERT INTO homework_assignments 
                (title, description, subject, class_id, assigned_by, due_date, max_score, instructions)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                assignment['title'], assignment['description'], assignment['subject'],
                assignment['class_id'], assignment['assigned_by'], assignment['due_date'],
                assignment['max_score'], assignment['instructions']
            ))
            assignment_ids.append(cursor.lastrowid)
        
        print(f"‚úÖ {len(homework_assignments)} devoirs cr√©√©s")
        
        # 11. Ins√©rer des soumissions de devoirs
        print("\nüì§ Insertion de soumissions de devoirs...")
        
        submissions = [
            {
                'assignment_id': assignment_ids[0],
                'student_id': student_id,
                'content': 'J\'ai r√©solu les exercices 1, 2, 3, 5, 7, 9. Les exercices 4, 6, 8, 10 me posent probl√®me.',
                'status': 'submitted'
            },
            {
                'assignment_id': assignment_ids[1],
                'student_id': student_id,
                'content': 'Voici mon analyse du mouvement du projectile avec les calculs.',
                'status': 'submitted'
            }
        ]
        
        for submission in submissions:
            cursor.execute("""
                INSERT INTO homework_submissions 
                (assignment_id, student_id, content, status)
                VALUES (?, ?, ?, ?)
            """, (
                submission['assignment_id'], submission['student_id'],
                submission['content'], submission['status']
            ))
        
        print(f"‚úÖ {len(submissions)} soumissions de devoirs cr√©√©es")
        
        # 12. Ins√©rer des projets de collaboration
        print("\nü§ù Insertion de projets de collaboration...")
        
        projects = [
            {
                'title': 'Projet de recherche en IA',
                'description': 'D√©veloppement d\'un syst√®me de recommandation intelligent',
                'subject': 'Informatique',
                'due_date': datetime.now() + timedelta(days=30),
                'status': 'active',
                'created_by': teacher_id
            },
            {
                'title': '√âtude sur les √©nergies renouvelables',
                'description': 'Analyse comparative des diff√©rentes sources d\'√©nergie',
                'subject': 'Sciences',
                'due_date': datetime.now() + timedelta(days=21),
                'status': 'planning',
                'created_by': student_id
            }
        ]
        
        project_ids = []
        for project in projects:
            cursor.execute("""
                INSERT INTO collaboration_projects 
                (title, description, subject, due_date, status, created_by)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                project['title'], project['description'], project['subject'],
                project['due_date'], project['status'], project['created_by']
            ))
            project_ids.append(cursor.lastrowid)
        
        print(f"‚úÖ {len(projects)} projets de collaboration cr√©√©s")
        
        # 13. Ins√©rer des t√¢ches de projet
        print("\n‚úÖ Insertion de t√¢ches de projet...")
        
        tasks = [
            {
                'project_id': project_ids[0],
                'title': 'Recherche bibliographique',
                'description': 'Analyser les articles scientifiques sur les syst√®mes de recommandation',
                'assigned_to': student_id,
                'priority': 'high',
                'status': 'in_progress',
                'due_date': datetime.now() + timedelta(days=7),
                'created_by': teacher_id
            },
            {
                'project_id': project_ids[1],
                'title': 'Collecte de donn√©es',
                'description': 'Gather data on renewable energy sources',
                'assigned_to': teacher_id,
                'priority': 'medium',
                'status': 'pending',
                'due_date': datetime.now() + timedelta(days=5),
                'created_by': student_id
            }
        ]
        
        for task in tasks:
            cursor.execute("""
                INSERT INTO project_tasks 
                (project_id, title, description, assigned_to, priority, status, due_date, created_by)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                task['project_id'], task['title'], task['description'],
                task['assigned_to'], task['priority'], task['status'],
                task['due_date'], task['created_by']
            ))
        
        print(f"‚úÖ {len(tasks)} t√¢ches de projet cr√©√©es")
        
        # 14. Ins√©rer des rapports d√©taill√©s
        print("\nüìä Insertion de rapports d√©taill√©s...")
        
        reports = [
            {
                'user_id': student_id,
                'report_type': 'performance_analysis',
                'subject': 'Math√©matiques',
                'period': 'month',
                'data': json.dumps({
                    'quiz_scores': [75, 82, 68, 79, 85],
                    'time_spent': 12.5,
                    'difficulties': ['Matrices', 'Vecteurs'],
                    'recommendations': ['Plus d\'exercices sur les matrices', 'R√©vision des bases']
                })
            },
            {
                'user_id': student_id,
                'report_type': 'learning_progress',
                'subject': 'Physique',
                'period': 'week',
                'data': json.dumps({
                    'topics_covered': ['M√©canique', 'Thermodynamique'],
                    'completion_rate': 0.75,
                    'next_topics': ['Ondes', '√âlectricit√©']
                })
            }
        ]
        
        for report in reports:
            cursor.execute("""
                INSERT INTO detailed_reports 
                (user_id, report_type, subject, period, data)
                VALUES (?, ?, ?, ?, ?)
            """, (
                report['user_id'], report['report_type'], report['subject'],
                report['period'], report['data']
            ))
        
        print(f"‚úÖ {len(reports)} rapports d√©taill√©s cr√©√©s")
        
        # Validation finale
        print("\nüîç V√©rification des donn√©es ins√©r√©es...")
        
        # Compter les enregistrements dans chaque table
        tables_to_check = [
            'calendar_events', 'calendar_study_sessions', 'study_groups',
            'group_messages', 'ai_recommendations', 'ai_tutoring_sessions',
            'ai_tutoring_interactions', 'difficulty_detection',
            'homework_assignments', 'homework_submissions',
            'collaboration_projects', 'project_tasks', 'detailed_reports'
        ]
        
        for table in tables_to_check:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            print(f"   - {table}: {count} enregistrements")
        
        # Commit des changements
        conn.commit()
        print("\nüéâ Toutes les donn√©es de test ont √©t√© ins√©r√©es avec succ√®s!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'insertion des donn√©es: {e}")
        conn.rollback()
        return False
        
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ D√©marrage de l'insertion des donn√©es de test...")
    success = insert_test_data()
    
    if success:
        print("\n‚úÖ Script termin√© avec succ√®s!")
    else:
        print("\n‚ùå Script termin√© avec des erreurs!")




