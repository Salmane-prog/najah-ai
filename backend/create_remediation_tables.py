#!/usr/bin/env python3
"""
Script pour cr√©er les tables de rem√©diation dans la base de donn√©es
"""

import sqlite3
import os
from datetime import datetime

def create_remediation_tables():
    """Cr√©er les tables de rem√©diation"""
    
    # Chemin vers la base de donn√©es
    db_path = "data/najah_ai.db"
    
    # Cr√©er le dossier data s'il n'existe pas
    os.makedirs("data", exist_ok=True)
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîß Cr√©ation des tables de rem√©diation...")
        
        # Table des r√©sultats de rem√©diation
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS remediation_results (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                topic TEXT NOT NULL,
                exercise_type TEXT NOT NULL,
                score INTEGER NOT NULL,
                max_score INTEGER NOT NULL,
                percentage REAL NOT NULL,
                time_spent INTEGER NOT NULL,
                weak_areas_improved TEXT,
                difficulty_level TEXT DEFAULT 'medium',
                completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (student_id) REFERENCES users (id)
            )
        """)
        print("‚úÖ Table remediation_results cr√©√©e")
        
        # Table des badges de rem√©diation
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS remediation_badges (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                badge_type TEXT NOT NULL,
                badge_name TEXT NOT NULL,
                badge_description TEXT,
                badge_icon TEXT,
                earned_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                metadata TEXT,
                FOREIGN KEY (student_id) REFERENCES users (id)
            )
        """)
        print("‚úÖ Table remediation_badges cr√©√©e")
        
        # Table du progr√®s de rem√©diation
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS remediation_progress (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                student_id INTEGER NOT NULL,
                topic TEXT NOT NULL,
                current_level INTEGER DEFAULT 0,
                previous_level INTEGER DEFAULT 0,
                improvement INTEGER DEFAULT 0,
                exercises_completed INTEGER DEFAULT 0,
                total_exercises INTEGER DEFAULT 0,
                success_rate REAL DEFAULT 0.0,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (student_id) REFERENCES users (id)
            )
        """)
        print("‚úÖ Table remediation_progress cr√©√©e")
        
        # Cr√©er des index pour am√©liorer les performances
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_remediation_results_student 
            ON remediation_results (student_id)
        """)
        
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_remediation_results_topic 
            ON remediation_results (topic)
        """)
        
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_remediation_badges_student 
            ON remediation_badges (student_id)
        """)
        
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_remediation_progress_student 
            ON remediation_progress (student_id)
        """)
        
        cursor.execute("""
            CREATE INDEX IF NOT EXISTS idx_remediation_progress_topic 
            ON remediation_progress (topic)
        """)
        
        print("‚úÖ Index cr√©√©s")
        
        # Ins√©rer quelques donn√©es d'exemple
        print("üìù Insertion de donn√©es d'exemple...")
        
        # V√©rifier si des utilisateurs existent
        cursor.execute("SELECT id FROM users LIMIT 1")
        user_exists = cursor.fetchone()
        
        if user_exists:
            student_id = user_exists[0]
            
            # Ins√©rer un r√©sultat d'exemple
            cursor.execute("""
                INSERT OR IGNORE INTO remediation_results 
                (student_id, topic, exercise_type, score, max_score, percentage, time_spent, weak_areas_improved)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                student_id,
                'fondamentaux',
                'quiz',
                2,
                3,
                67.0,
                180,
                '["fondamentaux"]'
            ))
            
            # Ins√©rer un badge d'exemple
            cursor.execute("""
                INSERT OR IGNORE INTO remediation_badges 
                (student_id, badge_type, badge_name, badge_description, badge_icon, metadata)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                student_id,
                'first_quiz',
                'Premier Quiz',
                'Compl√©tez votre premier quiz de rem√©diation',
                'üéØ',
                '{"exercise_type": "quiz", "topic": "fondamentaux"}'
            ))
            
            # Ins√©rer un progr√®s d'exemple
            cursor.execute("""
                INSERT OR IGNORE INTO remediation_progress 
                (student_id, topic, current_level, previous_level, improvement, exercises_completed, total_exercises, success_rate)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                student_id,
                'fondamentaux',
                6,
                5,
                1,
                1,
                1,
                67.0
            ))
            
            print("‚úÖ Donn√©es d'exemple ins√©r√©es")
        else:
            print("‚ö†Ô∏è  Aucun utilisateur trouv√©, donn√©es d'exemple non ins√©r√©es")
        
        # Valider les changements
        conn.commit()
        print("‚úÖ Changements valid√©s")
        
        # Afficher la structure des tables
        print("\nüìã Structure des tables cr√©√©es:")
        
        cursor.execute("PRAGMA table_info(remediation_results)")
        print("\nremediation_results:")
        for column in cursor.fetchall():
            print(f"  - {column[1]} ({column[2]})")
        
        cursor.execute("PRAGMA table_info(remediation_badges)")
        print("\nremediation_badges:")
        for column in cursor.fetchall():
            print(f"  - {column[1]} ({column[2]})")
        
        cursor.execute("PRAGMA table_info(remediation_progress)")
        print("\nremediation_progress:")
        for column in cursor.fetchall():
            print(f"  - {column[1]} ({column[2]})")
        
        print(f"\nüéâ Tables de rem√©diation cr√©√©es avec succ√®s dans {db_path}")
        
    except sqlite3.Error as e:
        print(f"‚ùå Erreur SQLite: {e}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    finally:
        if conn:
            conn.close()
            print("üîí Connexion ferm√©e")

def verify_tables():
    """V√©rifier que les tables ont √©t√© cr√©√©es correctement"""
    
    db_path = "data/najah_ai.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("\nüîç V√©rification des tables...")
        
        # V√©rifier l'existence des tables
        tables = ['remediation_results', 'remediation_badges', 'remediation_progress']
        
        for table in tables:
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table}'")
            if cursor.fetchone():
                print(f"‚úÖ Table {table} existe")
                
                # Compter les enregistrements
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"   üìä {count} enregistrement(s)")
            else:
                print(f"‚ùå Table {table} n'existe pas")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")

if __name__ == "__main__":
    print("üöÄ Cr√©ation des tables de rem√©diation...")
    print("=" * 50)
    
    create_remediation_tables()
    verify_tables()
    
    print("\n" + "=" * 50)
    print("‚ú® Script termin√© !")








