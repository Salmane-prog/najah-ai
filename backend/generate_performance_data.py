#!/usr/bin/env python3
"""
Script pour g√©n√©rer des donn√©es de test pour les performances des √©l√®ves
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.orm import Session
from core.database import SessionLocal, engine
from models.quiz import Quiz, QuizResult, QuizAnswer, Question
from models.user import User
from models.badge import Badge, UserBadge
from models.message import Message
from models.thread import Thread
from datetime import datetime, timedelta
import random

def generate_performance_data():
    """G√©n√®re des donn√©es de performance pour les √©l√®ves existants."""
    db = SessionLocal()
    
    try:
        print("üéØ G√©n√©ration des donn√©es de performance des √©l√®ves...")
        
        # R√©cup√©rer tous les √©l√®ves
        students = db.query(User).filter(User.role == "student").all()
        if not students:
            print("‚ùå Aucun √©l√®ve trouv√©. Cr√©ez d'abord des √©l√®ves.")
            return
        
        # R√©cup√©rer tous les quiz
        quizzes = db.query(Quiz).all()
        if not quizzes:
            print("‚ùå Aucun quiz trouv√©. Cr√©ez d'abord des quiz.")
            return
        
        # R√©cup√©rer toutes les questions
        questions = db.query(Question).all()
        if not questions:
            print("‚ùå Aucune question trouv√©e. Cr√©ez d'abord des questions.")
            return
        
        # R√©cup√©rer tous les badges
        badges = db.query(Badge).all()
        
        print(f"üìä G√©n√©ration des performances pour {len(students)} √©l√®ves...")
        
        # G√©n√©rer des performances pour chaque √©l√®ve
        for student in students:
            print(f"  üë§ Traitement de {student.username or student.email}...")
            
            # G√©n√©rer 3-8 r√©sultats de quiz par √©l√®ve
            num_quizzes = random.randint(3, 8)
            selected_quizzes = random.sample(quizzes, min(num_quizzes, len(quizzes)))
            
            for quiz in selected_quizzes:
                # G√©n√©rer un score al√©atoire (plus r√©aliste)
                if random.random() < 0.7:  # 70% de chance d'avoir un bon score
                    score = random.randint(60, 95)
                else:
                    score = random.randint(30, 70)
                
                # Calculer le nombre de questions correctes
                quiz_questions = [q for q in questions if q.quiz_id == quiz.id]
                if not quiz_questions:
                    continue
                
                correct_answers = int((score / 100) * len(quiz_questions))
                incorrect_answers = len(quiz_questions) - correct_answers
                
                # Date al√©atoire dans les 30 derniers jours
                days_ago = random.randint(0, 30)
                completed_date = datetime.utcnow() - timedelta(days=days_ago)
                started_date = completed_date - timedelta(minutes=random.randint(10, 45))
                
                # Cr√©er le r√©sultat de quiz
                quiz_result = QuizResult(
                    student_id=student.id,
                    quiz_id=quiz.id,
                    score=correct_answers,
                    max_score=len(quiz_questions),
                    percentage=score,
                    is_completed=True,
                    started_at=started_date,
                    completed_at=completed_date
                )
                db.add(quiz_result)
                db.flush()  # Pour obtenir l'ID
                
                # G√©n√©rer les r√©ponses aux questions
                for i, question in enumerate(quiz_questions):
                    is_correct = i < correct_answers
                    
                    # Choisir une r√©ponse al√©atoire
                    if question.question_type == "multiple_choice":
                        selected_answer = random.choice(question.options) if question.options else "A"
                    else:
                        selected_answer = "R√©ponse g√©n√©r√©e" if is_correct else "Mauvaise r√©ponse"
                    
                    quiz_answer = QuizAnswer(
                        result_id=quiz_result.id,
                        question_id=question.id,
                        selected_answer=selected_answer,
                        is_correct=is_correct
                    )
                    db.add(quiz_answer)
            
            # Attribuer 1-3 badges al√©atoires √† chaque √©l√®ve
            if badges:
                num_badges = random.randint(1, min(3, len(badges)))
                selected_badges = random.sample(badges, num_badges)
                
                for badge in selected_badges:
                    # V√©rifier si l'√©l√®ve n'a pas d√©j√† ce badge
                    existing_badge = db.query(UserBadge).filter(
                        UserBadge.user_id == student.id,
                        UserBadge.badge_id == badge.id
                    ).first()
                    
                    if not existing_badge:
                        user_badge = UserBadge(
                            user_id=student.id,
                            badge_id=badge.id,
                            awarded_at=datetime.utcnow() - timedelta(days=random.randint(0, 60))
                        )
                        db.add(user_badge)
        
        # Commit des changements
        db.commit()
        
        print("‚úÖ Donn√©es de performance g√©n√©r√©es avec succ√®s !")
        print(f"   üìà {len(students)} √©l√®ves ont maintenant des performances")
        print(f"   üéØ Quiz compl√©t√©s g√©n√©r√©s")
        print(f"   üèÜ Badges attribu√©s")
        print(f"   üìä Analyses de difficult√©s disponibles")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration des donn√©es: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    generate_performance_data() 