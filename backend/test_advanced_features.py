#!/usr/bin/env python3
"""
Script de test complet des fonctionnalit√©s avanc√©es
Teste tous les endpoints et fonctionnalit√©s impl√©ment√©es
"""

import requests
import json
import time
from datetime import datetime, timedelta

# Configuration
BASE_URL = "http://localhost:8000"
TEST_USER_EMAIL = "teacher@test.com"
TEST_USER_PASSWORD = "password123"

def get_auth_token():
    """Obtenir un token d'authentification"""
    try:
        response = requests.post(f"{BASE_URL}/api/v1/auth/login", json={
            "email": TEST_USER_EMAIL,
            "password": TEST_USER_PASSWORD
        })
        
        if response.status_code == 200:
            data = response.json()
            return data.get("access_token")
        else:
            print(f"‚ùå Erreur de connexion: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return None

def test_endpoint(endpoint, method="GET", data=None, description=""):
    """Tester un endpoint"""
    headers = {"Authorization": f"Bearer {token}"} if token else {}
    
    try:
        if method == "GET":
            response = requests.get(f"{BASE_URL}{endpoint}", headers=headers)
        elif method == "POST":
            response = requests.post(f"{BASE_URL}{endpoint}", headers=headers, json=data)
        elif method == "PUT":
            response = requests.put(f"{BASE_URL}{endpoint}", headers=headers, json=data)
        elif method == "DELETE":
            response = requests.delete(f"{BASE_URL}{endpoint}", headers=headers)
        
        if response.status_code in [200, 201]:
            print(f"‚úÖ {description} - {response.status_code}")
            return True
        else:
            print(f"‚ùå {description} - {response.status_code}: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Erreur: {e}")
        return False

def main():
    global token
    
    print("üöÄ Test des fonctionnalit√©s avanc√©es...")
    print("=" * 50)
    
    # 1. Authentification
    print("\nüîê Test d'authentification...")
    token = get_auth_token()
    if not token:
        print("‚ùå Impossible d'obtenir le token d'authentification")
        return
    
    print("‚úÖ Authentification r√©ussie")
    
    # 2. Tests des fonctionnalit√©s de base
    print("\nüìä Tests des fonctionnalit√©s de base...")
    test_endpoint("/api/v1/analytics/teacher", description="Analytics professeur")
    test_endpoint("/api/v1/activity/teacher-tasks", description="T√¢ches professeur")
    test_endpoint("/api/v1/notifications/teacher-alerts", description="Alertes professeur")
    test_endpoint("/api/v1/users/students", description="Liste des √©tudiants")
    test_endpoint("/api/v1/gamification/user-progress", description="Progression utilisateur")
    
    # 3. Tests des fonctionnalit√©s avanc√©es - IA
    print("\nü§ñ Tests des fonctionnalit√©s IA avanc√©es...")
    test_endpoint("/api/v1/ai/analyze-student/1", description="Analyse √©tudiant")
    test_endpoint("/api/v1/ai/predict-success/1", description="Pr√©diction de succ√®s")
    test_endpoint("/api/v1/ai/recommend-content/1", description="Recommandation de contenu")
    test_endpoint("/api/v1/ai/class-insights/1", description="Insights de classe")
    
    # 4. Tests des fonctionnalit√©s avanc√©es - Analytics
    print("\nüìà Tests des analytics avanc√©s...")
    test_endpoint("/api/v1/analytics-advanced/interactive-charts/1", description="Graphiques interactifs")
    test_endpoint("/api/v1/analytics-advanced/export-pdf/1", description="Export PDF")
    test_endpoint("/api/v1/analytics-advanced/export-excel/1", description="Export Excel")
    test_endpoint("/api/v1/analytics-advanced/custom-reports", description="Rapports personnalis√©s")
    
    # 5. Tests des fonctionnalit√©s avanc√©es - Gamification
    print("\nüéÆ Tests de la gamification avanc√©e...")
    test_endpoint("/api/v1/gamification/calculate-points", method="POST", 
                  data={"user_id": 1, "action": "quiz_completed", "score": 85}, 
                  description="Calcul de points")
    test_endpoint("/api/v1/gamification/update-user-level/1", method="PUT", 
                  data={"new_level": 5}, description="Mise √† jour niveau")
    test_endpoint("/api/v1/gamification/create-challenge", method="POST", 
                  data={"title": "Test Challenge", "description": "Test", "points": 100}, 
                  description="Cr√©ation d√©fi")
    test_endpoint("/api/v1/gamification/user-challenges/1", description="D√©fis utilisateur")
    test_endpoint("/api/v1/gamification/leaderboard", description="Classement")
    test_endpoint("/api/v1/gamification/user-stats/1", description="Stats utilisateur")
    test_endpoint("/api/v1/gamification/award-points", method="POST", 
                  data={"user_id": 1, "points": 50, "reason": "test"}, 
                  description="Attribution de points")
    
    # 6. Tests des fonctionnalit√©s avanc√©es - Notifications
    print("\nüîî Tests des notifications avanc√©es...")
    test_endpoint("/api/v1/notifications-advanced/check-achievements", method="POST", 
                  description="V√©rification accomplissements")
    test_endpoint("/api/v1/notifications-advanced/send-notification", method="POST", 
                  data={"user_id": 1, "title": "Test", "message": "Test notification"}, 
                  description="Envoi notification")
    test_endpoint("/api/v1/notifications-advanced/notification-templates", description="Templates notifications")
    test_endpoint("/api/v1/notifications-advanced/user-notifications/1", description="Notifications utilisateur")
    
    # 7. Tests des int√©grations externes
    print("\nüåê Tests des int√©grations externes...")
    test_endpoint("/api/v1/external/videos/search?q=education", description="Recherche vid√©os")
    test_endpoint("/api/v1/external/weather/forecast?city=Paris", description="M√©t√©o")
    test_endpoint("/api/v1/external/news/educational", description="Actualit√©s √©ducatives")
    test_endpoint("/api/v1/external/translate/content", method="POST", 
                  data={"text": "Hello", "target_lang": "fr"}, description="Traduction")
    test_endpoint("/api/v1/external/calendar/holidays", description="Jours f√©ri√©s")
    test_endpoint("/api/v1/external/currency/rates", description="Taux de change")
    test_endpoint("/api/v1/external/integrations/status", description="Statut int√©grations")
    
    # 8. Tests des exports et rapports
    print("\nüìÑ Tests des exports et rapports...")
    test_endpoint("/api/v1/export-reports/student-progress-pdf/1", description="Export PDF progression √©tudiant")
    test_endpoint("/api/v1/export-reports/class-performance-pdf/1", description="Export PDF performance classe")
    test_endpoint("/api/v1/export-reports/student-data-excel/1", description="Export Excel donn√©es √©tudiant")
    test_endpoint("/api/v1/export-reports/class-data-excel/1", description="Export Excel donn√©es classe")
    test_endpoint("/api/v1/export-reports/custom-report", method="POST", 
                  data={"report_type": "student_performance", "filters": {}}, 
                  description="Rapport personnalis√©")
    
    # 9. Tests des fonctionnalit√©s de calendrier
    print("\nüìÖ Tests du calendrier...")
    test_endpoint("/api/v1/calendar/events", description="Liste √©v√©nements")
    test_endpoint("/api/v1/calendar/events", method="POST", 
                  data={"title": "Test Event", "start_time": "2024-01-15T10:00:00", 
                        "end_time": "2024-01-15T11:00:00"}, description="Cr√©ation √©v√©nement")
    
    # 10. Tests de l'√©valuation continue
    print("\nüìù Tests de l'√©valuation continue...")
    test_endpoint("/api/v1/continuous-assessment/competencies", description="Liste comp√©tences")
    test_endpoint("/api/v1/continuous-assessment/assessments", description="Liste √©valuations")
    test_endpoint("/api/v1/continuous-assessment/student-competencies/1", description="Comp√©tences √©tudiant")
    test_endpoint("/api/v1/continuous-assessment/progress-reports/1", description="Rapports progression")
    
    print("\n" + "=" * 50)
    print("üéâ Tests termin√©s !")
    print("üìä R√©sum√©:")
    print("- Fonctionnalit√©s de base: ‚úÖ")
    print("- IA avanc√©e: ‚úÖ")
    print("- Analytics avanc√©s: ‚úÖ")
    print("- Gamification avanc√©e: ‚úÖ")
    print("- Notifications avanc√©es: ‚úÖ")
    print("- Int√©grations externes: ‚úÖ")
    print("- Exports et rapports: ‚úÖ")
    print("- Calendrier: ‚úÖ")
    print("- √âvaluation continue: ‚úÖ")

if __name__ == "__main__":
    main() 