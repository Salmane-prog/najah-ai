#!/usr/bin/env python3
"""
Script pour ajouter des questions d'exemple aux tests adaptatifs
"""

import sqlite3
import os

def add_sample_questions():
    # Chemin vers la base de donn√©es
    db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'app.db')
    print(f"üîß Ajout de questions d'exemple aux tests adaptatifs")
    print(f"üìÅ Base de donn√©es: {db_path}")
    print("=" * 60)
    
    try:
        # Connexion √† la base
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # V√©rifier si la table adaptive_questions existe
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='adaptive_questions'")
        if not cursor.fetchone():
            print("‚ùå Table 'adaptive_questions' n'existe pas!")
            return
        
        print("‚úÖ Table 'adaptive_questions' existe")
        
        # V√©rifier les tests existants
        cursor.execute("SELECT id, title FROM adaptive_tests WHERE is_active = 1")
        tests = cursor.fetchall()
        
        if not tests:
            print("‚ùå Aucun test actif trouv√©!")
            return
        
        print(f"üìä Tests trouv√©s: {len(tests)}")
        for test in tests:
            print(f"  - ID: {test[0]}, Titre: {test[1]}")
        
        # Ajouter des questions pour chaque test
        for test_id, test_title in tests:
            print(f"\nüîß Ajout de questions pour: {test_title}")
            
            # Compter les questions existantes
            cursor.execute("SELECT COUNT(*) FROM adaptive_questions WHERE test_id = ?", (test_id,))
            existing_count = cursor.fetchone()[0]
            
            if existing_count > 0:
                print(f"  ‚ö†Ô∏è  {existing_count} questions existent d√©j√†, passage au suivant")
                continue
            
            # Ajouter des questions selon le sujet
            if "Fran√ßais" in test_title or "Grammaire" in test_title:
                questions = [
                    ("Conjuguez le verbe '√™tre' au pr√©sent de l'indicatif", "√™tre", "conjugaison", 3, "Je suis, tu es, il est, nous sommes, vous √™tes, ils sont"),
                    ("Quelle est la nature grammaticale du mot 'rapidement' ?", "adverbe", "grammaire", 4, "C'est un adverbe de mani√®re qui modifie le verbe"),
                    ("Identifiez le sujet dans la phrase : 'Les enfants jouent dans le jardin'", "Les enfants", "analyse", 2, "Le sujet est 'Les enfants', groupe nominal"),
                    ("Conjuguez le verbe 'avoir' √† l'imparfait", "avoir", "conjugaison", 3, "J'avais, tu avais, il avait, nous avions, vous aviez, ils avaient"),
                    ("Quelle est la fonction de 'tr√®s' dans 'tr√®s beau' ?", "adverbe d'intensit√©", "grammaire", 4, "'Tr√®s' est un adverbe d'intensit√© qui modifie l'adjectif 'beau'")
                ]
            elif "Math√©matiques" in test_title or "Alg√®bre" in test_title:
                questions = [
                    ("R√©solvez l'√©quation : 2x + 5 = 13", "x = 4", "√©quations", 4, "2x + 5 = 13 ‚Üí 2x = 8 ‚Üí x = 4"),
                    ("Calculez : 3(x + 2) - 2(x - 1)", "x + 8", "d√©veloppement", 5, "3(x + 2) - 2(x - 1) = 3x + 6 - 2x + 2 = x + 8"),
                    ("Factorisez : x¬≤ - 4", "(x + 2)(x - 2)", "factorisation", 6, "x¬≤ - 4 = x¬≤ - 2¬≤ = (x + 2)(x - 2)"),
                    ("R√©solvez : 5x - 3 = 2x + 9", "x = 4", "√©quations", 3, "5x - 3 = 2x + 9 ‚Üí 3x = 12 ‚Üí x = 4"),
                    ("Calculez : (2x + 1)¬≤", "4x¬≤ + 4x + 1", "identit√©s", 7, "(2x + 1)¬≤ = (2x)¬≤ + 2√ó2x√ó1 + 1¬≤ = 4x¬≤ + 4x + 1")
                ]
            elif "Histoire" in test_title:
                questions = [
                    ("En quelle ann√©e a eu lieu la prise de la Bastille ?", "1789", "chronologie", 3, "La prise de la Bastille a eu lieu le 14 juillet 1789"),
                    ("Qui √©tait le roi de France en 1789 ?", "Louis XVI", "personnages", 2, "Louis XVI √©tait roi de France de 1774 √† 1792"),
                    ("Quel √©tait le slogan de la R√©volution fran√ßaise ?", "Libert√©, √âgalit√©, Fraternit√©", "concepts", 4, "Ce slogan est devenu la devise de la R√©publique fran√ßaise"),
                    ("Quelle assembl√©e a √©t√© cr√©√©e en 1789 ?", "Assembl√©e nationale", "institutions", 3, "L'Assembl√©e nationale a √©t√© proclam√©e le 17 juin 1789"),
                    ("Quel √©v√©nement marque le d√©but de la R√©volution ?", "√âtats g√©n√©raux", "√©v√©nements", 5, "Les √âtats g√©n√©raux convoqu√©s en mai 1789 marquent le d√©but")
                ]
            else:
                # Questions g√©n√©riques
                questions = [
                    ("Question de test 1", "r√©ponse 1", "cat√©gorie", 3, "explication 1"),
                    ("Question de test 2", "r√©ponse 2", "cat√©gorie", 4, "explication 2"),
                    ("Question de test 3", "r√©ponse 3", "cat√©gorie", 5, "explication 3")
                ]
            
            # Ins√©rer les questions
            for i, (question_text, correct_answer, category, difficulty, explanation) in enumerate(questions, 1):
                cursor.execute("""
                    INSERT INTO adaptive_questions (
                        test_id, question_text, correct_answer, category, 
                        difficulty_level, explanation, question_order, is_active
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (test_id, question_text, correct_answer, category, difficulty, explanation, i, 1))
            
            print(f"  ‚úÖ {len(questions)} questions ajout√©es")
            
            # Mettre √† jour le nombre total de questions dans le test
            cursor.execute("""
                UPDATE adaptive_tests 
                SET total_questions = ? 
                WHERE id = ?
            """, (len(questions), test_id))
            
            print(f"  ‚úÖ total_questions mis √† jour: {len(questions)}")
        
        # Valider les changements
        conn.commit()
        
        # V√©rifier le r√©sultat
        print(f"\nüìä R√©sum√© final:")
        cursor.execute("""
            SELECT t.title, t.total_questions, COUNT(q.id) as questions_count
            FROM adaptive_tests t
            LEFT JOIN adaptive_questions q ON t.id = q.test_id
            WHERE t.is_active = 1
            GROUP BY t.id, t.title, t.total_questions
        """)
        
        results = cursor.fetchall()
        for title, total_questions, questions_count in results:
            print(f"  - {title}: {total_questions} questions d√©clar√©es, {questions_count} questions en base")
        
        conn.close()
        print("\n‚úÖ Questions ajout√©es avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    add_sample_questions()
















