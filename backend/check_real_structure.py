#!/usr/bin/env python3
"""
Script pour v√©rifier la vraie structure de la base de donn√©es
"""

import sqlite3
import os

def check_real_structure():
    """V√©rifier la vraie structure de la base de donn√©es"""
    print("üîç V√âRIFICATION DE LA VRAIE STRUCTURE DE LA BASE DE DONN√âES")
    print("=" * 70)
    
    # Chemin vers la base de donn√©es
    db_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'app.db')
    print(f"üìÅ Base de donn√©es: {db_path}")
    
    if not os.path.exists(db_path):
        print("‚ùå Base de donn√©es non trouv√©e!")
        return
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # V√©rifier toutes les tables
        print("\n1Ô∏è‚É£ Toutes les tables:")
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name")
        tables = cursor.fetchall()
        
        for table in tables:
            table_name = table[0]
            print(f"   üìã {table_name}")
            
            # Compter les lignes
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"      - Lignes: {count}")
            except:
                print(f"      - Lignes: Erreur")
        
        # V√©rifier les tables li√©es aux utilisateurs
        print("\n2Ô∏è‚É£ Tables li√©es aux utilisateurs:")
        user_tables = ['users', 'user_profiles', 'student_profiles', 'user_details']
        
        for table_name in user_tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"   üìã {table_name}: {count} lignes")
                
                if count > 0:
                    # Voir la structure
                    cursor.execute(f"PRAGMA table_info({table_name})")
                    columns = cursor.fetchall()
                    print(f"      Colonnes: {[col[1] for col in columns]}")
                    
                    # Voir quelques exemples
                    cursor.execute(f"SELECT * FROM {table_name} LIMIT 2")
                    examples = cursor.fetchall()
                    for example in examples:
                        print(f"      Exemple: {example}")
                        
            except Exception as e:
                print(f"   ‚ùå {table_name}: {e}")
        
        # V√©rifier les tables d'√©valuation
        print("\n3Ô∏è‚É£ Tables d'√©valuation:")
        assessment_tables = ['assessments', 'assessment_questions', 'assessment_results']
        
        for table_name in assessment_tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"   üìã {table_name}: {count} lignes")
                
                if count > 0:
                    # Voir la structure
                    cursor.execute(f"PRAGMA table_info({table_name})")
                    columns = cursor.fetchall()
                    print(f"      Colonnes: {[col[1] for col in columns]}")
                    
            except Exception as e:
                print(f"   ‚ùå {table_name}: {e}")
        
        # V√©rifier les tables de parcours
        print("\n4Ô∏è‚É£ Tables de parcours:")
        path_tables = ['learning_paths', 'learning_path_steps', 'student_learning_paths']
        
        for table_name in path_tables:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"   üìã {table_name}: {count} lignes")
                
                if count > 0:
                    # Voir la structure
                    cursor.execute(f"PRAGMA table_info({table_name})")
                    columns = cursor.fetchall()
                    print(f"      Colonnes: {[col[1] for col in columns]}")
                    
            except Exception as e:
                print(f"   ‚ùå {table_name}: {e}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")

if __name__ == "__main__":
    check_real_structure()







