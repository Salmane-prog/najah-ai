#!/usr/bin/env python3
"""
Script pour ajouter les colonnes subject et tags √† la table notes
"""

import sqlite3
import os

def fix_notes_table():
    """Ajouter les colonnes subject et tags √† la table notes"""
    try:
        print("üîß CORRECTION DE LA TABLE NOTES")
        print("=" * 40)
        
        # Chemin vers la base de donn√©es
        db_path = "F:/IMT/stage/Yancode/Najah__AI/data/app.db"
        
        if not os.path.exists(db_path):
            print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
            return
        
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # V√©rifier la structure actuelle de la table
        print("\n1. V√©rification de la structure actuelle...")
        cursor.execute("PRAGMA table_info(notes)")
        columns = cursor.fetchall()
        
        print(f"   Colonnes actuelles:")
        for col in columns:
            print(f"      - {col[1]} ({col[2]})")
        
        # V√©rifier si la colonne subject existe
        subject_exists = any(col[1] == 'subject' for col in columns)
        
        if not subject_exists:
            print("\n2. Ajout de la colonne subject...")
            cursor.execute("ALTER TABLE notes ADD COLUMN subject TEXT")
            print("   ‚úÖ Colonne subject ajout√©e")
        else:
            print("\n2. Colonne subject existe d√©j√†")
        
        # V√©rifier si la colonne tags existe
        tags_exists = any(col[1] == 'tags' for col in columns)
        
        if not tags_exists:
            print("\n3. Ajout de la colonne tags...")
            cursor.execute("ALTER TABLE notes ADD COLUMN tags TEXT")
            print("   ‚úÖ Colonne tags ajout√©e")
        else:
            print("\n3. Colonne tags existe d√©j√†")
        
        # V√©rifier la structure finale
        print("\n4. V√©rification de la structure finale...")
        cursor.execute("PRAGMA table_info(notes)")
        columns = cursor.fetchall()
        
        print(f"   Colonnes finales:")
        for col in columns:
            print(f"      - {col[1]} ({col[2]})")
        
        # Commit et fermer
        conn.commit()
        conn.close()
        
        print("\n" + "=" * 40)
        print("üéâ CORRECTION DE LA TABLE NOTES TERMIN√âE!")
        print("‚úÖ La table notes est maintenant compatible avec le mod√®le UserNote!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction: {e}")

if __name__ == "__main__":
    fix_notes_table() 