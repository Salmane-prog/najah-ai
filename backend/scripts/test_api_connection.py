#!/usr/bin/env python3
"""
Script pour tester la connexion √† l'API de messagerie
"""

import requests
import json

def test_api_connection():
    """Tester la connexion √† l'API."""
    base_url = "http://localhost:8000"
    
    print("=== TEST DE CONNEXION API ===")
    
    # Test 1: V√©rifier si le serveur r√©pond
    try:
        response = requests.get(f"{base_url}/docs")
        print(f"‚úÖ Serveur accessible: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå Serveur non accessible - V√©rifiez que le backend est d√©marr√©")
        return
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {str(e)}")
        return
    
    # Test 2: V√©rifier l'endpoint de messagerie (sans auth)
    try:
        response = requests.get(f"{base_url}/api/v1/teacher_messaging/conversations")
        print(f"üì° Endpoint messagerie: {response.status_code}")
        if response.status_code == 401:
            print("‚úÖ Endpoint prot√©g√© (normal)")
        else:
            print(f"‚ö†Ô∏è  Status inattendu: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur endpoint: {str(e)}")
    
    # Test 3: V√©rifier les headers CORS
    try:
        response = requests.options(f"{base_url}/api/v1/teacher_messaging/conversations")
        print(f"üåê CORS headers: {response.status_code}")
        if 'access-control-allow-origin' in response.headers:
            print("‚úÖ CORS configur√©")
        else:
            print("‚ö†Ô∏è  CORS non configur√©")
    except Exception as e:
        print(f"‚ùå Erreur CORS: {str(e)}")
    
    print("\n=== RECOMMANDATIONS ===")
    print("1. V√©rifiez que le backend est d√©marr√© sur le port 8000")
    print("2. V√©rifiez que le frontend utilise la bonne URL d'API")
    print("3. V√©rifiez que l'authentification fonctionne")
    print("4. V√©rifiez les logs du navigateur pour plus de d√©tails")

if __name__ == "__main__":
    test_api_connection() 