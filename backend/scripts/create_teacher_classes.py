#!/usr/bin/env python3
"""
Script pour cr√©er des classes et assigner des √©l√®ves au professeur teacher@test.com
"""

import sqlite3
import os
from datetime import datetime

def create_teacher_classes():
    print("üè´ Cr√©ation de classes pour teacher@test.com...")
    
    # Chemin vers la base de donn√©es
    db_path = "data/app.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. R√©cup√©rer l'ID du professeur
        cursor.execute("SELECT id FROM users WHERE email = 'teacher@test.com'")
        teacher_result = cursor.fetchone()
        
        if not teacher_result:
            print("‚ùå Professeur teacher@test.com non trouv√©")
            return
        
        teacher_id = teacher_result[0]
        print(f"‚úÖ Professeur trouv√©: ID={teacher_id}")
        
        # 2. Cr√©er des classes pour le professeur
        classes_data = [
            ("Math√©matiques Avanc√©es", "advanced", "Math√©matiques", teacher_id),
            ("Fran√ßais Litt√©raire", "intermediate", "Fran√ßais", teacher_id),
            ("Sciences Exp√©rimentales", "beginner", "Sciences", teacher_id),
            ("Histoire Moderne", "intermediate", "Histoire", teacher_id)
        ]
        
        created_classes = []
        for class_name, level, subject, teacher_id in classes_data:
            cursor.execute("""
                INSERT INTO class_groups (name, level, subject, teacher_id, created_at)
                VALUES (?, ?, ?, ?, ?)
            """, (class_name, level, subject, teacher_id, datetime.utcnow()))
            
            class_id = cursor.lastrowid
            created_classes.append((class_id, class_name))
            print(f"   ‚úÖ Classe cr√©√©e: {class_name} (ID: {class_id})")
        
        # 3. R√©cup√©rer tous les √©l√®ves
        cursor.execute("SELECT id FROM users WHERE role = 'student'")
        students = cursor.fetchall()
        student_ids = [student[0] for student in students]
        
        print(f"\nüë• {len(student_ids)} √©l√®ves trouv√©s")
        
        # 4. Assigner les √©l√®ves aux classes
        assignments = [
            # Math√©matiques Avanc√©es (classe 1)
            (student_ids[0], created_classes[0][0]),  # student1
            (student_ids[1], created_classes[0][0]),  # student2
            (student_ids[2], created_classes[0][0]),  # student3
            
            # Fran√ßais Litt√©raire (classe 2)
            (student_ids[3], created_classes[1][0]),  # student_test
            (student_ids[4], created_classes[1][0]),  # marie.dubois
            (student_ids[5], created_classes[1][0]),  # jean.martin
            
            # Sciences Exp√©rimentales (classe 3)
            (student_ids[6], created_classes[2][0]),  # sophie.bernard
            (student_ids[7], created_classes[2][0]),  # pierre.durand
        ]
        
        for student_id, class_id in assignments:
            cursor.execute("""
                INSERT INTO class_students (student_id, class_id, enrolled_at)
                VALUES (?, ?, ?)
            """, (student_id, class_id, datetime.utcnow()))
            print(f"   ‚úÖ √âl√®ve {student_id} assign√© √† la classe {class_id}")
        
        conn.commit()
        print(f"\n‚úÖ {len(created_classes)} classes cr√©√©es avec {len(assignments)} assignations d'√©l√®ves")
        
        # 5. V√©rifier les classes cr√©√©es
        cursor.execute("""
            SELECT cg.id, cg.name, cg.level, cg.subject, COUNT(cs.student_id) as student_count
            FROM class_groups cg
            LEFT JOIN class_students cs ON cg.id = cs.class_id
            WHERE cg.teacher_id = ?
            GROUP BY cg.id
        """, (teacher_id,))
        
        classes_info = cursor.fetchall()
        print(f"\nüìä Classes du professeur:")
        for class_info in classes_info:
            print(f"   - {class_info[1]} ({class_info[2]}): {class_info[4]} √©l√®ves")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    create_teacher_classes() 