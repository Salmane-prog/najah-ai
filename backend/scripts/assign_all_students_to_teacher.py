#!/usr/bin/env python3
"""
Script pour assigner tous les √©l√®ves au professeur teacher@test.com
"""

import sqlite3
import os
from datetime import datetime

def assign_all_students_to_teacher():
    print("üë• Assignation de tous les √©l√®ves au professeur teacher@test.com...")
    
    # Chemin vers la base de donn√©es
    db_path = "data/app.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e: {db_path}")
        return
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. R√©cup√©rer l'ID du professeur
        cursor.execute("SELECT id FROM users WHERE email = 'teacher@test.com'")
        teacher_result = cursor.fetchone()
        
        if not teacher_result:
            print("‚ùå Professeur teacher@test.com non trouv√©")
            return
        
        teacher_id = teacher_result[0]
        print(f"‚úÖ Professeur trouv√©: ID={teacher_id}")
        
        # 2. V√©rifier s'il a d√©j√† des classes
        cursor.execute("SELECT id, name FROM class_groups WHERE teacher_id = ?", (teacher_id,))
        existing_classes = cursor.fetchall()
        
        if not existing_classes:
            print("‚ö†Ô∏è Aucune classe trouv√©e pour le professeur. Cr√©ation d'une classe par d√©faut...")
            
            # Cr√©er une classe par d√©faut
            cursor.execute("""
                INSERT INTO class_groups (name, level, subject, teacher_id, created_at)
                VALUES (?, ?, ?, ?, ?)
            """, ("Classe G√©n√©rale", "intermediate", "G√©n√©ral", teacher_id, datetime.utcnow()))
            
            class_id = cursor.lastrowid
            print(f"‚úÖ Classe cr√©√©e: Classe G√©n√©rale (ID: {class_id})")
            existing_classes = [(class_id, "Classe G√©n√©rale")]
        else:
            print(f"‚úÖ {len(existing_classes)} classes trouv√©es pour le professeur")
            for class_info in existing_classes:
                print(f"   - {class_info[1]} (ID: {class_info[0]})")
        
        # 3. R√©cup√©rer tous les √©l√®ves
        cursor.execute("SELECT id, username, email FROM users WHERE role = 'student'")
        students = cursor.fetchall()
        print(f"\nüë• {len(students)} √©l√®ves trouv√©s")
        
        # 4. Assigner tous les √©l√®ves √† la premi√®re classe du professeur
        class_id = existing_classes[0][0]
        assignments_count = 0
        
        for student in students:
            student_id = student[0]
            student_username = student[1]
            
            # V√©rifier si l'√©l√®ve est d√©j√† assign√© √† cette classe
            cursor.execute("""
                SELECT COUNT(*) FROM class_students 
                WHERE student_id = ? AND class_id = ?
            """, (student_id, class_id))
            
            already_assigned = cursor.fetchone()[0] > 0
            
            if not already_assigned:
                cursor.execute("""
                    INSERT INTO class_students (student_id, class_id, enrolled_at)
                    VALUES (?, ?, ?)
                """, (student_id, class_id, datetime.utcnow()))
                
                print(f"   ‚úÖ √âl√®ve {student_username} assign√© √† la classe")
                assignments_count += 1
            else:
                print(f"   ‚è≠Ô∏è √âl√®ve {student_username} d√©j√† assign√©")
        
        conn.commit()
        print(f"\n‚úÖ {assignments_count} nouveaux √©l√®ves assign√©s au professeur")
        
        # 5. V√©rifier le r√©sultat
        cursor.execute("""
            SELECT COUNT(DISTINCT cs.student_id) as student_count
            FROM class_students cs
            JOIN class_groups cg ON cs.class_id = cg.id
            WHERE cg.teacher_id = ?
        """, (teacher_id,))
        
        total_students = cursor.fetchone()[0]
        print(f"üìä Total √©l√®ves assign√©s au professeur: {total_students}")
        
        # 6. Afficher la liste des √©l√®ves assign√©s
        cursor.execute("""
            SELECT u.username, u.email, cg.name as class_name
            FROM class_students cs
            JOIN users u ON cs.student_id = u.id
            JOIN class_groups cg ON cs.class_id = cg.id
            WHERE cg.teacher_id = ?
            ORDER BY u.username
        """, (teacher_id,))
        
        assigned_students = cursor.fetchall()
        print(f"\nüìã √âl√®ves assign√©s au professeur:")
        for student in assigned_students:
            print(f"   - {student[0]} ({student[1]}) dans {student[2]}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    assign_all_students_to_teacher() 