#!/usr/bin/env python3
"""
Script d'initialisation complet de la base de donn√©es
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.database import Base, engine, SessionLocal
from models.user import User, UserRole
from models.badge import Badge, UserBadge
from models.class_group import ClassGroup
from models.content import Content
from models.learning_path import LearningPath, StudentLearningPath
from models.quiz import Quiz, Question, QuizResult, QuizAnswer
from models.thread import Thread
from models.message import Message
from core.security import get_password_hash
from datetime import datetime
import random

# Cr√©er toutes les tables
Base.metadata.create_all(bind=engine)

def init_complete_database():
    """Initialise la base de donn√©es avec toutes les donn√©es de test."""
    db = SessionLocal()
    
    try:
        print("üöÄ Initialisation compl√®te de la base de donn√©es...")
        
        # 1. Cr√©er les badges
        print("üèÖ Cr√©ation des badges...")
        badges = [
            Badge(name="Premier Quiz", description="A compl√©t√© son premier quiz", image_url="üéØ"),
            Badge(name="Excellence", description="Score parfait sur un quiz", image_url="‚≠ê"),
            Badge(name="Pers√©v√©rant", description="A compl√©t√© 10 quiz", image_url="üí™"),
            Badge(name="Curieux", description="A explor√© 5 contenus diff√©rents", image_url="üîç"),
            Badge(name="Cr√©atif", description="A cr√©√© un contenu original", image_url="üé®")
        ]
        for badge in badges:
            if not db.query(Badge).filter_by(name=badge.name).first():
                db.add(badge)
        db.commit()
        
        # 3. Cr√©er les classes
        print("üë• Cr√©ation des classes...")
        classes = [
            ClassGroup(name="6√®me A", description="Classe de 6√®me ann√©e A", teacher_id=4),  # teacher1
            ClassGroup(name="6√®me B", description="Classe de 6√®me ann√©e B", teacher_id=4),  # teacher1
            ClassGroup(name="5√®me A", description="Classe de 5√®me ann√©e A", teacher_id=4)   # teacher1
        ]
        for class_group in classes:
            if not db.query(ClassGroup).filter_by(name=class_group.name).first():
                db.add(class_group)
        db.commit()
        
        # 4. Cr√©er les utilisateurs
        print("üë§ Cr√©ation des utilisateurs...")
        users = [
            User(username="student1", email="student1@example.com", hashed_password=get_password_hash("studentpass"), role=UserRole.student),
            User(username="student2", email="student2@example.com", hashed_password=get_password_hash("studentpass"), role=UserRole.student),
            User(username="student3", email="student3@example.com", hashed_password=get_password_hash("studentpass"), role=UserRole.student),
            User(username="teacher1", email="teacher1@example.com", hashed_password=get_password_hash("teacherpass"), role=UserRole.teacher),
            User(username="admin1", email="admin1@example.com", hashed_password=get_password_hash("adminpass"), role=UserRole.admin),
        ]
        for user in users:
            if not db.query(User).filter_by(username=user.username).first():
                db.add(user)
        db.commit()
        
        # 5. Cr√©er les contenus (temporairement d√©sactiv√©)
        print("üìñ Cr√©ation des contenus... (d√©sactiv√©)")
        # contents = [
        #     Content(title="Introduction aux fractions", description="Apprendre les bases des fractions", subject="Math√©matiques", level="beginner"),
        #     Content(title="La conjugaison du pr√©sent", description="R√®gles de conjugaison au pr√©sent", subject="Fran√ßais", level="beginner"),
        #     Content(title="La R√©volution fran√ßaise", description="√âv√©nements de la R√©volution fran√ßaise", subject="Histoire", level="intermediate"),
        #     Content(title="Les cellules vivantes", description="Structure et fonctionnement des cellules", subject="Sciences", level="intermediate")
        # ]
        # for content in contents:
        #     if not db.query(Content).filter_by(title=content.title).first():
        #         db.add(content)
        # db.commit()
        
        # 7. Cr√©er les parcours d'apprentissage
        print("üõ§Ô∏è Cr√©ation des parcours d'apprentissage...")
        learning_paths = [
            LearningPath(name="Parcours Math√©matiques", description="Parcours complet en math√©matiques"),
            LearningPath(name="Parcours Fran√ßais", description="Parcours complet en fran√ßais"),
            LearningPath(name="Parcours Histoire", description="Parcours complet en histoire")
        ]
        for path in learning_paths:
            if not db.query(LearningPath).filter_by(name=path.name).first():
                db.add(path)
        db.commit()
        
        # 8. Cr√©er les quiz
        print("üéØ Cr√©ation des quiz...")
        quizzes = [
            Quiz(title="Quiz Fractions", description="Test sur les fractions", subject="Math√©matiques", level="beginner", time_limit=30),
            Quiz(title="Quiz Conjugaison", description="Test sur la conjugaison", subject="Fran√ßais", level="beginner", time_limit=25),
            Quiz(title="Quiz R√©volution", description="Test sur la R√©volution fran√ßaise", subject="Histoire", level="intermediate", time_limit=35),
            Quiz(title="Quiz Cellules", description="Test sur les cellules", subject="Sciences", level="intermediate", time_limit=30)
        ]
        for quiz in quizzes:
            if not db.query(Quiz).filter_by(title=quiz.title).first():
                db.add(quiz)
        db.commit()
        
        # 9. Cr√©er les questions pour chaque quiz
        print("‚ùì Cr√©ation des questions...")
        questions_data = [
            # Questions pour le quiz Fractions
            {"quiz_title": "Quiz Fractions", "questions": [
                {"text": "Qu'est-ce qu'une fraction ?", "type": "multiple_choice", "options": ["Une division", "Une multiplication", "Une addition", "Une soustraction"], "correct_answer": "Une division"},
                {"text": "1/2 + 1/2 = ?", "type": "multiple_choice", "options": ["1/4", "1/2", "1", "2"], "correct_answer": "1"},
                {"text": "3/4 est-il plus grand que 1/2 ?", "type": "multiple_choice", "options": ["Oui", "Non", "√âgal", "Impossible √† dire"], "correct_answer": "Oui"}
            ]},
            # Questions pour le quiz Conjugaison
            {"quiz_title": "Quiz Conjugaison", "questions": [
                {"text": "Je (manger) au pr√©sent", "type": "multiple_choice", "options": ["mange", "manges", "mangent", "mangeons"], "correct_answer": "mange"},
                {"text": "Tu (finir) au pr√©sent", "type": "multiple_choice", "options": ["finis", "finit", "finissons", "finissez"], "correct_answer": "finis"},
                {"text": "Il (prendre) au pr√©sent", "type": "multiple_choice", "options": ["prend", "prends", "prennent", "prenons"], "correct_answer": "prend"}
            ]},
            # Questions pour le quiz R√©volution
            {"quiz_title": "Quiz R√©volution", "questions": [
                {"text": "En quelle ann√©e a eu lieu la prise de la Bastille ?", "type": "multiple_choice", "options": ["1789", "1790", "1788", "1791"], "correct_answer": "1789"},
                {"text": "Qui √©tait le roi de France en 1789 ?", "type": "multiple_choice", "options": ["Louis XIV", "Louis XV", "Louis XVI", "Louis XVII"], "correct_answer": "Louis XVI"},
                {"text": "Qu'est-ce que les √âtats g√©n√©raux ?", "type": "multiple_choice", "options": ["Une prison", "Une assembl√©e", "Une arm√©e", "Une √©cole"], "correct_answer": "Une assembl√©e"}
            ]},
            # Questions pour le quiz Cellules
            {"quiz_title": "Quiz Cellules", "questions": [
                {"text": "Qu'est-ce qu'une cellule ?", "type": "multiple_choice", "options": ["Un organe", "L'unit√© de base du vivant", "Un tissu", "Un syst√®me"], "correct_answer": "L'unit√© de base du vivant"},
                {"text": "Quel organite produit l'√©nergie ?", "type": "multiple_choice", "options": ["Le noyau", "La mitochondrie", "Le r√©ticulum", "Le lysosome"], "correct_answer": "La mitochondrie"},
                {"text": "Qu'est-ce que l'ADN ?", "type": "multiple_choice", "options": ["Un sucre", "Un acide nucl√©ique", "Une prot√©ine", "Un lipide"], "correct_answer": "Un acide nucl√©ique"}
            ]}
        ]
        
        for quiz_data in questions_data:
            quiz = db.query(Quiz).filter_by(title=quiz_data["quiz_title"]).first()
            if quiz:
                for q_data in quiz_data["questions"]:
                    question = Question(
                        quiz_id=quiz.id,
                        question_text=q_data["text"],
                        question_type=q_data["type"],
                        options=q_data["options"],
                        correct_answer=q_data["correct_answer"]
                    )
                    db.add(question)
        db.commit()
        
        print("‚úÖ Base de donn√©es initialis√©e avec succ√®s !")
        print("   üë§ Utilisateurs cr√©√©s")
        print("   üèÜ Badges et cat√©gories cr√©√©s")
        print("   üë• Classes cr√©√©es")
        print("   üìö Contenus cr√©√©s")
        print("   üõ§Ô∏è Parcours d'apprentissage cr√©√©s")
        print("   üéØ Quiz et questions cr√©√©s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    init_complete_database() 