#!/usr/bin/env python3
"""
Script pour corriger les donn√©es et l'authentification
"""

import sqlite3
import os
from datetime import datetime, timedelta
import random

def fix_data_and_auth():
    """Corriger les donn√©es et l'authentification"""
    
    print("üîß Correction des donn√©es et authentification...")
    
    # Chemin vers la base de donn√©es
    db_path = "data/app.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå Base de donn√©es non trouv√©e : {db_path}")
        return
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. Cr√©er l'utilisateur professeur avec le bon hash
        print("üë§ Cr√©ation de l'utilisateur professeur...")
        cursor.execute("""
            INSERT OR REPLACE INTO users (id, username, email, hashed_password, role, is_active)
            VALUES (1, 'marie.dubois', 'marie.dubois@najah.ai', 
                   '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/8HqHh6.', 
                   'teacher', 1)
        """)
        
        # 2. Cr√©er des √©tudiants
        print("üë• Cr√©ation des √©tudiants...")
        students_data = [
            (2, 'jean.martin', 'jean.martin@najah.ai', 'student'),
            (3, 'sophie.bernard', 'sophie.bernard@najah.ai', 'student'),
            (4, 'pierre.durand', 'pierre.durand@najah.ai', 'student'),
            (5, 'marie.laurent', 'marie.laurent@najah.ai', 'student')
        ]
        
        for student_id, username, email, role in students_data:
            cursor.execute("""
                INSERT OR REPLACE INTO users (id, username, email, hashed_password, role, is_active)
                VALUES (?, ?, ?, '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/8HqHh6.', ?, 1)
            """, (student_id, username, email, role))
        
        # 3. Cr√©er des badges
        print("üèÜ Cr√©ation des badges...")
        badges_data = [
            (1, 'Premier Quiz', 'A compl√©t√© son premier quiz avec succ√®s', 'quiz_completed >= 1', '/badges/first-quiz.png', 0),
            (2, '√âl√®ve Assidu', 'A particip√© √† 10 sessions d\'apprentissage', 'learning_sessions >= 10', '/badges/dedicated-student.png', 0),
            (3, 'Ma√Ætre des Sciences', 'A obtenu 100% dans un quiz de sciences', 'science_quiz_score = 100', '/badges/science-master.png', 0),
            (4, 'Litt√©raire Confirm√©', 'A compl√©t√© 5 quiz de litt√©rature', 'literature_quizzes >= 5', '/badges/literature-expert.png', 0)
        ]
        
        for badge_id, name, description, criteria, image_url, secret in badges_data:
            cursor.execute("""
                INSERT OR REPLACE INTO badges (id, name, description, criteria, image_url, secret)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (badge_id, name, description, criteria, image_url, secret))
        
        # 4. Attribuer des badges aux √©tudiants
        print("üéñÔ∏è Attribution des badges...")
        user_badges_data = [
            (2, 1, 1.0, datetime.now() - timedelta(days=5)),  # Jean - Premier Quiz
            (3, 1, 1.0, datetime.now() - timedelta(days=3)),  # Sophie - Premier Quiz
            (3, 2, 1.0, datetime.now() - timedelta(days=2)),  # Sophie - √âl√®ve Assidu
            (4, 1, 1.0, datetime.now() - timedelta(days=1)),  # Pierre - Premier Quiz
            (5, 1, 1.0, datetime.now() - timedelta(hours=12)), # Marie - Premier Quiz
            (5, 3, 1.0, datetime.now() - timedelta(hours=6))   # Marie - Ma√Ætre des Sciences
        ]
        
        for user_id, badge_id, progression, awarded_at in user_badges_data:
            cursor.execute("""
                INSERT OR REPLACE INTO user_badge (user_id, badge_id, progression, awarded_at)
                VALUES (?, ?, ?, ?)
            """, (user_id, badge_id, progression, awarded_at))
        
        # 5. Cr√©er des classes
        print("üè´ Cr√©ation des classes...")
        classes_data = [
            (1, '6√®me A', 'Classe de 6√®me A', 1),
            (2, '6√®me B', 'Classe de 6√®me B', 1),
            (3, '5√®me A', 'Classe de 5√®me A', 1)
        ]
        
        for class_id, name, description, teacher_id in classes_data:
            cursor.execute("""
                INSERT OR REPLACE INTO class_groups (id, name, description, teacher_id)
                VALUES (?, ?, ?, ?)
            """, (class_id, name, description, teacher_id))
        
        # 6. Assigner des √©tudiants aux classes
        print("üë• Assignation des √©tudiants aux classes...")
        class_students_data = [
            (1, 2), (1, 3),  # 6√®me A : Jean, Sophie
            (2, 4), (2, 5),  # 6√®me B : Pierre, Marie
            (3, 2), (3, 4)   # 5√®me A : Jean, Pierre
        ]
        
        for class_id, student_id in class_students_data:
            cursor.execute("""
                INSERT OR REPLACE INTO class_students (class_id, student_id)
                VALUES (?, ?)
            """, (class_id, student_id))
        
        # 7. Cr√©er des quiz
        print("üìù Cr√©ation des quiz...")
        quizzes_data = [
            (1, 'Quiz de Math√©matiques', 'Quiz sur les fractions', 'Math√©matiques', 30, 10.0, 1),
            (2, 'Quiz de Fran√ßais', 'Quiz sur la grammaire', 'Fran√ßais', 20, 8.0, 1),
            (3, 'Quiz de Sciences', 'Quiz sur la biologie', 'Sciences', 25, 12.0, 1)
        ]
        
        for quiz_id, title, description, subject, time_limit, total_points, created_by in quizzes_data:
            cursor.execute("""
                INSERT OR REPLACE INTO quizzes (id, title, description, subject, time_limit, total_points, created_by)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (quiz_id, title, description, subject, time_limit, total_points, created_by))
        
        # 8. Cr√©er des r√©sultats de quiz
        print("üìä Cr√©ation des r√©sultats de quiz...")
        quiz_results_data = [
            (2, 1, 8, 10, 80.0, datetime.now() - timedelta(days=5)),  # Jean - Math
            (3, 1, 9, 10, 90.0, datetime.now() - timedelta(days=3)),  # Sophie - Math
            (4, 2, 7, 8, 87.5, datetime.now() - timedelta(days=2)),   # Pierre - Fran√ßais
            (5, 3, 10, 12, 83.3, datetime.now() - timedelta(days=1))  # Marie - Sciences
        ]
        
        for student_id, quiz_id, score, max_score, percentage, completed_at in quiz_results_data:
            cursor.execute("""
                INSERT OR REPLACE INTO quiz_results (student_id, quiz_id, score, max_score, percentage, completed_at, is_completed)
                VALUES (?, ?, ?, ?, ?, ?, 1)
            """, (student_id, quiz_id, score, max_score, percentage, completed_at))
        
        # Valider les changements
        conn.commit()
        print("‚úÖ Donn√©es corrig√©es avec succ√®s !")
        
        # Afficher les informations de connexion
        print("\nüîë INFORMATIONS DE CONNEXION :")
        print("Email : marie.dubois@najah.ai")
        print("Mot de passe : teacher123")
        print("\nüìä DONN√âES CR√â√âES :")
        print("- 1 professeur")
        print("- 4 √©tudiants")
        print("- 4 badges")
        print("- 3 classes")
        print("- 3 quiz")
        print("- 4 r√©sultats de quiz")
        
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        conn.rollback()
    finally:
        conn.close()

if __name__ == "__main__":
    fix_data_and_auth()