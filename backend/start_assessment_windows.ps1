#!/usr/bin/env pwsh
<#
.SYNOPSIS
    üéØ Script de d√©marrage du syst√®me d'√©valuation initiale NAJAH AI
    
.DESCRIPTION
    Ce script v√©rifie l'environnement, teste le syst√®me et d√©marre le serveur
    d'√©valuation initiale pour les √©tudiants.
    
.PARAMETER SkipTest
    Ignore le test rapide du syst√®me
    
.PARAMETER Port
    Port sur lequel d√©marrer le serveur (d√©faut: 8000)
    
.EXAMPLE
    .\start_assessment_windows.ps1
    
.EXAMPLE
    .\start_assessment_windows.ps1 -SkipTest -Port 8001
#>

param(
    [switch]$SkipTest,
    [int]$Port = 8000
)

# Configuration de l'encodage pour les emojis
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "üéØ SYST√àME D'√âVALUATION INITIALE NAJAH AI" -ForegroundColor Yellow
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# Fonction pour afficher les messages avec couleurs
function Write-Status {
    param(
        [string]$Message,
        [string]$Type = "Info"
    )
    
    switch ($Type) {
        "Success" { Write-Host "‚úÖ $Message" -ForegroundColor Green }
        "Warning" { Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow }
        "Error" { Write-Host "‚ùå $Message" -ForegroundColor Red }
        "Info" { Write-Host "üìã $Message" -ForegroundColor Blue }
        default { Write-Host "$Message" }
    }
}

function Write-Step {
    param([string]$Message)
    Write-Host ""
    Write-Host "üîß $Message" -ForegroundColor Magenta
    Write-Host ""
}

# √âtape 1: V√©rification de l'environnement
Write-Step "V√©rification de l'environnement..."

# V√©rifier Python
try {
    $pythonVersion = python --version 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Status "Python d√©tect√©: $pythonVersion" "Success"
    } else {
        throw "Python non trouv√©"
    }
} catch {
    Write-Status "ERREUR: Python n'est pas install√© ou n'est pas dans le PATH" "Error"
    Write-Host "   Veuillez installer Python depuis https://python.org" -ForegroundColor Red
    Write-Host ""
    Read-Host "Appuyez sur Entr√©e pour quitter"
    exit 1
}

# √âtape 2: V√©rification des d√©pendances
Write-Step "V√©rification des d√©pendances..."

try {
    python -c "import fastapi, uvicorn, sqlalchemy" 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Status "Toutes les d√©pendances sont install√©es" "Success"
    } else {
        throw "D√©pendances manquantes"
    }
} catch {
    Write-Status "Certains packages ne sont pas install√©s" "Warning"
    Write-Host "Installation automatique en cours..." -ForegroundColor Yellow
    Write-Host ""
    
    try {
        pip install fastapi uvicorn sqlalchemy
        if ($LASTEXITCODE -eq 0) {
            Write-Status "D√©pendances install√©es avec succ√®s" "Success"
        } else {
            throw "√âchec de l'installation"
        }
    } catch {
        Write-Status "ERREUR: Impossible d'installer les d√©pendances" "Error"
        Write-Host "   V√©rifiez votre connexion internet et relancez" -ForegroundColor Red
        Write-Host ""
        Read-Host "Appuyez sur Entr√©e pour quitter"
        exit 1
    }
}

# √âtape 3: V√©rification de la base de donn√©es
Write-Step "V√©rification de la base de donn√©es..."

$dbPath = "data\app.db"
if (Test-Path $dbPath) {
    Write-Status "Base de donn√©es trouv√©e" "Success"
} else {
    Write-Status "Base de donn√©es non trouv√©e" "Warning"
    Write-Host "Cr√©ation automatique en cours..." -ForegroundColor Yellow
    Write-Host ""
    
    try {
        python -c "from core.database import engine; from models import Base; Base.metadata.create_all(bind=engine)"
        if ($LASTEXITCODE -eq 0) {
            Write-Status "Base de donn√©es cr√©√©e avec succ√®s" "Success"
        } else {
            throw "√âchec de la cr√©ation"
        }
    } catch {
        Write-Status "ERREUR: Impossible de cr√©er la base de donn√©es" "Error"
        Write-Host "   V√©rifiez les permissions du dossier" -ForegroundColor Red
        Write-Host ""
        Read-Host "Appuyez sur Entr√©e pour quitter"
        exit 1
    }
}

# √âtape 4: Test rapide du syst√®me (optionnel)
if (-not $SkipTest) {
    Write-Step "Test rapide du syst√®me..."
    
    try {
        python quick_test.py
        if ($LASTEXITCODE -eq 0) {
            Write-Status "Test rapide r√©ussi" "Success"
        } else {
            Write-Status "Le test rapide a rencontr√© des probl√®mes" "Warning"
            Write-Host "   Le serveur peut quand m√™me fonctionner" -ForegroundColor Yellow
            Write-Host ""
            
            $continue = Read-Host "Voulez-vous continuer quand m√™me ? (O/N)"
            if ($continue -notmatch "^[Oo]") {
                Write-Host ""
                Write-Status "D√©marrage annul√©" "Error"
                Read-Host "Appuyez sur Entr√©e pour quitter"
                exit 1
            }
        }
    } catch {
        Write-Status "Impossible d'ex√©cuter le test rapide" "Warning"
        Write-Host "   Continuons avec le d√©marrage du serveur" -ForegroundColor Yellow
    }
}

# √âtape 5: D√©marrage du serveur
Write-Step "D√©marrage du serveur d'√©valuation..."

Write-Host "üìç Le serveur sera accessible sur:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ API: http://localhost:$Port" -ForegroundColor White
Write-Host "   ‚Ä¢ Documentation: http://localhost:$Port/docs" -ForegroundColor White
Write-Host "   ‚Ä¢ Test: http://localhost:$Port/test-assessment" -ForegroundColor White
Write-Host ""
Write-Host "üì± Pour tester le frontend:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Page d'√©valuation: http://localhost:3001/dashboard/student/assessment" -ForegroundColor White
Write-Host ""
Write-Host "‚ö†Ô∏è  Appuyez sur Ctrl+C pour arr√™ter le serveur" -ForegroundColor Yellow
Write-Host ""

# Modifier le port dans le script de d√©marrage si n√©cessaire
if ($Port -ne 8000) {
    Write-Host "üîÑ Modification du port √† $Port..." -ForegroundColor Yellow
    
    # Cr√©er une copie temporaire avec le bon port
    $startScript = Get-Content "start_assessment_system.py" -Raw
    $startScript = $startScript -replace "8000", $Port
    $startScript | Out-File "start_assessment_system_temp.py" -Encoding UTF8
    
    try {
        python start_assessment_system_temp.py
    } finally {
        # Nettoyer le fichier temporaire
        if (Test-Path "start_assessment_system_temp.py") {
            Remove-Item "start_assessment_system_temp.py"
        }
    }
} else {
    # D√©marrer le serveur avec le port par d√©faut
    python start_assessment_system.py
}

Write-Host ""
Write-Status "Serveur arr√™t√©" "Info"
Read-Host "Appuyez sur Entr√©e pour quitter"





