import { apiClient } from '@/utils/api';

export interface RealStudentPerformance {
  id: number;
  name: string;
  studyTime: number;
  quizzesPassed: string;
  averageScore: number;
  engagement: number;
}

export interface RealClassOverview {
  activeStudents: number;
  averageScore: number;
  averageEngagement: number;
  averageStudyTime: number;
}

export interface RealProgressData {
  week: string;
  averageScore: number;
  testsCompleted: number;
}

export interface RealSubjectData {
  month: string;
  testsCreated: number;
  testsCompleted: number;
}

export interface RealAIPrediction {
  studentId: number;
  studentName: string;
  predictionType: string;
  prediction: number;
  confidence: number;
  riskLevel: 'low' | 'medium' | 'high';
  recommendation: string;
}

export interface RealLearningBlockage {
  studentId: number;
  studentName: string;
  subject: string;
  topic: string;
  difficulty: string;
  level: number;
  tags: string[];
  date: string;
  failedAttempts: number;
  averageScore: number;
  worstScore: number;
  timeSpent: number;
  confidence: number;
}

export const realAnalyticsService = {
  // R√©cup√©rer la vue d'ensemble de la classe
  async getClassOverview(): Promise<RealClassOverview> {
    try {
      const response = await apiClient.get('/api/v1/analytics/class-overview');
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la vue d\'ensemble:', error);
      // Retourner des donn√©es par d√©faut en cas d'erreur
      return {
        activeStudents: 0,
        averageScore: 0,
        averageEngagement: 0,
        averageStudyTime: 0
      };
    }
  },

  // R√©cup√©rer les performances d√©taill√©es des √©tudiants
  async getStudentPerformances(): Promise<RealStudentPerformance[]> {
    try {
      const response = await apiClient.get('/api/v1/analytics/student-performances');
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des performances:', error);
      return [];
    }
  },

  // R√©cup√©rer les donn√©es de progression hebdomadaire
  async getWeeklyProgress(): Promise<RealProgressData[]> {
    try {
      const response = await apiClient.get('/api/v1/analytics/weekly-progress');
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration de la progression:', error);
      return [];
    }
  },

  // R√©cup√©rer les statistiques mensuelles par mati√®re
  async getMonthlyStats(): Promise<RealSubjectData[]> {
    try {
      const response = await apiClient.get('/api/v1/analytics/monthly-stats');
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des stats mensuelles:', error);
      return [];
    }
  },

  // R√©cup√©rer les pr√©dictions IA
  async getAIPredictions(): Promise<RealAIPrediction[]> {
    try {
      const response = await apiClient.get('/api/v1/analytics/ai-predictions');
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des pr√©dictions IA:', error);
      return [];
    }
  },

  // R√©cup√©rer la d√©tection de blocages
  async getLearningBlockages(): Promise<RealLearningBlockage[]> {
    try {
      const response = await apiClient.get('/api/v1/analytics/learning-blockages');
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des blocages:', error);
      return [];
    }
  },

  // R√©cup√©rer les pr√©dictions IA
  async getAIPredictions(): Promise<any[]> {
    try {
      const response = await apiClient.get('/api/v1/analytics/ai-predictions');
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des pr√©dictions IA:', error);
      return [];
    }
  },

  // R√©cup√©rer les analytics d√©taill√©es
  async getDetailedAnalytics(): Promise<any[]> {
    try {
      const response = await apiClient.get('/api/v1/analytics/detailed-analytics');
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des analytics d√©taill√©es:', error);
      return [];
    }
  },

  // R√©cup√©rer les donn√©es de progression hebdomadaire
  async getWeeklyProgress(): Promise<any[]> {
    try {
      console.log('üîç Service: Appel de getWeeklyProgress...');
      const response = await apiClient.get('/api/v1/analytics/weekly-progress');
      console.log('üîç Service: R√©ponse re√ßue:', response.data);
      console.log('üîç Service: Type de r√©ponse:', typeof response.data);
      console.log('üîç Service: Est un tableau:', Array.isArray(response.data));
      return response.data;
    } catch (error) {
      console.error('‚ùå Service: Erreur lors de la r√©cup√©ration de la progression hebdomadaire:', error);
      return [];
    }
  },

  // R√©cup√©rer les statistiques mensuelles
  async getMonthlyStats(): Promise<any[]> {
    try {
      console.log('üîç Service: Appel de getMonthlyStats...');
      const response = await apiClient.get('/api/v1/analytics/monthly-stats');
      console.log('üîç Service: R√©ponse re√ßue:', response.data);
      console.log('üîç Service: Type de r√©ponse:', typeof response.data);
      console.log('üîç Service: Est un tableau:', Array.isArray(response.data));
      return response.data;
    } catch (error) {
      console.error('‚ùå Service: Erreur lors de la r√©cup√©ration des statistiques mensuelles:', error);
      return [];
    }
  },

  // R√©cup√©rer la performance par difficult√©
  async getDifficultyPerformance(): Promise<any[]> {
    try {
      console.log('üîç Service: Appel de getDifficultyPerformance...');
      const response = await apiClient.get('/api/v1/analytics/difficulty-performance');
      console.log('üîç Service: R√©ponse re√ßue:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Service: Erreur lors de la r√©cup√©ration de la performance par difficult√©:', error);
      return [];
    }
  },

  // R√©cup√©rer les tendances d'engagement
  async getEngagementTrends(): Promise<any[]> {
    try {
      console.log('üîç Service: Appel de getEngagementTrends...');
      const response = await apiClient.get('/api/v1/analytics/engagement-trends');
      console.log('üîç Service: R√©ponse re√ßue:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Service: Erreur lors de la r√©cup√©ration des tendances d\'engagement:', error);
      return [];
    }
  },

  // R√©cup√©rer la distribution des scores
  async getScoreDistribution(): Promise<any[]> {
    try {
      console.log('üîç Service: Appel de getScoreDistribution...');
      const response = await apiClient.get('/api/v1/analytics/score-distribution');
      console.log('üîç Service: R√©ponse re√ßue:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Service: Erreur lors de la r√©cup√©ration de la distribution des scores:', error);
      return [];
    }
  },

  // R√©cup√©rer les tendances d'apprentissage
  async getLearningTrends(): Promise<any[]> {
    try {
      console.log('üîç Service: Appel de getLearningTrends...');
      const response = await apiClient.get('/api/v1/analytics/learning-trends');
      console.log('üîç Service: R√©ponse re√ßue:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Service: Erreur lors de la r√©cup√©ration des tendances d\'apprentissage:', error);
      return [];
    }
  },

  // G√©n√©rer un rapport
  async generateReport(reportType: string): Promise<{ success: boolean; message: string }> {
    try {
      const response = await apiClient.post('/api/v1/analytics/generate-report', { type: reportType });
      return { success: true, message: 'Rapport g√©n√©r√© avec succ√®s' };
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration du rapport:', error);
      return { success: false, message: 'Erreur lors de la g√©n√©ration du rapport' };
    }
  }
};

