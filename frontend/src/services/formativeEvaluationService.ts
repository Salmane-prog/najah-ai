// Service pour les √©valuations formatives

export interface FormativeEvaluationRequest {
  title: string;
  subject: string;
  assessment_type: string;
  description: string;
  target_level: string;
  duration_minutes: number;
  max_students: number;
  learning_objectives: string[];
  custom_requirements?: string;
}

export interface AIGeneratedEvaluation {
  title: string;
  description: string;
  assessment_type: string;
  criteria: Array<{
    name: string;
    description: string;
    weight: number;
    max_points: number;
  }>;
  rubric: {
    excellent: { points: number; description: string };
    good: { points: number; description: string };
    satisfactory: { points: number; description: string };
    needs_improvement: { points: number; description: string };
  };
  questions: Array<{
    question: string;
    type: string;
    max_points: number;
  }>;
  instructions: string;
  estimated_duration: number;
  difficulty_level: string;
  success_indicators: string[];
}

export interface FormativeEvaluation {
  id: number;
  title: string;
  description: string;
  assessment_type: string;
  subject: string;
  target_level: string;
  duration_minutes: number;
  max_students: number;
  learning_objectives: string[];
  criteria: any[];
  rubric: any;
  questions: any[];
  instructions: string;
  is_active: boolean;
  created_at: string;
  teacher_id: number;
}

class FormativeEvaluationService {
  // G√©n√©rer une √©valuation avec l'IA
  async generateWithAI(request: FormativeEvaluationRequest): Promise<AIGeneratedEvaluation> {
    // FORCER l'utilisation du g√©n√©rateur local pour tester
    console.log('üß† Utilisation forc√©e du g√©n√©rateur IA local...');
    return this.generateLocalAI(request);
    
    /* Code backend comment√© temporairement
    try {
      console.log('üöÄ Tentative de g√©n√©ration IA via backend...');
      
      // Essayer d'abord le backend
      const response = await this.request('/api/v1/ai-formative-evaluations/generate-evaluation/', {
        method: 'POST',
        body: JSON.stringify(request),
      });
      
      if (response.success) {
        console.log('‚úÖ G√©n√©ration IA backend r√©ussie');
        return response.evaluation;
      } else {
        throw new Error('Erreur lors de la g√©n√©ration IA backend');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Backend IA indisponible, utilisation du g√©n√©rateur local...');
      
      // Fallback : g√©n√©ration locale intelligente
      return this.generateLocalAI(request);
    }
    */
  }

  // G√©n√©rateur IA local avec contenu unique par type
  private generateLocalAI(request: FormativeEvaluationRequest): AIGeneratedEvaluation {
    console.log('üß† G√©n√©ration IA locale pour:', request.assessment_type, 'en', request.subject);
    
    const baseTitle = `${this.getTypeDisplayName(request.assessment_type)} - ${request.subject}`;
    const timestamp = Date.now();
    
    // G√©n√©rer du contenu unique bas√© sur le type, la mati√®re et le timestamp
    const uniqueContent = this.generateUniqueContent(request, timestamp);
    
    return {
      title: baseTitle,
      description: uniqueContent.description,
      assessment_type: request.assessment_type,
      criteria: uniqueContent.criteria,
      rubric: uniqueContent.rubric,
      questions: uniqueContent.questions,
      instructions: uniqueContent.instructions,
      estimated_duration: request.duration_minutes,
      difficulty_level: request.target_level,
      success_indicators: uniqueContent.success_indicators
    };
  }

  // G√©n√©rer du contenu unique pour chaque type
  private generateUniqueContent(request: FormativeEvaluationRequest, timestamp: number) {
    const type = request.assessment_type;
    const subject = request.subject;
    const level = request.target_level;
    
    // Utiliser le timestamp ET la mati√®re pour varier le contenu
    const variation = (timestamp + subject.length + type.length) % 5;
    const subjectVariation = subject.length % 3;
    
    console.log('üîç Variations calcul√©es:', { variation, subjectVariation, subject, type, timestamp });
    
    switch (type) {
      case 'project':
        return this.generateProjectContent(subject, level, variation, subjectVariation);
      case 'presentation':
        return this.generatePresentationContent(subject, level, variation, subjectVariation);
      case 'discussion':
        return this.generateDiscussionContent(subject, level, variation, subjectVariation);
      case 'portfolio':
        return this.generatePortfolioContent(subject, level, variation, subjectVariation);
      case 'observation':
        return this.generateObservationContent(subject, level, variation, subjectVariation);
      case 'self_evaluation':
        return this.generateSelfEvaluationContent(subject, level, variation, subjectVariation);
      default:
        return this.generateProjectContent(subject, level, variation, subjectVariation);
    }
  }

  // Contenu pour Projet de Recherche
  private generateProjectContent(subject: string, level: string, variation: number, subjectVariation: number) {
    console.log('üî¨ G√©n√©ration contenu Projet de Recherche:', { subject, level, variation, subjectVariation });
    
    // Descriptions vari√©es selon la mati√®re
    const descriptions = [
      `√âvaluation formative pour un projet de recherche en ${subject} permettant aux √©tudiants de d√©velopper leurs comp√©tences de recherche et d'analyse.`,
      `Projet de recherche approfondi en ${subject} visant √† renforcer la m√©thodologie scientifique et l'esprit critique.`,
      `Travail de recherche en ${subject} favorisant l'autonomie et la rigueur m√©thodologique des √©tudiants.`,
      `Recherche appliqu√©e en ${subject} encourageant l'innovation et la cr√©ativit√© dans l'approche m√©thodologique.`,
      `Projet d'investigation en ${subject} d√©veloppant la pens√©e analytique et la r√©solution de probl√®mes.`
    ];

    // Crit√®res adapt√©s selon la mati√®re
    let criteria;
    if (subject.toLowerCase().includes('math') || subject.toLowerCase().includes('scien')) {
      criteria = [
        { name: "Rigueur math√©matique", description: "Pr√©cision des calculs et d√©monstrations", weight: 30, max_points: 4 },
        { name: "M√©thodologie", description: "Approche syst√©matique et logique", weight: 25, max_points: 4 },
        { name: "Analyse critique", description: "Validation des hypoth√®ses et r√©sultats", weight: 25, max_points: 4 },
        { name: "Pr√©sentation", description: "Clart√© des graphiques et formules", weight: 20, max_points: 4 }
      ];
    } else if (subject.toLowerCase().includes('fran') || subject.toLowerCase().includes('lang')) {
      criteria = [
        { name: "Analyse litt√©raire", description: "Profondeur de l'analyse des textes", weight: 30, max_points: 4 },
        { name: "M√©thodologie", description: "Approche critique et comparative", weight: 25, max_points: 4 },
        { name: "Expression", description: "Qualit√© de l'√©criture et du style", weight: 25, max_points: 4 },
        { name: "Sources", description: "Diversit√© et pertinence des r√©f√©rences", weight: 20, max_points: 4 }
      ];
    } else if (subject.toLowerCase().includes('hist') || subject.toLowerCase().includes('geo')) {
      criteria = [
        { name: "Recherche documentaire", description: "Qualit√© et diversit√© des sources historiques", weight: 30, max_points: 4 },
        { name: "M√©thodologie", description: "Approche chronologique et spatiale", weight: 25, max_points: 4 },
        { name: "Analyse critique", description: "Interpr√©tation et contextualisation", weight: 25, max_points: 4 },
        { name: "Pr√©sentation", description: "Clart√© de la narration et des cartes", weight: 20, max_points: 4 }
      ];
    } else {
      // Crit√®res g√©n√©riques avec variations
      criteria = [
        { name: "Qualit√© de la recherche", description: "Pertinence et diversit√© des sources consult√©es", weight: 25, max_points: 4 },
        { name: "M√©thodologie", description: "Clart√© et coh√©rence de l'approche m√©thodologique", weight: 25, max_points: 4 },
        { name: "Analyse critique", description: "Profondeur de l'analyse et qualit√© des arguments", weight: 30, max_points: 4 },
        { name: "Pr√©sentation", description: "Clart√© de la pr√©sentation et qualit√© du support visuel", weight: 20, max_points: 4 }
      ];
    }

    // Questions adapt√©es selon la mati√®re
    let questions;
    if (subject.toLowerCase().includes('math')) {
      questions = [
        { question: `Quelle est l'hypoth√®se math√©matique principale de votre recherche en ${subject} ?`, type: "hypothesis", max_points: 5 },
        { question: "Comment avez-vous valid√© vos calculs et d√©monstrations ?", type: "validation", max_points: 5 },
        { question: "Quels outils math√©matiques avez-vous utilis√©s pour votre analyse ?", type: "tools", max_points: 5 }
      ];
    } else if (subject.toLowerCase().includes('fran')) {
      questions = [
        { question: `Quel corpus de textes avez-vous s√©lectionn√© pour votre analyse en ${subject} ?`, type: "corpus", max_points: 5 },
        { question: "Comment avez-vous appliqu√© les m√©thodes d'analyse litt√©raire ?", type: "methodology", max_points: 5 },
        { question: "Quelles sont les sp√©cificit√©s stylistiques que vous avez identifi√©es ?", type: "style", max_points: 5 }
      ];
    } else {
      questions = [
        { question: `Quelle est la question de recherche principale de votre projet en ${subject} ?`, type: "reflection", max_points: 5 },
        { question: "Comment avez-vous s√©lectionn√© vos sources de recherche ?", type: "methodology", max_points: 5 },
        { question: "Quels sont les principaux d√©fis que vous avez rencontr√©s ?", type: "reflection", max_points: 5 }
      ];
    }

    // Instructions adapt√©es selon la mati√®re
    let instructions;
    if (subject.toLowerCase().includes('math')) {
      instructions = [
        "D√©finissez clairement votre hypoth√®se math√©matique",
        "Utilisez des m√©thodes de d√©monstration rigoureuses",
        "V√©rifiez tous vos calculs et r√©sultats",
        "Pr√©sentez vos formules de mani√®re claire",
        "Incluez des graphiques et visualisations pertinents",
        "Pr√©parez une d√©monstration orale structur√©e"
      ];
    } else if (subject.toLowerCase().includes('fran')) {
      instructions = [
        "S√©lectionnez un corpus de textes repr√©sentatif",
        "Appliquez les m√©thodes d'analyse litt√©raire appropri√©es",
        "Analysez les aspects stylistiques et th√©matiques",
        "Contextualisez vos analyses historiquement",
        "Incluez des citations pertinentes et comment√©es",
        "Pr√©parez une pr√©sentation orale argument√©e"
      ];
    } else {
      instructions = [
        "Choisissez un sujet sp√©cifique et pertinent",
        "Effectuez une recherche documentaire approfondie",
        "D√©veloppez une m√©thodologie claire",
        "Pr√©sentez vos r√©sultats de mani√®re structur√©e",
        "Incluez une analyse critique de vos sources",
        "Pr√©parez une pr√©sentation orale de 10-15 minutes"
      ];
    }

    return {
      description: descriptions[variation],
      criteria,
      rubric: this.generateRubric(level),
      questions,
      instructions: instructions.join('\n'),
      success_indicators: [
        "Sujet de recherche clairement d√©fini",
        "M√©thodologie bien structur√©e",
        "Pr√©sentation claire et engageante",
        "Sources vari√©es et pertinentes consult√©es",
        "Analyse critique d√©velopp√©e"
      ]
    };
  }

  // Contenu pour Pr√©sentation Orale
  private generatePresentationContent(subject: string, level: string, variation: number, subjectVariation: number) {
    console.log('üé§ G√©n√©ration contenu Pr√©sentation Orale:', { subject, level, variation, subjectVariation });
    
    const descriptions = [
      `√âvaluation formative pour une pr√©sentation orale en ${subject} d√©veloppant les comp√©tences de communication et d'expression.`,
      `Pr√©sentation orale structur√©e en ${subject} visant √† am√©liorer la clart√© du discours et la confiance en soi.`,
      `Expos√© oral en ${subject} favorisant la ma√Ætrise des techniques de pr√©sentation et l'engagement de l'audience.`,
      `Communication orale en ${subject} renfor√ßant la capacit√© de persuasion et l'impact sur l'audience.`,
      `Pr√©sentation interactive en ${subject} encourageant l'√©change et la participation active.`
    ];

    const criteria = [
      { name: "Contenu", description: "Qualit√© et pertinence du contenu pr√©sent√©", weight: 30, max_points: 4 },
      { name: "Structure", description: "Organisation logique et clart√© du plan", weight: 25, max_points: 4 },
      { name: "Expression", description: "Clart√© du discours et qualit√© de l'√©locution", weight: 25, max_points: 4 },
      { name: "Support visuel", description: "Qualit√© et pertinence des supports utilis√©s", weight: 20, max_points: 4 }
    ];

    const questions = [
      { question: "Quel est le message principal de votre pr√©sentation ?", type: "communication", max_points: 5 },
      { question: "Comment avez-vous structur√© votre argumentation ?", type: "organization", max_points: 5 },
      { question: "Quelles techniques avez-vous utilis√©es pour capter l'attention ?", type: "engagement", max_points: 5 }
    ];

    const instructions = [
      "Pr√©parez un plan clair et structur√©",
      "Cr√©ez des supports visuels pertinents",
      "Entra√Ænez-vous √† la fluidit√© du discours",
      "Anticipez les questions de l'audience",
      "Respectez le temps imparti",
      "Maintenez un contact visuel avec l'audience"
    ];

    return {
      description: descriptions[variation],
      criteria,
      rubric: this.generateRubric(level),
      questions,
      instructions: instructions.join('\n'),
      success_indicators: [
        "Message principal clairement identifi√©",
        "Structure logique et coh√©rente",
        "Expression claire et engageante",
        "Supports visuels pertinents",
        "Gestion du temps respect√©e"
      ]
    };
  }

  // Contenu pour Discussion Critique
  private generateDiscussionContent(subject: string, level: string, variation: number, subjectVariation: number) {
    console.log('üí¨ G√©n√©ration contenu Discussion Critique:', { subject, level, variation, subjectVariation });
    
    const descriptions = [
      `√âvaluation formative pour une discussion critique en ${subject} d√©veloppant l'esprit critique et le d√©bat constructif.`,
      `D√©bat analytique en ${subject} visant √† am√©liorer la capacit√© d'argumentation et d'√©coute active.`,
      `Discussion critique structur√©e en ${subject} favorisant l'√©change d'id√©es et la r√©flexion collective.`,
      `Dialogue constructif en ${subject} encourageant la diversit√© des points de vue et la r√©flexion collective.`,
      `D√©bat structur√© en ${subject} d√©veloppant la pens√©e critique et la capacit√© d'argumentation.`
    ];

    const criteria = [
      { name: "Participation", description: "Engagement actif dans la discussion", weight: 25, max_points: 4 },
      { name: "Argumentation", description: "Qualit√© et pertinence des arguments avanc√©s", weight: 30, max_points: 4 },
      { name: "√âcoute active", description: "Capacit√© √† √©couter et rebondir sur les propos", weight: 25, max_points: 4 },
      { name: "Respect", description: "Respect des r√®gles de d√©bat et des autres", weight: 20, max_points: 4 }
    ];

    const questions = [
      { question: "Quel est votre point de vue principal sur le sujet ?", type: "opinion", max_points: 5 },
      { question: "Comment avez-vous r√©agi aux arguments des autres ?", type: "interaction", max_points: 5 },
      { question: "Qu'avez-vous appris de cette discussion ?", type: "reflection", max_points: 5 }
    ];

    const instructions = [
      "Pr√©parez vos arguments √† l'avance",
      "√âcoutez activement les autres participants",
      "Respectez le temps de parole de chacun",
      "Rebondissez sur les propos des autres",
      "Restez ouvert aux points de vue diff√©rents",
      "Concluez par une synth√®se personnelle"
    ];

    return {
      description: descriptions[variation],
      criteria,
      rubric: this.generateRubric(level),
      questions,
      instructions: instructions.join('\n'),
      success_indicators: [
        "Participation active et constructive",
        "Arguments pertinents et bien structur√©s",
        "√âcoute active et respectueuse",
        "Capacit√© de rebond et d'adaptation",
        "Synth√®se personnelle pertinente"
      ]
    };
  }

  // Contenu pour Portfolio
  private generatePortfolioContent(subject: string, level: string, variation: number, subjectVariation: number) {
    console.log('üìÅ G√©n√©ration contenu Portfolio:', { subject, level, variation, subjectVariation });
    
    const descriptions = [
      `√âvaluation formative pour un portfolio en ${subject} permettant de documenter le parcours d'apprentissage.`,
      `Collection de travaux en ${subject} visant √† d√©montrer l'√©volution des comp√©tences et la r√©flexion m√©tacognitive.`,
      `Portfolio r√©flexif en ${subject} favorisant l'auto-√©valuation et la prise de conscience des progr√®s.`,
      `Collection structur√©e en ${subject} illustrant la progression et la ma√Ætrise des comp√©tences.`,
      `Portfolio d'apprentissage en ${subject} documentant les r√©alisations et les r√©flexions personnelles.`
    ];

    const criteria = [
      { name: "S√©lection", description: "Pertinence et diversit√© des travaux s√©lectionn√©s", weight: 25, max_points: 4 },
      { name: "Organisation", description: "Structure claire et logique du portfolio", weight: 25, max_points: 4 },
      { name: "R√©flexion", description: "Qualit√© de l'analyse et de la r√©flexion personnelle", weight: 30, max_points: 4 },
      { name: "Pr√©sentation", description: "Qualit√© visuelle et clart√© de la pr√©sentation", weight: 20, max_points: 4 }
    ];

    const questions = [
      { question: "Quels travaux illustrent le mieux vos progr√®s ?", type: "selection", max_points: 5 },
      { question: "Comment avez-vous organis√© votre portfolio ?", type: "organization", max_points: 5 },
      { question: "Que r√©v√®le ce portfolio sur votre apprentissage ?", type: "reflection", max_points: 5 }
    ];

    const instructions = [
      "S√©lectionnez vos meilleurs travaux",
      "Organisez-les de mani√®re logique",
      "Ajoutez des commentaires r√©flexifs",
      "Incluez des exemples de progression",
      "Pr√©sentez clairement chaque section",
      "Concluez par une auto-√©valuation globale"
    ];

    return {
      description: descriptions[variation],
      criteria,
      rubric: this.generateRubric(level),
      questions,
      instructions: instructions.join('\n'),
      success_indicators: [
        "S√©lection pertinente des travaux",
        "Organisation claire et logique",
        "R√©flexion personnelle approfondie",
        "D√©monstration des progr√®s",
        "Pr√©sentation soign√©e et professionnelle"
      ]
    };
  }

  // Contenu pour Observation Participante
  private generateObservationContent(subject: string, level: string, variation: number, subjectVariation: number) {
    console.log('üëÅÔ∏è G√©n√©ration contenu Observation Participante:', { subject, level, variation, subjectVariation });
    
    const descriptions = [
      `√âvaluation formative pour une observation participante en ${subject} d√©veloppant les comp√©tences d'analyse et d'empathie.`,
      `Observation structur√©e en ${subject} visant √† am√©liorer la capacit√© d'analyse et la prise de recul.`,
      `Immersion observationnelle en ${subject} favorisant la compr√©hension des dynamiques et des comportements.`,
      `Analyse observationnelle en ${subject} renfor√ßant la capacit√© d'interpr√©tation et de synth√®se.`,
      `Observation m√©thodique en ${subject} d√©veloppant l'esprit d'analyse et la rigueur scientifique.`
    ];

    const criteria = [
      { name: "Observation", description: "Qualit√© et pr√©cision des observations", weight: 30, max_points: 4 },
      { name: "Analyse", description: "Profondeur de l'analyse des donn√©es recueillies", weight: 30, max_points: 4 },
      { name: "R√©flexion", description: "Qualit√© de la r√©flexion personnelle", weight: 25, max_points: 4 },
      { name: "Documentation", description: "Qualit√© de la documentation des observations", weight: 15, max_points: 4 }
    ];

    const questions = [
      { question: "Qu'avez-vous observ√© de plus surprenant ?", type: "observation", max_points: 5 },
      { question: "Comment avez-vous analys√© vos observations ?", type: "analysis", max_points: 5 },
      { question: "Quelles conclusions en tirez-vous ?", type: "conclusion", max_points: 5 }
    ];

    const instructions = [
      "D√©finissez clairement votre objectif d'observation",
      "Prenez des notes d√©taill√©es et objectives",
      "Identifiez les patterns et les anomalies",
      "Analysez vos observations de mani√®re critique",
      "Documentez vos r√©flexions personnelles",
      "Pr√©parez un rapport d'observation structur√©"
    ];

    return {
      description: descriptions[variation],
      criteria,
      rubric: this.generateRubric(level),
      questions,
      instructions: instructions.join('\n'),
      success_indicators: [
        "Observations pr√©cises et objectives",
        "Analyse approfondie des donn√©es",
        "R√©flexion personnelle pertinente",
        "Documentation claire et structur√©e",
        "Conclusions bien argument√©es"
      ]
    };
  }

  // Contenu pour Auto-√©valuation
  private generateSelfEvaluationContent(subject: string, level: string, variation: number, subjectVariation: number) {
    console.log('üîç G√©n√©ration contenu Auto-√©valuation:', { subject, level, variation, subjectVariation });
    
    const descriptions = [
      `√âvaluation formative pour une auto-√©valuation en ${subject} d√©veloppant la conscience de ses propres comp√©tences.`,
      `R√©flexion personnelle en ${subject} visant √† am√©liorer la capacit√© d'auto-analyse et de m√©tacognition.`,
      `Auto-√©valuation structur√©e en ${subject} favorisant la prise de conscience des forces et des axes d'am√©lioration.`,
      `Analyse r√©flexive en ${subject} encourageant la m√©tacognition et l'auto-r√©gulation.`,
      `√âvaluation personnelle en ${subject} d√©veloppant la conscience de soi et la responsabilit√© d'apprentissage.`
    ];

    const criteria = [
      { name: "Honn√™tet√©", description: "Objectivit√© et honn√™tet√© dans l'auto-√©valuation", weight: 25, max_points: 4 },
      { name: "Analyse", description: "Profondeur de l'analyse de ses propres comp√©tences", weight: 30, max_points: 4 },
      { name: "Objectifs", description: "Clart√© et r√©alisme des objectifs fix√©s", weight: 25, max_points: 4 },
      { name: "Plan d'action", description: "Concr√©tude du plan d'am√©lioration", weight: 20, max_points: 4 }
    ];

    const questions = [
      { question: "Quelles sont vos forces principales dans cette mati√®re ?", type: "strengths", max_points: 5 },
      { question: "Sur quoi aimeriez-vous progresser ?", type: "improvement", max_points: 5 },
      { question: "Comment comptez-vous y parvenir ?", type: "planning", max_points: 5 }
    ];

    const instructions = [
      "√âvaluez honn√™tement vos comp√©tences actuelles",
      "Identifiez vos forces et vos faiblesses",
      "Fixez des objectifs r√©alistes et mesurables",
      "D√©finissez un plan d'action concret",
      "Pr√©voyez des indicateurs de progression",
      "Planifiez des moments de r√©√©valuation"
    ];

    return {
      description: descriptions[variation],
      criteria,
      rubric: this.generateRubric(level),
      questions,
      instructions: instructions.join('\n'),
      success_indicators: [
        "Auto-√©valuation honn√™te et objective",
        "Analyse approfondie des comp√©tences",
        "Objectifs clairs et r√©alistes",
        "Plan d'action concret et r√©alisable",
        "Indicateurs de progression d√©finis"
      ]
    };
  }

  // G√©n√©rer une grille de notation adapt√©e au niveau
  private generateRubric(level: string) {
    const baseRubric = {
      excellent: { points: 4, description: "Travail exceptionnel d√©montrant une ma√Ætrise approfondie du sujet" },
      good: { points: 3, description: "Travail de qualit√© avec une bonne compr√©hension du sujet" },
      satisfactory: { points: 2, description: "Travail acceptable avec une compr√©hension de base" },
      needs_improvement: { points: 1, description: "Travail n√©cessitant des am√©liorations significatives" }
    };

    // Adapter selon le niveau
    if (level === 'beginner') {
      baseRubric.excellent.description = "Travail remarquable pour un d√©butant, d√©montrant une compr√©hension solide des bases";
      baseRubric.good.description = "Bon travail de d√©butant avec une compr√©hension correcte des concepts fondamentaux";
    } else if (level === 'advanced') {
      baseRubric.excellent.description = "Travail d'expert d√©montrant une ma√Ætrise exceptionnelle et une cr√©ativit√© remarquable";
      baseRubric.good.description = "Travail avanc√© avec une compr√©hension approfondie et une approche innovante";
    }

    return baseRubric;
  }

  // Obtenir le nom d'affichage du type
  private getTypeDisplayName(type: string): string {
    const typeNames: { [key: string]: string } = {
      'project': 'Projet de Recherche',
      'presentation': 'Pr√©sentation Orale',
      'discussion': 'Discussion Critique',
      'portfolio': 'Portfolio',
      'observation': 'Observation Participante',
      'self_evaluation': 'Auto-√©valuation'
    };
    return typeNames[type] || '√âvaluation';
  }

  // R√©cup√©rer tous les types d'√©valuations support√©s
  async getAvailableTypes(): Promise<any[]> {
    try {
      const response = await this.request('/api/v1/ai-formative-evaluations/available-types/');
      return response.assessment_types || [];
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des types:', error);
      // Types par d√©faut si l'API √©choue
      return [
        { type: 'project', name: 'Projet de Recherche', description: 'Travail de recherche individuel ou en groupe' },
        { type: 'presentation', name: 'Pr√©sentation Orale', description: 'Expos√© oral devant la classe' },
        { type: 'discussion', name: 'Discussion Critique', description: 'D√©bat et analyse critique en groupe' },
        { type: 'portfolio', name: 'Portfolio', description: 'Collection de travaux et r√©flexions' },
        { type: 'observation', name: 'Observation Participante', description: 'Observation et analyse de situations' },
        { type: 'self_evaluation', name: 'Auto-√©valuation', description: '√âvaluation de ses propres comp√©tences' }
      ];
    }
  }

  // Cr√©er une nouvelle √©valuation formative
  async createEvaluation(evaluation: AIGeneratedEvaluation, formData: any): Promise<FormativeEvaluation> {
    try {
      console.log('üíæ Tentative de sauvegarde backend...');
      
      // Structure simplifi√©e pour le backend
      const adaptedData = {
        title: evaluation.title,
        description: evaluation.description,
        assessment_type: evaluation.assessment_type,
        subject: formData.subject || "Math√©matiques",
        target_level: formData.target_level || "intermediate",
        duration_minutes: formData.duration_minutes || 60,
        max_students: formData.max_students || 30,
        learning_objectives: ["Comp√©tence 1", "Comp√©tence 2"],
        criteria: evaluation.criteria.map(c => ({
          name: c.name,
          description: c.description,
          weight: c.weight,
          max_points: c.max_points
        })),
        rubric: {
          excellent: evaluation.rubric.excellent,
          good: evaluation.rubric.good,
          satisfactory: evaluation.rubric.satisfactory,
          needs_improvement: evaluation.rubric.needs_improvement
        },
        questions: evaluation.questions.map(q => ({
          question: q.question,
          type: q.type,
          max_points: q.max_points
        })),
        instructions: evaluation.instructions,
        success_indicators: evaluation.success_indicators
      };

      console.log('[FORMATIVE] Donn√©es adapt√©es envoy√©es:', adaptedData);
      console.log('[FORMATIVE] URL backend:', 'http://localhost:8000/api/v1/formative-evaluations/');

      // Appel direct au backend
      const response = await this.request('/api/v1/formative-evaluations/', {
        method: 'POST',
        body: JSON.stringify(adaptedData),
      });
      
      console.log('‚úÖ Sauvegarde backend r√©ussie:', response);
      return response;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation:', error);
      throw error; // Remonter l'erreur pour la g√©rer dans l'UI
    }
  }



  // R√©cup√©rer toutes les √©valuations formatives
  async getAllEvaluations(): Promise<FormativeEvaluation[]> {
    try {
      const response = await this.request('/api/v1/formative-evaluations/');
      return response || [];
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des √©valuations formatives:', error);
      return [];
    }
  }

  // Mettre √† jour une √©valuation formative
  async updateEvaluation(evaluationId: number, updatedData: Partial<FormativeEvaluation>): Promise<FormativeEvaluation> {
    try {
      console.log('üíæ Tentative de mise √† jour backend...');
      
      // Structure simplifi√©e pour le backend
      const adaptedData = {
        title: updatedData.title,
        description: updatedData.description,
        assessment_type: updatedData.assessment_type,
        subject: updatedData.subject,
        target_level: updatedData.target_level,
        duration_minutes: updatedData.duration_minutes,
        max_students: updatedData.max_students,
        learning_objectives: updatedData.learning_objectives || ["Comp√©tence 1", "Comp√©tence 2"],
        criteria: updatedData.criteria?.map(c => ({
          name: c.name,
          description: c.description,
          weight: c.weight,
          max_points: c.max_points
        })) || [],
        rubric: updatedData.rubric || {
          excellent: { points: 4, description: "Travail exceptionnel" },
          good: { points: 3, description: "Travail de qualit√©" },
          satisfactory: { points: 2, description: "Travail acceptable" },
          needs_improvement: { points: 1, description: "Travail √† am√©liorer" }
        },
        questions: updatedData.questions?.map(q => ({
          question: q.question,
          type: q.type,
          max_points: q.max_points
        })) || [],
        instructions: updatedData.instructions || '',
        success_indicators: updatedData.success_indicators || []
      };

      console.log('[FORMATIVE] Donn√©es de mise √† jour envoy√©es:', adaptedData);

      // Appel au backend
      const response = await this.request(`/api/v1/formative-evaluations/${evaluationId}/`, {
        method: 'POST',
        body: JSON.stringify(adaptedData),
      });
      
      console.log('‚úÖ Mise √† jour backend r√©ussie:', response);
      return response;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour:', error);
      throw error;
    }
  }

  // Activer/D√©sactiver une √©valuation
  async toggleEvaluationStatus(evaluationId: number, isActive: boolean): Promise<boolean> {
    try {
      const response = await this.request(`/api/v1/formative-evaluations/${evaluationId}/toggle-status/`, {
        method: 'PATCH',
        body: JSON.stringify({ is_active: isActive }),
      });
      return response.success;
    } catch (error) {
      console.error('Erreur lors du changement de statut:', error);
      return false;
    }
  }

  // M√©thode priv√©e pour les requ√™tes
  private async request(endpoint: string, options: RequestInit = {}): Promise<any> {
    const token = localStorage.getItem('najah_token');
    
    if (!token) {
      throw new Error('Token d\'authentification manquant. Veuillez vous reconnecter.');
    }
    
    const defaultOptions: RequestInit = {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      ...options,
    };

    const fullUrl = `http://localhost:8000${endpoint}`;
    console.log(`[FORMATIVE] Appel API: ${fullUrl}`);
    console.log(`[FORMATIVE] Token: ${token ? 'Pr√©sent' : 'Manquant'}`);
    console.log(`[FORMATIVE] Options:`, defaultOptions);
    console.log(`[FORMATIVE] Body:`, options.body);

    try {
      const response = await fetch(fullUrl, defaultOptions);
      
      console.log(`[FORMATIVE] R√©ponse re√ßue:`, {
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      });
      
      if (!response.ok) {
        // Essayer de lire le corps de l'erreur
        let errorBody = '';
        try {
          errorBody = await response.text();
          console.error(`[FORMATIVE] Corps de l'erreur:`, errorBody);
        } catch (e) {
          console.error(`[FORMATIVE] Impossible de lire le corps de l'erreur:`, e);
        }
        
        if (response.status === 401) {
          throw new Error('Erreur d\'authentification. Veuillez vous reconnecter.');
        } else if (response.status === 500) {
          throw new Error(`Erreur serveur (500): ${errorBody || 'Probl√®me interne du serveur'}`);
        } else {
          throw new Error(`Erreur HTTP ${response.status}: ${response.statusText} - ${errorBody}`);
        }
      }
      
      const responseData = await response.json();
      console.log(`[FORMATIVE] Donn√©es re√ßues:`, responseData);
      return responseData;
      
    } catch (fetchError) {
      console.error(`[FORMATIVE] Erreur fetch:`, fetchError);
      throw fetchError;
    }
  }
}

export const formativeEvaluationService = new FormativeEvaluationService();
