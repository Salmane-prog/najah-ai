#!/usr/bin/env python3
"""
Script pour diagnostiquer et corriger le probl√®me de l'endpoint teacher-dashboard
"""

import requests
import json

def diagnose_teacher_dashboard():
    """Diagnostiquer le probl√®me de l'endpoint teacher-dashboard"""
    print("üîç Diagnostic de l'endpoint teacher-dashboard")
    print("=" * 60)
    
    BASE_URL = "http://localhost:8000"
    
    # 1. Test de base du serveur
    print("\n1Ô∏è‚É£ Test de base du serveur...")
    try:
        response = requests.get(f"{BASE_URL}/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Serveur accessible")
        else:
            print(f"‚ùå Serveur accessible mais status inattendu: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Serveur non accessible: {e}")
        return False
    
    # 2. Test de l'endpoint principal teacher-dashboard
    print("\n2Ô∏è‚É£ Test de l'endpoint principal /api/v1/teacher-dashboard/...")
    try:
        response = requests.get(f"{BASE_URL}/api/v1/teacher-dashboard/", timeout=5)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Endpoint principal accessible")
        else:
            print(f"‚ùå Endpoint principal non accessible: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # 3. Test de l'endpoint students
    print("\n3Ô∏è‚É£ Test de l'endpoint /api/v1/teacher-dashboard/students...")
    try:
        response = requests.get(f"{BASE_URL}/api/v1/teacher-dashboard/students", timeout=5)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Endpoint students accessible")
        elif response.status_code == 401:
            print("‚ö†Ô∏è Endpoint accessible mais authentification requise")
        elif response.status_code == 404:
            print("‚ùå Endpoint students non trouv√© (404)")
            print("üí° Probl√®me de routage d√©tect√©")
        else:
            print(f"‚ùå Endpoint accessible mais status inattendu: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # 4. Test de l'endpoint analytics
    print("\n4Ô∏è‚É£ Test de l'endpoint /api/v1/teacher-dashboard/analytics...")
    try:
        response = requests.get(f"{BASE_URL}/api/v1/teacher-dashboard/analytics", timeout=5)
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ Endpoint analytics accessible")
        elif response.status_code == 401:
            print("‚ö†Ô∏è Endpoint accessible mais authentification requise")
        elif response.status_code == 404:
            print("‚ùå Endpoint analytics non trouv√© (404)")
        else:
            print(f"‚ùå Endpoint accessible mais status inattendu: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    # 5. Test avec authentification (si possible)
    print("\n5Ô∏è‚É£ Test avec authentification...")
    try:
        # Essayer de se connecter avec un compte professeur
        login_response = requests.post(f"{BASE_URL}/api/v1/auth/login", json={
            "email": "marizee.dubois@najah.ai",
            "password": "password123"
        }, timeout=5)
        
        if login_response.status_code == 200:
            token = login_response.json().get("access_token")
            headers = {"Authorization": f"Bearer {token}"}
            
            print("‚úÖ Connexion r√©ussie, test avec token...")
            
            # Test de l'endpoint students avec authentification
            response = requests.get(f"{BASE_URL}/api/v1/teacher-dashboard/students", headers=headers, timeout=10)
            print(f"Status avec auth: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Succ√®s - {data.get('total_count', 0)} √©tudiants trouv√©s")
            elif response.status_code == 404:
                print("‚ùå Endpoint toujours 404 m√™me avec authentification")
                print("üí° Probl√®me de routage confirm√©")
            else:
                print(f"‚ö†Ô∏è Status inattendu avec auth: {response.status_code}")
                print(f"R√©ponse: {response.text}")
        else:
            print(f"‚ùå √âchec de connexion: {login_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'authentification: {e}")
    
    print("\n" + "=" * 60)
    print("üèÅ Diagnostic termin√©")
    
    # Recommandations
    print("\nüí° Recommandations:")
    if response.status_code == 404:
        print("1. V√©rifier la configuration des routes dans app.py")
        print("2. V√©rifier que le serveur a red√©marr√© apr√®s les modifications")
        print("3. V√©rifier les logs du serveur pour plus de d√©tails")
    else:
        print("1. L'endpoint semble fonctionner")
        print("2. V√©rifier l'authentification et les permissions")
    
    return True

if __name__ == "__main__":
    diagnose_teacher_dashboard()









